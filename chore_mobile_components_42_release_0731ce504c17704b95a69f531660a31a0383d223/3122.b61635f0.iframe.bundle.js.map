{"version":3,"file":"3122.b61635f0.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./packages/input-autocomplete/src/autocomplete-field/index.module.css?87c8","webpack://@alfalab/core-components/./packages/input-autocomplete/src/autocomplete-field/Component.tsx","webpack://@alfalab/core-components/./packages/input-autocomplete/src/Component.desktop.tsx","webpack://@alfalab/core-components/./packages/input-autocomplete/src/Component.mobile.tsx","webpack://@alfalab/core-components/./packages/input-autocomplete/src/autocomplete-mobile-field/index.module.css?29f1","webpack://@alfalab/core-components/./packages/input-autocomplete/src/autocomplete-mobile-field/Component.tsx","webpack://@alfalab/core-components/./packages/input-autocomplete/src/Component.responsive.tsx","webpack://@alfalab/core-components/./packages/input-autocomplete/src/Component.modal.mobile.tsx","webpack://@alfalab/core-components/./packages/input-autocomplete/src/mobile.module.css?688a"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"arrow\":\"arrow_RWc1Z\",\"error\":\"error_HXxNm\"};","import React, { useCallback, useRef } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport cn from 'classnames';\n\nimport { InputDesktop as DefaultInput } from '@alfalab/core-components-input/desktop';\nimport type { FieldProps } from '@alfalab/core-components-select/shared';\n\nimport { InputAutocompleteDesktopProps } from '../Component.desktop';\n\nimport styles from './index.module.css';\n\nexport type AutocompleteFieldProps = FieldProps &\n    Pick<InputAutocompleteDesktopProps, 'Input' | 'inputProps' | 'value' | 'onInput' | 'readOnly'>;\n\nexport const AutocompleteField = ({\n    label,\n    labelView = 'inner',\n    placeholder,\n    size,\n    Arrow,\n    Input = DefaultInput,\n    value,\n    error,\n    success,\n    hint,\n    disabled,\n    readOnly,\n    onInput,\n    inputProps = {},\n    innerProps,\n}: AutocompleteFieldProps) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const { onClick, onFocus } = innerProps;\n\n    const inputDisabled = disabled || readOnly;\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            if (onClick) onClick(event);\n\n            if (inputRef.current) {\n                inputRef.current.focus();\n            }\n        },\n        [onClick],\n    );\n\n    return (\n        <Input\n            {...inputProps}\n            {...innerProps}\n            wrapperRef={mergeRefs([\n                innerProps.ref as React.Ref<HTMLElement>,\n                inputProps.wrapperRef as React.Ref<HTMLElement>,\n            ])}\n            ref={mergeRefs([inputRef, inputProps.ref as React.Ref<HTMLElement>])}\n            disabled={disabled}\n            readOnly={readOnly}\n            block={true}\n            label={label}\n            labelView={labelView}\n            placeholder={placeholder}\n            size={size}\n            error={error}\n            success={success}\n            hint={hint}\n            onChange={onInput}\n            onClick={inputDisabled ? undefined : handleClick}\n            onFocus={inputDisabled ? undefined : onFocus}\n            autoComplete='off'\n            value={value}\n            rightAddons={\n                (Arrow || inputProps.rightAddons) && (\n                    <React.Fragment>\n                        {inputProps.rightAddons}\n                        {Arrow && (\n                            <span\n                                className={cn(styles.arrow, {\n                                    [styles.error]: error,\n                                })}\n                            >\n                                {Arrow}\n                            </span>\n                        )}\n                    </React.Fragment>\n                )\n            }\n        />\n    );\n};\n","import React, { ChangeEvent, FC, forwardRef, RefAttributes } from 'react';\n\nimport { InputProps } from '@alfalab/core-components-input';\nimport {\n    BaseSelect,\n    BaseSelectProps,\n    Optgroup as DefaultOptgroup,\n    Option as DefaultOption,\n    OptionsList as DefaultOptionsList,\n} from '@alfalab/core-components-select/shared';\n\nimport { AutocompleteField } from './autocomplete-field';\n\nexport type InputAutocompleteDesktopProps = Omit<BaseSelectProps, 'Field' | 'nativeSelect'> & {\n    /**\n     * Компонент ввода значения\n     */\n    Input?: FC<InputProps & RefAttributes<HTMLInputElement>>;\n\n    /**\n     * Пропсы, которые будут прокинуты в инпут\n     */\n    inputProps?: InputProps & Record<string, unknown>;\n\n    /**\n     * Значение поля ввода\n     */\n    value?: string;\n\n    /**\n     * Поле доступно только для чтения\n     */\n    readOnly?: InputProps['readOnly'];\n\n    /**\n     * Отображение иконки успеха\n     */\n    success?: boolean;\n\n    /**\n     * Обработчик ввода\n     */\n    onInput?: (event: ChangeEvent<HTMLInputElement>) => void;\n\n    /**\n     * Хранит функцию, с помощью которой можно обновить положение поповера\n     */\n    updatePopover?: BaseSelectProps['updatePopover'];\n};\n\nexport const InputAutocompleteDesktop = forwardRef<HTMLInputElement, InputAutocompleteDesktopProps>(\n    (\n        {\n            OptionsList = DefaultOptionsList,\n            Optgroup = DefaultOptgroup,\n            Option = DefaultOption,\n            Input,\n            inputProps = {},\n            onInput,\n            value,\n            success,\n            readOnly,\n            closeOnSelect = false,\n            options,\n            ...restProps\n        },\n        ref,\n    ) => (\n        <BaseSelect\n            ref={ref}\n            autocomplete={true}\n            options={options}\n            closeOnSelect={closeOnSelect}\n            Option={Option}\n            Field={AutocompleteField}\n            fieldProps={{\n                Input,\n                onInput,\n                value,\n                inputProps,\n                readOnly,\n                success,\n            }}\n            Optgroup={Optgroup}\n            OptionsList={OptionsList}\n            {...restProps}\n        />\n    ),\n);\n","import React, { ChangeEvent, ElementType, RefObject, useMemo, useRef, useState } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport cn from 'classnames';\nimport throttle from 'lodash.throttle';\n\nimport { BottomSheetProps } from '@alfalab/core-components-bottom-sheet';\nimport { ButtonMobile, ButtonMobileProps } from '@alfalab/core-components-button/mobile';\nimport { Input as CoreInput } from '@alfalab/core-components-input';\nimport { SelectMobile, SelectMobileProps } from '@alfalab/core-components-select/mobile';\nimport type {\n    BaseSelectChangePayload,\n    BaseSelectProps,\n} from '@alfalab/core-components-select/shared';\n\nimport { AutocompleteMobileField } from './autocomplete-mobile-field';\n\nimport styles from './mobile.module.css';\n\nexport type InputAutocompleteMobileProps = Omit<\n    BaseSelectProps,\n    'OptionsList' | 'Checkmark' | 'onScroll' | 'nativeSelect' | 'autocomplete' | 'valueRenderer'\n> & {\n    /**\n     * Обработчик выбора\n     */\n    onChange: (payload: string | BaseSelectChangePayload) => void;\n\n    /**\n     * Обработчик ввода фильтра.\n     */\n    onFilter: (event: ChangeEvent<HTMLInputElement>) => void;\n\n    /**\n     * Значение поля ввода\n     */\n    value?: string;\n\n    /**\n     * Значение фильтра.\n     */\n    filter?: string;\n\n    /**\n     * Обработчик нажатия на кнопку \"Отмена\".\n     */\n    onCancel?: () => void;\n\n    /**\n     * Обработчик нажатия на крестик в инпуте фильтра.\n     */\n    onClearFilter?: () => void;\n\n    /**\n     * Дополнительные пропсы компонента BottomSheet\n     */\n    bottomSheetProps?: Partial<BottomSheetProps>;\n\n    /**\n     * Дополнительные пропсы на слот под заголовком компонента BottomSheet\n     */\n    bottomSheetHeaderAddonsProps?: Record<string, unknown>;\n\n    /**\n     * Дополнительные пропсы на кнопку \"продолжить\"\n     */\n    continueButtonProps?: ButtonMobileProps;\n\n    /**\n     * Дополнительные пропсы на кнопку \"отмена\"\n     */\n    cancelButtonProps?: ButtonMobileProps;\n\n    /**\n     * Кастомный инпут\n     */\n    Input?: ElementType;\n};\n\nconst SELECTED: string[] = [];\n\nexport const InputAutocompleteMobile = React.forwardRef(\n    (\n        {\n            Input,\n            bottomSheetProps = {},\n            bottomSheetHeaderAddonsProps = {},\n            value = '',\n            filter = '',\n            name,\n            Arrow = null,\n            label,\n            placeholder,\n            size = 's',\n            open: openProp,\n            onFilter,\n            onChange,\n            onOpen,\n            onCancel,\n            onClearFilter,\n            continueButtonProps,\n            cancelButtonProps,\n            selected,\n            multiple,\n            ...restProps\n        }: InputAutocompleteMobileProps,\n        ref,\n    ) => {\n        const [open, setOpen] = useState(false);\n        const bottomSheetInputRef = useRef<HTMLInputElement>(null);\n        const targetRef = useRef<HTMLDivElement>(null);\n\n        const setBottomSheetVisibility = (isOpen: boolean) => {\n            if (openProp === undefined) {\n                setOpen(isOpen);\n            }\n\n            if (onOpen) {\n                onOpen({ open: isOpen, name });\n            }\n        };\n\n        const handleOpen: SelectMobileProps['onOpen'] = (payload) => {\n            setBottomSheetVisibility(Boolean(payload.open));\n        };\n\n        const handleOptionsListTouchMove = useMemo(\n            () =>\n                throttle(() => {\n                    const input = bottomSheetInputRef.current;\n\n                    if (input && document.activeElement === input) {\n                        input.blur();\n                    }\n                }, 300),\n            [],\n        );\n\n        const handleApply = () => {\n            setBottomSheetVisibility(false);\n            onChange(filter);\n        };\n\n        const handleChange: SelectMobileProps['onChange'] = (payload) => {\n            onChange(payload);\n\n            if (multiple) {\n                // После выбора опции возвращаем фокус в поле ввода.\n                bottomSheetInputRef.current?.focus();\n            }\n        };\n\n        const handleCancel = () => {\n            setBottomSheetVisibility(false);\n\n            if (onCancel) {\n                onCancel();\n            }\n        };\n\n        const handleInputFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n            const input = bottomSheetInputRef.current;\n\n            // Перед закрытием шторки снимаем фокус с инпута, чтобы предотвратить скачок шторки.\n            if (\n                event.relatedTarget === targetRef.current &&\n                input &&\n                input === document.activeElement\n            ) {\n                input.blur();\n            }\n        };\n\n        const getBottomSheetProps = (): InputAutocompleteMobileProps['bottomSheetProps'] => {\n            const Component = Input || CoreInput;\n\n            return {\n                actionButton: (\n                    <div className={styles.footer}>\n                        <ButtonMobile\n                            block={true}\n                            view='secondary'\n                            size='m'\n                            onClick={handleCancel}\n                            {...cancelButtonProps}\n                        >\n                            Отмена\n                        </ButtonMobile>\n                        <ButtonMobile\n                            block={true}\n                            view='primary'\n                            size='m'\n                            onClick={handleApply}\n                            {...continueButtonProps}\n                        >\n                            Продолжить\n                        </ButtonMobile>\n                    </div>\n                ),\n                title: label || placeholder,\n                bottomAddons: (\n                    <Component\n                        block={true}\n                        clear={!!onClearFilter}\n                        onClear={onClearFilter}\n                        value={filter}\n                        onInput={onFilter}\n                        placeholder={placeholder}\n                        onFocus={handleInputFocus}\n                        {...bottomSheetHeaderAddonsProps}\n                        className={cn(\n                            styles.bottomAddonInput,\n                            bottomSheetHeaderAddonsProps.className as string,\n                        )}\n                        ref={mergeRefs([\n                            bottomSheetInputRef,\n                            bottomSheetHeaderAddonsProps.ref as RefObject<HTMLInputElement>,\n                        ])}\n                    />\n                ),\n                initialHeight: 'full',\n                ...bottomSheetProps,\n                containerProps: {\n                    onTouchMove: handleOptionsListTouchMove,\n                    ...bottomSheetProps.containerProps,\n                },\n            };\n        };\n\n        return (\n            <SelectMobile\n                ref={mergeRefs([targetRef, ref])}\n                selected={selected || SELECTED}\n                open={Boolean(open || openProp)}\n                onOpen={handleOpen}\n                onChange={handleChange}\n                Arrow={Arrow}\n                Field={AutocompleteMobileField}\n                fieldProps={{ value }}\n                placeholder={placeholder}\n                label={label}\n                size={size}\n                name={name}\n                multiple={multiple}\n                useWithApplyHook={false}\n                bottomSheetProps={getBottomSheetProps()}\n                optionsListProps={{ showFooter: false }}\n                {...restProps}\n            />\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_shmZr\",\"field\":\"field_lHc4C\",\"disabled\":\"disabled_fvYlN\",\"placeholder\":\"placeholder__30Tu\",\"contentWrapper\":\"contentWrapper_sbKRl\",\"value\":\"value_GSNlj\",\"focusVisible\":\"focusVisible_lmfo8\"};","import React, { useRef, useState } from 'react';\nimport cn from 'classnames';\n\nimport {\n    FormControlMobile,\n    FormControlMobileProps,\n} from '@alfalab/core-components-form-control/mobile';\nimport { InputAutocompleteProps } from '@alfalab/core-components-input-autocomplete';\nimport type { FieldProps as BaseFieldProps } from '@alfalab/core-components-select/shared';\nimport { useFocus } from '@alfalab/hooks';\n\nimport styles from './index.module.css';\n\nexport type AutocompleteMobileFieldProps = FormControlMobileProps &\n    Omit<BaseFieldProps, 'selected' | 'multiple' | 'success'> &\n    Pick<InputAutocompleteProps, 'value'>;\n\nexport const AutocompleteMobileField = ({\n    size = 'm',\n    open,\n    error,\n    hint,\n    disabled,\n    label,\n    labelView = 'inner',\n    placeholder,\n    value,\n    innerProps,\n    dataTestId,\n    fieldClassName,\n    Arrow,\n    valueRenderer,\n    toggleMenu,\n    setSelectedItems,\n    selectedMultiple,\n    ...restProps\n}: AutocompleteMobileFieldProps) => {\n    const [focused, setFocused] = useState(false);\n\n    const wrapperRef = useRef<HTMLDivElement>(null);\n\n    const [focusVisible] = useFocus(wrapperRef, 'keyboard');\n\n    const filled = Boolean(value);\n    const showLabel = !!label && (filled || !placeholder || labelView === 'outer');\n\n    return (\n        <div\n            className={styles.component}\n            ref={wrapperRef}\n            onFocus={() => setFocused(true)}\n            onBlur={() => setFocused(false)}\n        >\n            <FormControlMobile\n                fieldClassName={cn(styles.field, fieldClassName, {\n                    [styles.disabled]: disabled,\n                    [styles.focusVisible]: focusVisible,\n                })}\n                block={true}\n                size={size}\n                focused={focused}\n                disabled={disabled}\n                filled={filled}\n                label={showLabel && label}\n                labelView={labelView}\n                error={error}\n                hint={hint}\n                rightAddons={Arrow}\n                data-test-id={dataTestId}\n                {...restProps}\n                {...innerProps}\n            >\n                <div className={styles.contentWrapper}>\n                    {placeholder && !filled && (\n                        <span className={styles.placeholder}>{placeholder}</span>\n                    )}\n                    {filled && <div className={styles.value}>{value}</div>}\n                </div>\n            </FormControlMobile>\n        </div>\n    );\n};\n","import React, { forwardRef } from 'react';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { BottomSheetProps } from '@alfalab/core-components-bottom-sheet';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { ButtonMobileProps } from '@alfalab/core-components-button/mobile';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { BaseSelectProps } from '@alfalab/core-components-select/shared';\nimport { useMedia } from '@alfalab/hooks';\n\nimport { InputAutocompleteDesktop, InputAutocompleteDesktopProps } from './Component.desktop';\nimport { InputAutocompleteMobile, InputAutocompleteMobileProps } from './Component.mobile';\n\nexport type InputAutocompleteResponsiveProps = InputAutocompleteDesktopProps &\n    InputAutocompleteMobileProps & {\n        /**\n         * Контрольная точка, с нее начинается desktop версия\n         * @default 1024\n         */\n        breakpoint?: number;\n    };\n\nexport type InputAutocompleteMedia = 'desktop' | 'mobile';\n\nexport const InputAutocompleteResponsive = forwardRef<\n    HTMLInputElement | HTMLDivElement,\n    InputAutocompleteResponsiveProps\n>(({ breakpoint = 1024, ...restProps }, ref) => {\n    const [view] = useMedia<InputAutocompleteMedia>(\n        [\n            ['mobile', `(max-width: ${breakpoint - 1}px)`],\n            ['desktop', `(min-width: ${breakpoint}px)`],\n        ],\n        'desktop',\n    );\n\n    return view === 'desktop' ? (\n        <InputAutocompleteDesktop {...restProps} ref={ref as React.Ref<HTMLInputElement>} />\n    ) : (\n        <InputAutocompleteMobile {...restProps} ref={ref} />\n    );\n});\n","import React, { ChangeEvent, ElementType, RefObject, useEffect, useRef } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport cn from 'classnames';\nimport throttle from 'lodash.throttle';\n\nimport { ButtonMobile, ButtonMobileProps } from '@alfalab/core-components-button/mobile';\nimport { Input as CoreInput } from '@alfalab/core-components-input';\nimport {\n    SelectMobileProps,\n    SelectModalMobile,\n    SelectModalMobileProps,\n} from '@alfalab/core-components-select/mobile';\nimport type { BaseSelectChangePayload } from '@alfalab/core-components-select/shared';\n\nimport { AutocompleteMobileField } from './autocomplete-mobile-field';\n\nimport styles from './mobile.module.css';\n\nexport type InputAutocompleteModalMobileProps = Omit<\n    SelectModalMobileProps,\n    'OptionsList' | 'Checkmark' | 'onScroll' | 'nativeSelect' | 'autocomplete' | 'valueRenderer'\n> & {\n    /**\n     * Обработчик выбора\n     */\n    onChange: (payload: string | BaseSelectChangePayload) => void;\n\n    /**\n     * Обработчик ввода фильтра.\n     */\n    onFilter: (event: ChangeEvent<HTMLInputElement>) => void;\n\n    /**\n     * Значение поля ввода\n     */\n    value?: string;\n\n    /**\n     * Значение фильтра.\n     */\n    filter?: string;\n\n    /**\n     * Обработчик нажатия на кнопку \"Отмена\".\n     */\n    onCancel?: () => void;\n\n    /**\n     * Обработчик нажатия на крестик в инпуте фильтра.\n     */\n    onClearFilter?: () => void;\n\n    /**\n     * Дополнительные пропсы на слот под заголовком\n     */\n    bottomAddonProps?: Record<string, unknown>;\n\n    /**\n     * Дополнительные пропсы на кнопку \"продолжить\"\n     */\n    continueButtonProps?: ButtonMobileProps;\n\n    /**\n     * Дополнительные пропсы на кнопку \"отмена\"\n     */\n    cancelButtonProps?: ButtonMobileProps;\n\n    /**\n     * Кастомный инпут\n     */\n    Input?: ElementType;\n};\n\nexport const InputAutocompleteModalMobile = React.forwardRef<\n    HTMLDivElement,\n    InputAutocompleteModalMobileProps\n>(\n    (\n        {\n            open: openProp,\n            onOpen,\n            name,\n            size = 's',\n            Input = CoreInput,\n            Arrow = null,\n            onClearFilter,\n            filter = '',\n            onFilter,\n            placeholder,\n            bottomAddonProps,\n            multiple,\n            onChange,\n            onCancel,\n            value,\n            cancelButtonProps,\n            continueButtonProps,\n            modalProps,\n            modalHeaderProps,\n            modalFooterProps,\n            ...restProps\n        }: InputAutocompleteModalMobileProps,\n        ref,\n    ) => {\n        const [open, setOpen] = React.useState(false);\n        const targetRef = useRef<HTMLDivElement>(null);\n        const modalScrollableRef = useRef<HTMLDivElement>(null);\n        const bottomAddonRef = useRef<HTMLInputElement>(null);\n\n        useEffect(() => {\n            const modalContentNode = modalScrollableRef.current;\n\n            const handleListTouchMove = throttle(() => {\n                const input = bottomAddonRef.current;\n\n                if (input && document.activeElement === input) {\n                    input.blur();\n                }\n            }, 300);\n\n            modalContentNode?.addEventListener('touchmove', handleListTouchMove);\n\n            return () => modalContentNode?.removeEventListener('touchmove', handleListTouchMove);\n        }, [open]);\n\n        const setOpenModalSelect = (isOpen: boolean) => {\n            if (openProp === undefined) {\n                setOpen(isOpen);\n            }\n\n            onOpen?.({ open: isOpen, name });\n        };\n\n        const handleOpen: SelectMobileProps['onOpen'] = (payload) => {\n            setOpenModalSelect(Boolean(payload.open));\n        };\n\n        const handleApply = () => {\n            setOpenModalSelect(false);\n            onChange(filter);\n        };\n\n        const handleCancel = () => {\n            setOpenModalSelect(false);\n            onCancel?.();\n        };\n\n        const handleChange: SelectMobileProps['onChange'] = (payload) => {\n            onChange(payload);\n\n            if (multiple) {\n                // После выбора опции возвращаем фокус в поле ввода.\n                bottomAddonRef.current?.focus();\n            }\n        };\n\n        const renderBottomAddon = () => (\n            <Input\n                block={true}\n                clear={!!onClearFilter}\n                onClear={onClearFilter}\n                value={filter}\n                onInput={onFilter}\n                placeholder={placeholder}\n                {...bottomAddonProps}\n                className={cn(styles.bottomAddonInput, bottomAddonProps?.className as string)}\n                ref={mergeRefs([\n                    bottomAddonRef,\n                    bottomAddonProps?.ref as RefObject<HTMLInputElement>,\n                ])}\n            />\n        );\n\n        const renderFooter = () => (\n            <React.Fragment>\n                <ButtonMobile\n                    block={true}\n                    view='secondary'\n                    size='m'\n                    onClick={handleCancel}\n                    {...cancelButtonProps}\n                >\n                    Отмена\n                </ButtonMobile>\n                <ButtonMobile\n                    block={true}\n                    view='primary'\n                    size='m'\n                    onClick={handleApply}\n                    {...continueButtonProps}\n                >\n                    Продолжить\n                </ButtonMobile>\n            </React.Fragment>\n        );\n\n        return (\n            <SelectModalMobile\n                ref={mergeRefs([ref, targetRef])}\n                name={name}\n                Field={AutocompleteMobileField}\n                Arrow={Arrow}\n                onOpen={handleOpen}\n                onChange={handleChange}\n                multiple={multiple}\n                open={openProp ?? open}\n                size={size}\n                fieldProps={{ value }}\n                placeholder={placeholder}\n                useWithApplyHook={false}\n                modalProps={{\n                    ...modalProps,\n                    componentRef: modalScrollableRef,\n                }}\n                modalHeaderProps={{\n                    ...modalHeaderProps,\n                    bottomAddons: renderBottomAddon(),\n                }}\n                modalFooterProps={{\n                    sticky: true,\n                    ...modalFooterProps,\n                    children: renderFooter(),\n                }}\n                {...restProps}\n            />\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"bottomAddonInput\":\"bottomAddonInput_nFDlu\",\"footer\":\"footer_WM8GQ\"};"],"names":["AutocompleteField","_ref","label","_ref$labelView","labelView","placeholder","size","Arrow","_ref$Input","Input","DefaultInput","value","error","success","hint","disabled","readOnly","onInput","_ref$inputProps","inputProps","innerProps","inputRef","useRef","onClick","onFocus","inputDisabled","handleClick","useCallback","event","current","focus","_jsx","_objectSpread","wrapperRef","mergeRefs","ref","block","onChange","undefined","autoComplete","rightAddons","_jsxs","React","children","className","cn","styles","_defineProperty","InputAutocompleteDesktop","forwardRef","_ref$OptionsList","OptionsList","DefaultOptionsList","_ref$Optgroup","Optgroup","DefaultOptgroup","_ref$Option","Option","DefaultOption","_ref$closeOnSelect","closeOnSelect","options","restProps","_objectWithoutProperties","_excluded","BaseSelect","autocomplete","Field","fieldProps","SELECTED","InputAutocompleteMobile","_ref$bottomSheetProps","bottomSheetProps","_ref$bottomSheetHeade","bottomSheetHeaderAddonsProps","_ref$value","_ref$filter","filter","name","_ref$Arrow","_ref$size","openProp","open","onFilter","onOpen","onCancel","onClearFilter","continueButtonProps","cancelButtonProps","selected","multiple","_useState","useState","_useState2","_slicedToArray","setOpen","bottomSheetInputRef","targetRef","setBottomSheetVisibility","isOpen","handleOptionsListTouchMove","useMemo","throttle","input","document","activeElement","blur","handleApply","handleCancel","handleInputFocus","relatedTarget","SelectMobile","Boolean","handleOpen","payload","handleChange","_bottomSheetInputRef$","AutocompleteMobileField","useWithApplyHook","getBottomSheetProps","Component","CoreInput","actionButton","ButtonMobile","view","title","bottomAddons","clear","onClear","initialHeight","containerProps","onTouchMove","optionsListProps","showFooter","_cn","dataTestId","fieldClassName","valueRenderer","toggleMenu","setSelectedItems","selectedMultiple","focused","setFocused","_useFocus","useFocus","focusVisible","filled","showLabel","onBlur","FormControlMobile","InputAutocompleteResponsive","_ref$breakpoint","breakpoint","_useMedia","useMedia","concat","InputAutocompleteModalMobile","bottomAddonProps","modalProps","modalHeaderProps","modalFooterProps","_React$useState","_React$useState2","modalScrollableRef","bottomAddonRef","useEffect","modalContentNode","handleListTouchMove","addEventListener","removeEventListener","setOpenModalSelect","SelectModalMobile","_bottomAddonRef$curre","componentRef","renderBottomAddon","sticky","renderFooter"],"sourceRoot":""}