{"version":3,"file":"7549.37c1f4db.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./packages/confirmation/src/component.desktop.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/mobile.module.css?3b7c","webpack://@alfalab/core-components/./packages/confirmation/src/component.mobile.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/component.responsive.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/context.ts","webpack://@alfalab/core-components/./packages/confirmation/src/types.ts","webpack://@alfalab/core-components/./packages/confirmation/src/components/header/index.module.css?0aac","webpack://@alfalab/core-components/./packages/confirmation/src/components/header/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/initial/index.module.css?7715","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/initial/countdown-section.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/initial/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/hint/index.module.css?1701","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/hint/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/fatal-error/index.module.css?97be","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/fatal-error/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/countdown-loader/index.module.css?8539","webpack://@alfalab/core-components/./packages/confirmation/src/components/countdown-loader/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/temp-block/index.module.css?4948","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/temp-block/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/base-confirmation/index.module.css?0888","webpack://@alfalab/core-components/./packages/confirmation/src/components/base-confirmation/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/utils.ts"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { BaseConfirmation } from './components/base-confirmation';\nimport { ConfirmationProps } from './types';\n\nexport type DesktopConfirmationProps = Omit<ConfirmationProps, 'mobile' | 'breakpoint'>;\n\nexport const ConfirmationDesktop: FC<DesktopConfirmationProps> = (props) => (\n    <BaseConfirmation {...props} />\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container_P2oHI\"};","import React, { FC } from 'react';\nimport cn from 'classnames';\n\nimport { BaseConfirmation } from './components/base-confirmation';\nimport { ConfirmationProps } from './types';\n\nimport styles from './mobile.module.css';\n\nexport type MobileConfirmationProps = Omit<ConfirmationProps, 'mobile'>;\n\nexport const ConfirmationMobile: FC<MobileConfirmationProps> = ({ className, ...resProps }) => (\n    <BaseConfirmation mobile={true} className={cn(className, styles.container)} {...resProps} />\n);\n","import React, { FC } from 'react';\n\nimport { useMatchMedia } from '@alfalab/core-components-mq';\n\nimport { ConfirmationDesktop } from './component.desktop';\nimport { ConfirmationMobile } from './component.mobile';\nimport { ConfirmationProps } from './types';\n\nexport type ResponsiveConfirmationProps = Omit<\n    ConfirmationProps,\n    'confirmationScreens' | 'breakpoint'\n> & {\n    /**\n     * Контрольная точка, с нее начинается desktop версия\n     * @default 1024\n     */\n    breakpoint?: number;\n};\n\nexport const ConfirmationResponsive: FC<ResponsiveConfirmationProps> = ({\n    breakpoint = 1024,\n    ...restProps\n}) => {\n    const [isDesktop] = useMatchMedia(`(min-width: ${breakpoint}px)`, true);\n\n    return isDesktop ? (\n        <ConfirmationDesktop {...restProps} />\n    ) : (\n        <ConfirmationMobile breakpoint={breakpoint} {...restProps} />\n    );\n};\n","import { createContext } from 'react';\n\nimport { TConfirmationContext } from './types';\nimport { ONE_DAY, ONE_MINUTE } from './utils';\n\nconst mockFn = () => undefined;\n\nexport const ConfirmationContext = createContext<TConfirmationContext>({\n    alignContent: 'left',\n    texts: {},\n    state: 'INITIAL',\n    screen: 'INITIAL',\n    requiredCharAmount: 5,\n    countdownDuration: ONE_MINUTE,\n    timeLeft: ONE_MINUTE,\n    tempBlockDuration: ONE_DAY,\n    phone: '',\n    hideCountdownSection: false,\n    breakpoint: 1024,\n    onTempBlockFinished: mockFn,\n    onInputFinished: mockFn,\n    onChangeState: mockFn,\n    onSmsRetryClick: mockFn,\n    onChangeScreen: mockFn,\n    onFatalErrorOkButtonClick: mockFn,\n});\n","import { ComponentType, ReactNode } from 'react';\n\nexport type ConfirmationProps = {\n    /**\n     * Экран компонента\n     */\n    screen: ConfirmationScreen | string;\n\n    /**\n     * Состояние компонента\n     */\n    state: ConfirmationState | string;\n\n    /**\n     * Мобильная версия компонента для экрана\n     */\n    mobile?: boolean;\n\n    /**\n     * Позиционирование контента\n     */\n    alignContent?: 'left' | 'center';\n\n    /**\n     * Объект с текстами\n     */\n    texts?: ConfirmationTexts;\n\n    /**\n     * Количество символов, которое можно ввести в поле ввода подписания до того, как произойдет автоотправка\n     */\n    requiredCharAmount?: number;\n\n    /**\n     * Длительность обратного отсчета на кнопке повторного запроса сообщения, в милисекундах\n     */\n    countdownDuration?: number;\n\n    /**\n     * Продолжительность блокировки формы (ms)\n     */\n    tempBlockDuration?: number;\n\n    /**\n     * Номер телефона, на который отправлен код\n     */\n    phone?: string;\n\n    /**\n     * Не осталось попыток ввода кода\n     */\n    blockSmsRetry?: boolean;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    dataTestId?: string;\n\n    /**\n     * Сss класс для стилизации общей обёртки\n     */\n    className?: string;\n\n    /**\n     * Флаг - нужно ли очищать код при возникновении ошибки\n     */\n    clearCodeOnError?: boolean;\n\n    /**\n     * Функция обновления состояния компонента\n     */\n    onChangeState: (state: ConfirmationState | string) => void;\n\n    /**\n     * Функция обновления состояния компонента\n     */\n    onChangeScreen: (state: ConfirmationScreen | string) => void;\n\n    /**\n     * Обработчик события завершения ввода кода подписания\n     */\n    onInputFinished: (code: string) => void;\n\n    /**\n     * Обработчик события нажатия на кнопку \"Запросить код\"\n     */\n    onSmsRetryClick: () => void;\n\n    /**\n     * Клик по кнопке \"Понятно\" на экране фатальной ошибки\n     */\n    onFatalErrorOkButtonClick?: () => void;\n\n    /**\n     * Временная блокировка формы закончилась\n     */\n    onTempBlockFinished?: () => void;\n\n    /**\n     * Возввращает объект, где ключ - название экрана (screen), значение - компонент для экрана\n     */\n    getScreensMap?: (defaulScreensMap: ScreensMap) => ScreensMap;\n\n    /**\n     * Дочерние элементы.\n     */\n    children?: ReactNode;\n\n    /**\n     * Скрыть секцию с повторной отправкой кода\n     * @default false\n     */\n    hideCountdownSection?: boolean;\n\n    /**\n     * Контрольная точка для кнопки, с нее начинается desktop версия\n     * @default 1024\n     */\n    breakpoint?: number;\n};\n\nexport type TConfirmationContext = Required<\n    Pick<\n        ConfirmationProps,\n        | 'alignContent'\n        | 'texts'\n        | 'state'\n        | 'screen'\n        | 'requiredCharAmount'\n        | 'onInputFinished'\n        | 'countdownDuration'\n        | 'onChangeState'\n        | 'onSmsRetryClick'\n        | 'onChangeScreen'\n        | 'onFatalErrorOkButtonClick'\n        | 'tempBlockDuration'\n        | 'hideCountdownSection'\n    >\n> &\n    Pick<\n        ConfirmationProps,\n        'phone' | 'blockSmsRetry' | 'onTempBlockFinished' | 'clearCodeOnError'\n    > & {\n        timeLeft: number;\n    } & {\n        /**\n         * Контрольная точка для кнопки, с нее начинается desktop версия\n         * @default 1024\n         */\n        breakpoint?: number;\n    };\n\nexport type ConfirmationTexts = {\n    /**\n     * Экран INITIAL\n     */\n    title?: ReactNode; // заголовок\n    codeError?: string; // ошибка проверки кода\n    codeChecking?: string; // код проверяется\n    codeSending?: string; // код отправляется\n    codeSended?: string; // код отправлен\n    buttonRetry?: string; // кнопка повторной отправки кода\n    linkToHint?: string; // ссылка на экран HINT\n    noAttemptsLeft?: string; // не осталось попыток запроса кода\n    countdown?: string; // 'запросить повторно можно через'\n\n    /**\n     * Экран HINT\n     */\n    hintButton?: string; // кнопка 'Вернуться'\n\n    /**\n     * Экран FATAL_ERROR\n     */\n    fatalErrorTitle?: ReactNode; // заголовок\n    fatalErrorDescription?: ReactNode; // описание\n    fatalErrorButton?: string; // кнопка\n\n    /**\n     * Экран TEMP_BLOCK\n     */\n    tempBlockTitle?: ReactNode; // заголовок\n    tempBlockDescription?: ReactNode; // описание\n};\n\nexport type ConfirmationScreen =\n    | 'INITIAL' // начальный экран\n    | 'HINT' // экран \"Не приходит смс?\"\n    | 'FATAL_ERROR' // экран критической ошибки\n    | 'TEMP_BLOCK'; // экран временной блокировки\n\nexport type ConfirmationState =\n    | 'INITIAL' // начальное состояние\n    | 'CODE_CHECKING' // проверка кода\n    | 'CODE_SENDING' // повторная отправка кода\n    | 'CODE_ERROR'; // ошибка, когда ввели неверный код\n\nexport type ScreensMap = {\n    [key: string]: ComponentType;\n};\n\nexport const defaultTexts = {\n    title: 'Введите код из\\xa0сообщения',\n    codeError: 'Код введён неверно',\n    codeChecking: '',\n    codeSending: '',\n    buttonRetry: 'Запросить код повторно',\n    linkToHint: 'Не\\xa0приходит сообщение?',\n    hintButton: 'Вернуться к\\xa0вводу кода',\n    noAttemptsLeft: 'Не\\xa0осталось попыток запроса кода',\n    fatalErrorTitle: 'Ввести код больше нельзя',\n    fatalErrorDescription:\n        'Вы\\xa0ввели код неверно более 5\\xa0раз. В\\xa0целях безопасности мы\\xa0ограничили дальнейший ввод.',\n    fatalErrorButton: 'Понятно',\n    tempBlockTitle: 'Превышено количество попыток запроса кода',\n    tempBlockDescription: 'Повторное подтверждение кодом будет возможно через 24\\xa0часа',\n    codeSended: 'Код выслан',\n    countdown: 'Запросить повторно можно через',\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"header_ZN_0G\",\"typography\":\"typography_oKWak\",\"typographyMobile\":\"typographyMobile_FD5ys\"};","import React, { FC, ReactNode } from 'react';\nimport cn from 'classnames';\n\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport styles from './index.module.css';\n\nexport type HeaderProps = {\n    /**\n     * Контент шапки\n     */\n    children?: ReactNode;\n\n    /**\n     * Отображать в мобильной версии экран компонента\n     */\n    mobile?: boolean;\n};\n\nexport const Header: FC<HeaderProps> = ({ mobile, children }) => (\n    <Typography.Title\n        className={cn(styles.header, styles.typography, { [styles.typographyMobile]: mobile })}\n        tag='h3'\n        color='primary'\n    >\n        {children}\n    </Typography.Title>\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_qSN5B\",\"typographyTheme\":\"typographyTheme_Pi_14\",\"phone\":\"phone_Z3ZUm\",\"compact\":\"compact_LIbRg\",\"loaderWrap\":\"loaderWrap_FwhcX\",\"left\":\"left_kmaqz\",\"center\":\"center_CU0cp\",\"codeInput\":\"codeInput_HZGBZ\",\"smsComeLink\":\"smsComeLink_fCGMw\",\"countdownContainer\":\"countdownContainer_KRt7L\",\"countdownMobile\":\"countdownMobile_k2JLm\",\"countdownLoaderMobile\":\"countdownLoaderMobile_Cmsnv\",\"getCodeButton\":\"getCodeButton_h8KEH\",\"getCodeButtonMobile\":\"getCodeButtonMobile_bdSnI\",\"containerInput\":\"containerInput_IUzHX\"};","import React, { FC, useContext } from 'react';\nimport cn from 'classnames';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { Loader } from '@alfalab/core-components-loader';\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport { ConfirmationContext } from '../../../context';\nimport { formatMsAsMinutes } from '../../../utils';\n\nimport styles from './index.module.css';\n\ntype CountdownSectionProps = {\n    codeSendHintVisible: boolean;\n    timePassed: boolean;\n    processing: boolean;\n    mobile?: boolean;\n    handleSmsRetryClick: () => void;\n};\n\nexport const CountdownSection: FC<CountdownSectionProps> = ({\n    codeSendHintVisible,\n    timePassed,\n    processing,\n    mobile,\n    handleSmsRetryClick,\n}) => {\n    const { state, texts, timeLeft, blockSmsRetry, breakpoint } = useContext(ConfirmationContext);\n\n    const renderText = (text?: string) => (\n        <Typography.Text\n            className={cn(styles.countdownContainer, {\n                [styles.countdownMobile]: mobile,\n                [styles.typographyTheme]: !mobile,\n            })}\n            view={mobile ? 'primary-small' : 'primary-medium'}\n            tag='div'\n        >\n            {text}\n        </Typography.Text>\n    );\n\n    if (codeSendHintVisible) return renderText(texts.codeSended);\n\n    if (processing) {\n        return (\n            <div\n                className={cn(styles.loaderWrap, styles.countdownContainer, {\n                    [styles.countdownLoaderMobile]: mobile,\n                    [styles.typographyTheme]: !mobile,\n                })}\n            >\n                <Loader />\n\n                <span className={styles.loaderText}>\n                    {state === 'CODE_CHECKING' ? texts.codeChecking : texts.codeSending}\n                </span>\n            </div>\n        );\n    }\n\n    if (blockSmsRetry) return renderText(texts.noAttemptsLeft);\n\n    if (timePassed) {\n        return (\n            <Button\n                size={mobile ? 'xs' : 'xxs'}\n                view='secondary'\n                onClick={handleSmsRetryClick}\n                className={cn(styles.getCodeButton, { [styles.getCodeButtonMobile]: mobile })}\n                breakpoint={breakpoint}\n            >\n                {texts.buttonRetry}\n            </Button>\n        );\n    }\n\n    return renderText(`${texts.countdown} ${formatMsAsMinutes(timeLeft)}`);\n};\n","import React, {\n    FC,\n    useCallback,\n    useContext,\n    useEffect,\n    useLayoutEffect,\n    useRef,\n    useState,\n} from 'react';\nimport cn from 'classnames';\n\nimport { ButtonMobile } from '@alfalab/core-components-button/mobile';\nimport { CodeInputDesktop } from '@alfalab/core-components-code-input/desktop';\nimport { CodeInputMobile } from '@alfalab/core-components-code-input/mobile';\nimport { BaseCodeInputProps, CustomInputRef } from '@alfalab/core-components-code-input/shared';\nimport { Link } from '@alfalab/core-components-link';\nimport { Typography } from '@alfalab/core-components-typography';\nimport { usePrevious } from '@alfalab/hooks';\n\nimport { ConfirmationContext } from '../../../context';\nimport { Header } from '../../header';\n\nimport { CountdownSection } from './countdown-section';\n\nimport styles from './index.module.css';\n\nexport type InitialProps = {\n    /**\n     * Отображать в мобильной версии экран компонента\n     */\n    mobile?: boolean;\n};\n\nconst CODE_SEND_HINT_VISIBLE_DURATION = 2000;\n\nexport const Initial: FC<InitialProps> = ({ mobile }) => {\n    const {\n        state,\n        alignContent,\n        texts,\n        requiredCharAmount,\n        timeLeft,\n        phone,\n        clearCodeOnError,\n        hideCountdownSection,\n        onChangeState,\n        onInputFinished,\n        onChangeScreen,\n        onSmsRetryClick,\n    } = useContext(ConfirmationContext);\n\n    const prevState = usePrevious(state);\n\n    const inputRef = useRef<CustomInputRef>(null);\n\n    const [codeSendHintVisible, setCodeSendHintVisible] = useState(false);\n\n    const timerId = useRef(0);\n\n    const handleInputComplete: BaseCodeInputProps['onComplete'] = (code) => {\n        onInputFinished(code);\n    };\n\n    const handleSmsHintLinkClick = () => {\n        onChangeScreen('HINT');\n    };\n\n    const handleInputChange = () => {\n        if (state === 'CODE_ERROR') {\n            onChangeState('INITIAL');\n        }\n    };\n\n    const handleSmsRetryClick = () => {\n        if (inputRef.current) {\n            inputRef.current.reset();\n        }\n\n        onSmsRetryClick();\n    };\n\n    const handleErrorAnimationEnd = () => {\n        if (clearCodeOnError && state !== 'INITIAL') {\n            onChangeState('INITIAL');\n        }\n    };\n\n    const clearTimer = useCallback(() => {\n        window.clearTimeout(timerId.current);\n    }, []);\n\n    useEffect(() => {\n        if (inputRef.current) {\n            inputRef.current.focus();\n        }\n\n        return () => {\n            clearTimer();\n        };\n    }, [clearTimer]);\n\n    useEffect(() => {\n        if (!inputRef.current) {\n            return;\n        }\n\n        if (state === 'CODE_ERROR' && prevState !== 'CODE_ERROR') {\n            inputRef.current.focus(requiredCharAmount - 1);\n        }\n\n        if (prevState === 'CODE_SENDING' && state !== 'CODE_SENDING') {\n            inputRef.current.focus();\n        }\n    }, [prevState, state, requiredCharAmount]);\n\n    useLayoutEffect(() => {\n        if (prevState === 'CODE_SENDING' && state !== 'CODE_SENDING') {\n            setCodeSendHintVisible(true);\n\n            clearTimer();\n\n            timerId.current = window.setTimeout(() => {\n                setCodeSendHintVisible(false);\n            }, CODE_SEND_HINT_VISIBLE_DURATION);\n        }\n    }, [prevState, state, clearTimer]);\n\n    const getCodeInputError = (): string | boolean => {\n        if (state === 'CODE_ERROR') {\n            return texts.codeError || true;\n        }\n\n        return false;\n    };\n\n    const processing = ['CODE_CHECKING', 'CODE_SENDING'].includes(state);\n\n    const timePassed = timeLeft === 0;\n\n    const ComponentCodeInput = mobile ? CodeInputMobile : CodeInputDesktop;\n\n    return (\n        <div className={cn(styles.component, styles[alignContent])}>\n            <Header mobile={mobile}>{texts.title}</Header>\n\n            <Typography.Text\n                view='primary-medium'\n                color='primary'\n                className={cn(styles.phone, { [styles.typographyTheme]: !mobile })}\n            >\n                Код отправлен на {phone}\n            </Typography.Text>\n            <ComponentCodeInput\n                disabled={processing}\n                error={getCodeInputError()}\n                ref={inputRef}\n                fields={requiredCharAmount}\n                className={cn(styles.containerInput, styles.codeInput)}\n                onComplete={handleInputComplete}\n                onChange={handleInputChange}\n                clearCodeOnError={clearCodeOnError}\n                onErrorAnimationEnd={handleErrorAnimationEnd}\n            />\n            {!hideCountdownSection && (\n                <CountdownSection\n                    processing={processing}\n                    timePassed={timePassed}\n                    codeSendHintVisible={codeSendHintVisible}\n                    handleSmsRetryClick={handleSmsRetryClick}\n                    mobile={mobile}\n                />\n            )}\n\n            {mobile ? (\n                <ButtonMobile onClick={handleSmsHintLinkClick} view='link' size='xs'>\n                    {texts.linkToHint}\n                </ButtonMobile>\n            ) : (\n                <Link\n                    onClick={handleSmsHintLinkClick}\n                    className={styles.smsComeLink}\n                    view={mobile ? 'primary' : 'secondary'}\n                    pseudo={true}\n                >\n                    {texts.linkToHint}\n                </Link>\n            )}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_INcuh\",\"center\":\"center_evuGf\",\"text\":\"text_zYz7a\",\"typographyTheme\":\"typographyTheme_yDE4v\",\"phonesWrap\":\"phonesWrap_mk1JS\",\"phoneWrap\":\"phoneWrap_HDch2\",\"phoneLink\":\"phoneLink_CT7Za\",\"hintButton\":\"hintButton_psc2L\",\"phoneContentMobile\":\"phoneContentMobile_S8rEw\"};","import React, { FC, useContext } from 'react';\nimport cn from 'classnames';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { Link } from '@alfalab/core-components-link';\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport { ConfirmationContext } from '../../../context';\nimport { Header } from '../../header';\n\nimport styles from './index.module.css';\n\nexport type HintProps = {\n    /**\n     * Отображать в мобильной версии экран компонента\n     */\n    mobile?: boolean;\n};\n\nexport const Hint: FC<HintProps> = ({ mobile }) => {\n    const { alignContent, texts, onChangeScreen, onChangeState, breakpoint } =\n        useContext(ConfirmationContext);\n\n    const handleReturnButtonClick = () => {\n        onChangeScreen('INITIAL');\n        onChangeState('INITIAL');\n    };\n\n    return (\n        <div className={cn(styles.component, styles[alignContent])}>\n            <Header mobile={mobile}>Не&nbsp;приходит сообщение?</Header>\n\n            <Typography.Text\n                view='primary-medium'\n                color='primary'\n                className={cn(styles.text, { [styles.typographyTheme]: !mobile })}\n            >\n                Если у&nbsp;вас изменился номер телефона, позвоните нам или обратитесь в&nbsp;любое\n                отделение банка.\n            </Typography.Text>\n\n            <div className={styles.phonesWrap}>\n                <div className={cn(styles.phoneWrap, { [styles.phoneContentMobile]: mobile })}>\n                    <Link href='tel:+78002000000' underline={false} className={styles.phoneLink}>\n                        8 800 200-00-00\n                    </Link>\n                    <Typography.Text\n                        view='primary-medium'\n                        color='primary'\n                        className={cn(styles.text, { [styles.typographyTheme]: !mobile })}\n                    >\n                        {mobile\n                            ? 'Для\\u00A0звонков по\\u00A0России'\n                            : ' \\u2014\\u00A0для звонков по\\u00A0России'}\n                    </Typography.Text>\n                </div>\n\n                <div className={cn(styles.phoneWrap, { [styles.phoneContentMobile]: mobile })}>\n                    <Link href='tel:+74957888878' underline={false} className={styles.phoneLink}>\n                        +7 495 78-888-78\n                    </Link>\n                    <Typography.Text\n                        view='primary-medium'\n                        color='primary'\n                        className={cn(styles.text, { [styles.typographyTheme]: !mobile })}\n                    >\n                        {mobile\n                            ? 'В\\u00A0Москве и\\u00A0за\\u00A0границей'\n                            : ' \\u2014\\u00A0в\\u00A0Москве и\\u00A0за\\u00A0границей'}\n                    </Typography.Text>\n                </div>\n            </div>\n\n            <Typography.Text\n                view='primary-medium'\n                color='primary'\n                className={cn(styles.text, { [styles.typographyTheme]: !mobile })}\n            >\n                Если номер не&nbsp;менялся, возможно, перегружен сервис отправки сообщений.\n                Попробуйте повторить действие через несколько минут.\n            </Typography.Text>\n\n            <Button\n                size={mobile ? 'xs' : 's'}\n                view='secondary'\n                onClick={handleReturnButtonClick}\n                className={styles.hintButton}\n                breakpoint={breakpoint}\n            >\n                {texts.hintButton}\n            </Button>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_Sm4Ct\",\"typographyTheme\":\"typographyTheme_l4E5K\",\"left\":\"left_dVeU0\",\"center\":\"center_TCkjT\",\"button\":\"button_ON7yD\"};","import React, { FC, useContext } from 'react';\nimport cn from 'classnames';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport { ConfirmationContext } from '../../../context';\nimport { Header } from '../../header';\n\nimport styles from './index.module.css';\n\nexport type FatalErrorProps = {\n    /**\n     * Отображать в мобильной версии экран компонента\n     */\n    mobile?: boolean;\n};\n\nexport const FatalError: FC<FatalErrorProps> = ({ mobile }) => {\n    const { alignContent, texts, onFatalErrorOkButtonClick, breakpoint } =\n        useContext(ConfirmationContext);\n\n    return (\n        <div className={cn(styles.component, styles[alignContent])}>\n            <Header mobile={mobile}>{texts.fatalErrorTitle}</Header>\n\n            <Typography.Text\n                view='primary-medium'\n                color='primary'\n                className={cn({ [styles.typographyTheme]: !mobile })}\n            >\n                {texts.fatalErrorDescription}\n            </Typography.Text>\n\n            <Button\n                size={mobile ? 'xs' : 's'}\n                view='secondary'\n                onClick={onFatalErrorOkButtonClick}\n                className={styles.button}\n                breakpoint={breakpoint}\n            >\n                {texts.fatalErrorButton}\n            </Button>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"circle\":\"circle_l0DaD\"};","import React, { FC } from 'react';\n\nimport styles from './index.module.css';\n\ntype Props = {\n    progress: number; // 0-1\n    className?: string;\n};\n\nconst SIZE = 16;\nconst STROKE_WIDTH = 2;\n\nconst CENTER = SIZE / 2;\nconst RADIUS = CENTER - STROKE_WIDTH / 2;\n/** Длина окружности */\nconst CIRCUMFERENCE = Math.PI * RADIUS * 2;\n\nexport const CountdownLoader: FC<Props> = ({ progress, className }) => {\n    const value = Math.min(progress, 1);\n\n    const strokeDasharray = CIRCUMFERENCE.toFixed(2);\n    const strokeDashoffset = (value * CIRCUMFERENCE).toFixed(2);\n\n    return (\n        <svg width={SIZE} height={SIZE} viewBox={`0 0 ${SIZE} ${SIZE}`} className={className}>\n            <circle\n                cx={CENTER}\n                cy={CENTER}\n                r={RADIUS}\n                strokeDasharray={strokeDasharray}\n                strokeDashoffset={strokeDashoffset}\n                transform={`rotate(-90 ${CENTER} ${CENTER})`}\n                className={styles.circle}\n            />\n        </svg>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_jY5Gy\",\"center\":\"center_tRUZH\",\"typographyTheme\":\"typographyTheme_YYdhe\",\"description\":\"description_AbXit\",\"countdownWrap\":\"countdownWrap_LwPfJ\",\"loader\":\"loader_dlyIX\"};","import React, { FC, useContext, useEffect } from 'react';\nimport cn from 'classnames';\n\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport { ConfirmationContext } from '../../../context';\nimport { formatMsAsMinutes, useCountdown } from '../../../utils';\nimport { CountdownLoader } from '../../countdown-loader';\nimport { Header } from '../../header';\n\nimport styles from './index.module.css';\n\nexport type TempBlockProps = {\n    /**\n     * Отображать в мобильной версии экран компонента\n     */\n    mobile?: boolean;\n};\n\nexport const TempBlock: FC<TempBlockProps> = ({ mobile }) => {\n    const { alignContent, texts, tempBlockDuration, onChangeScreen, onTempBlockFinished } =\n        useContext(ConfirmationContext);\n\n    const [timeLeft, startTimer] = useCountdown(tempBlockDuration);\n\n    useEffect(() => {\n        startTimer();\n    }, [startTimer]);\n\n    useEffect(() => {\n        if (timeLeft === 0 && onTempBlockFinished) {\n            onTempBlockFinished();\n        }\n    }, [timeLeft, onChangeScreen, onTempBlockFinished]);\n\n    return (\n        <div className={cn(styles.component, styles[alignContent])}>\n            <Header mobile={mobile}>{texts.tempBlockTitle}</Header>\n\n            <Typography.Text\n                view='primary-medium'\n                color='primary'\n                className={cn(styles.description, { [styles.typographyTheme]: !mobile })}\n            >\n                {texts.tempBlockDescription}\n            </Typography.Text>\n\n            <div className={cn(styles.countdownWrap, { [styles.typographyTheme]: !mobile })}>\n                <CountdownLoader\n                    progress={1 - timeLeft / tempBlockDuration}\n                    className={styles.loader}\n                />\n\n                {formatMsAsMinutes(timeLeft)}\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_GvAjb\"};","import React, { ComponentType, FC, useEffect } from 'react';\nimport cn from 'classnames';\n\nimport { usePrevious } from '@alfalab/hooks';\n\nimport { ConfirmationContext } from '../../context';\nimport { ConfirmationProps, defaultTexts, TConfirmationContext } from '../../types';\nimport { ONE_DAY, ONE_MINUTE, useCountdown } from '../../utils';\nimport { FatalError, Hint, Initial, TempBlock } from '../screens';\n\nimport styles from './index.module.css';\n\nconst confirmationScreens: { [key: string]: ComponentType<{ mobile?: boolean }> } = {\n    INITIAL: Initial,\n    HINT: Hint,\n    FATAL_ERROR: FatalError,\n    TEMP_BLOCK: TempBlock,\n};\n\nexport const BaseConfirmation: FC<ConfirmationProps> = ({\n    state,\n    screen,\n    alignContent = 'left',\n    children,\n    requiredCharAmount = 5,\n    countdownDuration = ONE_MINUTE,\n    tempBlockDuration = ONE_DAY,\n    phone,\n    blockSmsRetry,\n    dataTestId,\n    className,\n    getScreensMap,\n    onInputFinished,\n    onChangeState,\n    onSmsRetryClick,\n    onChangeScreen,\n    onFatalErrorOkButtonClick,\n    onTempBlockFinished,\n    mobile,\n    clearCodeOnError = true,\n    hideCountdownSection = false,\n    breakpoint = 1024,\n    ...restProps\n}) => {\n    const [timeLeft, startTimer, stopTimer] = useCountdown(countdownDuration);\n\n    const prevState = usePrevious(state);\n\n    useEffect(() => {\n        startTimer();\n    }, [startTimer]);\n\n    useEffect(() => {\n        /**\n         * Перезапускаем таймер после повторного запроса кода\n         */\n        if (state === 'INITIAL' && prevState === 'CODE_SENDING') {\n            startTimer();\n        }\n    }, [state, prevState, startTimer]);\n\n    useEffect(() => {\n        /**\n         * Останавливаем таймер, если новый экран/состояние не содержит таймер\n         */\n        if (!['INITIAL', 'HINT', 'TEMP_BLOCK'].includes(screen) || blockSmsRetry) {\n            stopTimer();\n        }\n    }, [state, screen, blockSmsRetry, stopTimer]);\n\n    const handleSmsRetry = () => {\n        onChangeState('CODE_SENDING');\n\n        onSmsRetryClick();\n    };\n\n    const handleInputFinished = (code: string) => {\n        onChangeState('CODE_CHECKING');\n\n        onInputFinished(code);\n    };\n\n    const handleFatalErrorOkButtonClick = () => {\n        if (onFatalErrorOkButtonClick) {\n            onFatalErrorOkButtonClick();\n        }\n    };\n\n    // eslint-disable-next-line react/jsx-no-constructed-context-values\n    const contextValue: TConfirmationContext = {\n        hideCountdownSection,\n        alignContent,\n        texts: { ...defaultTexts, ...restProps.texts },\n        state,\n        screen,\n        requiredCharAmount,\n        countdownDuration,\n        timeLeft,\n        tempBlockDuration,\n        phone,\n        blockSmsRetry,\n        breakpoint,\n        onTempBlockFinished,\n        onChangeState,\n        onChangeScreen,\n        clearCodeOnError,\n        onInputFinished: handleInputFinished,\n        onSmsRetryClick: handleSmsRetry,\n        onFatalErrorOkButtonClick: handleFatalErrorOkButtonClick,\n    };\n\n    const screensMap = getScreensMap ? getScreensMap(confirmationScreens) : confirmationScreens;\n\n    const CurrentScreen = screensMap[screen];\n\n    return (\n        <ConfirmationContext.Provider value={contextValue}>\n            <div className={cn(styles.component, className)} data-test-id={dataTestId}>\n                {CurrentScreen && <CurrentScreen mobile={mobile} />}\n            </div>\n        </ConfirmationContext.Provider>\n    );\n};\n","import { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { ConfirmationProps } from './types';\n\n/**\n * Форматирование миллисекунд в hh:mm:ss.\n *\n * @param {Number} ms миллисекунды\n * @returns {String} время в формате mm:ss\n */\nexport function formatMsAsMinutes(ms: number) {\n    const totalSeconds = Math.ceil(ms / 1000);\n    const totalMinutes = Math.floor(totalSeconds / 60);\n    const totalHours = Math.floor(totalMinutes / 60);\n\n    const seconds = totalSeconds % 60;\n    const paddedSeconds = `00${seconds}`.slice(-2);\n\n    if (totalHours > 0) {\n        const minutes = totalMinutes % 60;\n\n        const paddedMinutes = `00${minutes}`.slice(-2);\n        const paddedHours = `00${totalHours}`.slice(-2);\n\n        return `${paddedHours}:${paddedMinutes}:${paddedSeconds}`;\n    }\n\n    const paddedMinutes = `00${totalMinutes}`.slice(-2);\n\n    return `${paddedMinutes}:${paddedSeconds}`;\n}\n\ntype UseCountdown = (countdownDuration: number, tick?: number) => [number, () => void, () => void];\n\n/**\n * Возвращает время, которое осталось до истечения таймера в ms\n */\nexport const useCountdown: UseCountdown = (countdownDuration, tick = 1000) => {\n    const timerId = useRef(0);\n\n    const start = useRef(0);\n\n    const [timePassed, setTimePassed] = useState(0);\n\n    const stopTimer = useCallback(() => {\n        window.clearInterval(timerId.current);\n    }, []);\n\n    const updateProgress = useCallback(() => {\n        const passed = Date.now() - start.current;\n\n        if (passed >= countdownDuration) {\n            stopTimer();\n\n            setTimePassed(countdownDuration);\n        } else {\n            setTimePassed(passed);\n        }\n    }, [countdownDuration, stopTimer]);\n\n    const startTimer = useCallback(() => {\n        stopTimer();\n\n        start.current = Date.now();\n\n        updateProgress();\n\n        timerId.current = window.setInterval(updateProgress, tick);\n    }, [stopTimer, updateProgress, tick]);\n\n    const timeLeft = countdownDuration - timePassed;\n\n    useEffect(\n        () => () => {\n            stopTimer();\n        },\n        [stopTimer],\n    );\n\n    return [timeLeft, startTimer, stopTimer];\n};\n\nexport const ONE_DAY = 24 * 60 * 60 * 1000;\nexport const ONE_MINUTE = 60 * 1000;\n\ntype UseConfirmationParams = {\n    state?: ConfirmationProps['state'];\n    screen?: ConfirmationProps['screen'];\n    blockSmsRetry?: ConfirmationProps['blockSmsRetry'];\n};\n\nexport const useConfirmation = ({ state, screen, blockSmsRetry }: UseConfirmationParams = {}) => {\n    const [confirmationState, setConfirmationState] = useState(state ?? 'INITIAL');\n    const [confirmationScreen, setConfirmationScreen] = useState(screen ?? 'INITIAL');\n    const [confirmationBlockSmsRetry, setConfirmationBlockSmsRetry] = useState(\n        blockSmsRetry ?? false,\n    );\n\n    return {\n        confirmationState,\n        confirmationScreen,\n        confirmationBlockSmsRetry,\n        setConfirmationState,\n        setConfirmationScreen,\n        setConfirmationBlockSmsRetry,\n    };\n};\n"],"names":["ConfirmationDesktop","props","_jsx","BaseConfirmation","_objectSpread","ConfirmationMobile","_ref","className","resProps","_objectWithoutProperties","_excluded","mobile","cn","styles","ConfirmationResponsive","_ref$breakpoint","breakpoint","restProps","_useMatchMedia","useMatchMedia","concat","_slicedToArray","mockFn","ConfirmationContext","createContext","alignContent","texts","state","screen","requiredCharAmount","countdownDuration","ONE_MINUTE","timeLeft","tempBlockDuration","ONE_DAY","phone","hideCountdownSection","onTempBlockFinished","onInputFinished","onChangeState","onSmsRetryClick","onChangeScreen","onFatalErrorOkButtonClick","defaultTexts","title","codeError","codeChecking","codeSending","buttonRetry","linkToHint","hintButton","noAttemptsLeft","fatalErrorTitle","fatalErrorDescription","fatalErrorButton","tempBlockTitle","tempBlockDescription","codeSended","countdown","Header","children","Typography","_defineProperty","tag","color","CountdownSection","_cn2","codeSendHintVisible","timePassed","processing","handleSmsRetryClick","_useContext","useContext","blockSmsRetry","renderText","text","_cn","view","_jsxs","Loader","Button","size","onClick","formatMsAsMinutes","Initial","clearCodeOnError","prevState","usePrevious","inputRef","useRef","_useState","useState","_useState2","setCodeSendHintVisible","timerId","handleSmsHintLinkClick","clearTimer","useCallback","window","clearTimeout","current","useEffect","focus","useLayoutEffect","setTimeout","includes","ComponentCodeInput","CodeInputMobile","CodeInputDesktop","disabled","error","getCodeInputError","ref","fields","onComplete","handleInputComplete","code","onChange","handleInputChange","onErrorAnimationEnd","handleErrorAnimationEnd","reset","ButtonMobile","Link","pseudo","Hint","href","underline","handleReturnButtonClick","FatalError","CIRCUMFERENCE","CENTER","Math","PI","CountdownLoader","progress","value","min","strokeDasharray","toFixed","strokeDashoffset","width","height","viewBox","cx","SIZE","cy","r","transform","TempBlock","_useCountdown","useCountdown","_useCountdown2","startTimer","confirmationScreens","INITIAL","HINT","FATAL_ERROR","TEMP_BLOCK","_ref$alignContent","_ref$requiredCharAmou","_ref$countdownDuratio","_ref$tempBlockDuratio","dataTestId","getScreensMap","_ref$clearCodeOnError","_ref$hideCountdownSec","stopTimer","contextValue","handleInputFinished","handleSmsRetry","handleFatalErrorOkButtonClick","CurrentScreen","Provider","ms","totalSeconds","ceil","totalMinutes","floor","totalHours","paddedSeconds","slice","paddedMinutes","paddedHours","tick","arguments","length","undefined","start","setTimePassed","clearInterval","updateProgress","passed","Date","now","setInterval","useConfirmation","_useState3","_useState4","confirmationState","setConfirmationState","_useState5","_useState6","confirmationScreen","setConfirmationScreen","_useState7","_useState8","confirmationBlockSmsRetry","setConfirmationBlockSmsRetry"],"sourceRoot":""}