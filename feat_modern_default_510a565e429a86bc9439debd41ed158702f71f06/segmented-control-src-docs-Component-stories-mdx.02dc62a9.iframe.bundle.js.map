{"version":3,"file":"segmented-control-src-docs-Component-stories-mdx.02dc62a9.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./node_modules/@mdx-js/react/lib/index.js","webpack://@alfalab/core-components/./node_modules/@storybook/addon-docs/dist/chunk-PCJTTTQV.mjs","webpack://@alfalab/core-components/./packages/segmented-control/src/docs/description.mdx","webpack://@alfalab/core-components/./packages/segmented-control/src/index.module.css?a032","webpack://@alfalab/core-components/./packages/segmented-control/src/docs/development.mdx","webpack://@alfalab/core-components/./packages/segmented-control/src/docs/Component.stories.mdx","webpack://@alfalab/core-components/./.storybook/blocks/changelog/index.module.css?12de","webpack://@alfalab/core-components/./.storybook/blocks/changelog/changelog.tsx","webpack://@alfalab/core-components/./.storybook/blocks/css-vars/css-vars.module.css?134e","webpack://@alfalab/core-components/./.storybook/blocks/css-vars/css-vars.tsx","webpack://@alfalab/core-components/./.storybook/blocks/component-header/ComponentHeader.module.css?d671","webpack://@alfalab/core-components/./.storybook/blocks/component-header/ComponentHeader.tsx","webpack://@alfalab/core-components/./.storybook/blocks/tabs/index.module.css?a73b","webpack://@alfalab/core-components/./.storybook/blocks/tabs/component.tsx","webpack://@alfalab/core-components/./.storybook/components/icons/GithubIcon.jsx","webpack://@alfalab/core-components/./packages/segmented-control/src/context.ts","webpack://@alfalab/core-components/./packages/segmented-control/src/index.module.css?fbc4","webpack://@alfalab/core-components/./packages/segmented-control/src/Component.tsx","webpack://@alfalab/core-components/./packages/segmented-control/src/components/segment/index.module.css?e8c2","webpack://@alfalab/core-components/./packages/segmented-control/src/components/segment/Component.tsx"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","import React, { Component } from 'react';\nimport { renderElement, unmountElement } from '@storybook/react-dom-shim';\nimport { CodeOrSourceMdx, AnchorMdx, HeadersMdx, Docs } from '@storybook/blocks';\n\nvar defaultComponents={code:CodeOrSourceMdx,a:AnchorMdx,...HeadersMdx},ErrorBoundary=class extends Component{constructor(){super(...arguments);this.state={hasError:!1};}static getDerivedStateFromError(){return {hasError:!0}}componentDidCatch(err){let{showException}=this.props;showException(err);}render(){let{hasError}=this.state,{children}=this.props;return hasError?null:children}},DocsRenderer=class{constructor(){this.render=async(context,docsParameter,element)=>{let components={...defaultComponents,...docsParameter?.components};return new Promise((resolve,reject)=>{import('@mdx-js/react').then(({MDXProvider})=>renderElement(React.createElement(ErrorBoundary,{showException:reject,key:Math.random()},React.createElement(MDXProvider,{components},React.createElement(Docs,{context,docsParameter}))),element)).then(resolve);})},this.unmount=element=>{unmountElement(element);};}};\n\nexport { DocsRenderer, defaultComponents };\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@storybook/addon-docs/mdx-react-shim\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      id: \"размеры-и-стили\",\n      children: \"Размеры и стили\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Для контрола доступно два размера и два вида скруглений.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"render(() => {\\n    const [selectedId, setSelectedId] = React.useState({\\n        '1': 1,\\n        '2': 1,\\n        '3': 1,\\n        '4': 1,\\n    });\\n    const handleChange = (pos, id) => setSelectedId({ ...selectedId, [pos]: id });\\n    return (\\n        <div style={{ width: 360 }}>\\n        <Space fullWidth size={24}>\\n            <SegmentedControl size='xs' onChange={(id) => handleChange('1', id)} selectedId={selectedId[\\\"1\\\"]}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n            </SegmentedControl>\\n            <SegmentedControl onChange={(id) => handleChange('2', id)} selectedId={selectedId[\\\"2\\\"]}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n            </SegmentedControl>\\n            <SegmentedControl size='xs' shape='rounded' onChange={(id) => handleChange('3', id)} selectedId={selectedId[\\\"3\\\"]}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n            </SegmentedControl>\\n            <SegmentedControl shape='rounded' onChange={(id) => handleChange('4', id)} selectedId={selectedId[\\\"4\\\"]}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n            </SegmentedControl>\\n        </Space>\\n    </div>\\n    )\\n})\\n//MOBILE\\nrender(() => {\\n    const [selectedId, setSelectedId] = React.useState({\\n        '1': 1,\\n        '2': 1,\\n        '3': 1,\\n        '4': 1,\\n    });\\n    const handleChange = (pos, id) => setSelectedId({ ...selectedId, [pos]: id });\\n    return (\\n        <Space fullWidth size={24}>\\n            <SegmentedControl size='xs' onChange={(id) => handleChange('1', id)} selectedId={selectedId[\\\"1\\\"]}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n            </SegmentedControl>\\n            <SegmentedControl onChange={(id) => handleChange('2', id)} selectedId={selectedId[\\\"2\\\"]}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n            </SegmentedControl>\\n            <SegmentedControl size='xs' shape='rounded' onChange={(id) => handleChange('3', id)} selectedId={selectedId[\\\"3\\\"]}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n            </SegmentedControl>\\n            <SegmentedControl shape='rounded' onChange={(id) => handleChange('4', id)} selectedId={selectedId[\\\"4\\\"]}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n            </SegmentedControl>\\n        </Space>\\n    )\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"количество-сегментов\",\n      children: \"Количество сегментов\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Контрол может содержать от двух до пяти сегментов.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      live: true,\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"render(() => {\\n    const [selectedId, setSelectedId] = React.useState({\\n        '1': 1,\\n        '2': 1,\\n        '3': 1,\\n        '4': 1,\\n        '5': 1,\\n    });\\n    const handleChange = (pos, id) => setSelectedId({ ...selectedId, [pos]: id });\\n    return (\\n        <div style={{ width: 360 }}>\\n        <Space fullWidth size={24}>\\n            <SegmentedControl selectedId={selectedId[\\\"1\\\"]} onChange={(id) => handleChange('1', id)}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n            </SegmentedControl>\\n            <SegmentedControl selectedId={selectedId[\\\"2\\\"]} onChange={(id) => handleChange('2', id)}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n                <Segment id={3} title='Таб 3' />\\n            </SegmentedControl>\\n            <SegmentedControl selectedId={selectedId[\\\"3\\\"]} onChange={(id) => handleChange('3', id)}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n                <Segment id={3} title='Таб 3' />\\n                <Segment id={4} title='Таб 4' />\\n            </SegmentedControl>\\n            <SegmentedControl selectedId={selectedId[\\\"4\\\"]} onChange={(id) => handleChange('4', id)}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n                <Segment id={3} title='Таб 3' />\\n                <Segment id={4} title='Таб 4' />\\n                <Segment id={5} title='Таб 5' />\\n            </SegmentedControl>\\n        </Space>\\n    </div>\\n    )\\n})\\n//MOBILE\\nrender(() => {\\n    const [selectedId, setSelectedId] = React.useState({\\n        '1': 1,\\n        '2': 1,\\n        '3': 1,\\n        '4': 1,\\n        '5': 1,\\n    });\\n    const handleChange = (pos, id) => setSelectedId({ ...selectedId, [pos]: id });\\n    return (\\n        <Space fullWidth size={24}>\\n            <SegmentedControl selectedId={selectedId[\\\"1\\\"]} onChange={(id) => handleChange('1', id)}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n            </SegmentedControl>\\n            <SegmentedControl selectedId={selectedId[\\\"2\\\"]} onChange={(id) => handleChange('2', id)}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n                <Segment id={3} title='Таб 3' />\\n            </SegmentedControl>\\n            <SegmentedControl selectedId={selectedId[\\\"3\\\"]} onChange={(id) => handleChange('3', id)}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n                <Segment id={3} title='Таб 3' />\\n                <Segment id={4} title='Таб 4' />\\n            </SegmentedControl>\\n            <SegmentedControl selectedId={selectedId[\\\"4\\\"]} onChange={(id) => handleChange('4', id)}>\\n                <Segment id={1} title='Таб 1' />\\n                <Segment id={2} title='Таб 2' />\\n                <Segment id={3} title='Таб 3' />\\n                <Segment id={4} title='Таб 4' />\\n                <Segment id={5} title='Таб 5' />\\n            </SegmentedControl>\\n        </Space>\\n    )\\n})\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","export default \"@import '../../themes/src/default.css';\\n\\n.wrapper {\\n    background-color: var(--color-light-specialbg-secondary-transparent);\\n    display: flex;\\n}\\n\\n.container {\\n    position: relative;\\n    display: flex;\\n    flex: 1;\\n}\\n\\n.inner {\\n    display: flex;\\n    flex: 1;\\n    margin: 0 var(--gap-3xs);\\n}\\n\\n.segment {\\n    @mixin paragraph_primary_small;\\n\\n    &.selected {\\n        color: var(--color-static-text-primary-dark);\\n    }\\n}\\n\\n.selected {\\n    @mixin action_primary_small;\\n\\n    &:before,\\n    & + .segment:before {\\n        opacity: 0;\\n    }\\n}\\n\\n.xs {\\n    height: var(--size-xs-height);\\n\\n    & .rounded,\\n    &:has(.rounded) {\\n        border-radius: var(--border-radius-xxl);\\n    }\\n\\n    &:has(.rectangular) {\\n        border-radius: var(--border-radius-l);\\n\\n        & .selectedBox {\\n            border-radius: 10px;\\n        }\\n    }\\n}\\n\\n.xxs {\\n    height: var(--size-xxs-height);\\n}\\n\\n.rounded {\\n    border-radius: var(--border-radius-xl);\\n}\\n\\n.rectangular {\\n    border-radius: 10px;\\n\\n    & .selectedBox {\\n        border-radius: var(--border-radius-m);\\n    }\\n}\\n\\n.selectedBox {\\n    border: 0.5px solid var(--color-light-border-tertiary);\\n    box-sizing: border-box;\\n    position: absolute;\\n    top: var(--gap-3xs);\\n    bottom: var(--gap-3xs);\\n    left: var(--gap-3xs);\\n    box-shadow: var(--shadow-s);\\n    background-color: var(--color-static-bg-primary-light);\\n    transition: width 0.2s ease, transform 0.2s ease;\\n}\\n\";","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@storybook/addon-docs/mdx-react-shim\";\nimport {ArgsTable} from '@storybook/addon-docs';\nimport {CssVars} from 'storybook/blocks';\nimport {SegmentedControl as SegmentedControlTS, Segment as SegmentTS} from '..';\nimport vars from '!!raw-loader!../index.module.css';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      id: \"подключение\",\n      children: \"Подключение\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { SegmentedControl, Segmented } from '@alfalab/core-components/segmented-control';\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"tips--tricks\",\n      children: \"Tips & Tricks\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Свойство \", _jsx(_components.code, {\n            children: \"title\"\n          }), \" будет использовано для генерации заголовков, а \", _jsx(_components.code, {\n            children: \"id\"\n          }), \" для переключения табов.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"С помощью свойства \", _jsx(_components.code, {\n            children: \"disabled\"\n          }), \" таб можно заблокировать для выбора.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Контент сегмента (children) будут подставляться под компонент при выборе данного сегмента,\\nтак же можно задать кастомный className для каждого контента сегмента, пробросив contentClassName\\nопределенному сегменту.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"свойства\",\n      children: \"Свойства\"\n    }), \"\\n\", _jsx(ArgsTable, {\n      components: {\n        SegmentedControl: SegmentedControlTS,\n        Segment: SegmentTS\n      }\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"переменные\",\n      children: \"Переменные\"\n    }), \"\\n\", _jsx(CssVars, {\n      css: vars\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*Canvas*/\n/*Docs*/\nimport { useMDXComponents as _provideComponents } from \"@storybook/addon-docs/mdx-react-shim\";\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { select } from '@storybook/addon-knobs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport { SegmentedControl, Segment } from '@alfalab/core-components-segmented-control';\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport packageJson from '../../package.json';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction _createMdxContent(props) {\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Meta, {\n      title: \"Components/SegmentedControl\",\n      component: SegmentedControl,\n      id: \"SegmentedControl\"\n    }), \"\\n\", \"\\n\", /*#__PURE__*/_jsx(Story, {\n      name: \"SegmentedControl\",\n      children: React.createElement(() => {\n        const [selectedId, setSelectedId] = React.useState(1);\n        const handleChange = id => setSelectedId(id);\n        return /*#__PURE__*/_jsxs(SegmentedControl, {\n          size: select('size', ['xs', 'xxs'], 'xs'),\n          shape: select('shape', ['rounded', 'rectangular'], 'rectangular'),\n          onChange: handleChange,\n          selectedId: selectedId,\n          children: [/*#__PURE__*/_jsx(Segment, {\n            id: 1,\n            title: 'Сегмент 1',\n            children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 1\"\n          }), /*#__PURE__*/_jsx(Segment, {\n            id: 2,\n            title: 'Сегмент 2',\n            children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 2\"\n          }), /*#__PURE__*/_jsx(Segment, {\n            id: 3,\n            title: 'Сегмент 3',\n            children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 3\"\n          }), /*#__PURE__*/_jsx(Segment, {\n            id: 4,\n            title: 'Сегмент 4',\n            children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\"\n          }), /*#__PURE__*/_jsx(Segment, {\n            id: 5,\n            title: 'Сегмент 4',\n            children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\"\n          }), /*#__PURE__*/_jsx(Segment, {\n            id: 6,\n            title: 'Сегмент 4',\n            children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\"\n          }), /*#__PURE__*/_jsx(Segment, {\n            id: 7,\n            title: 'Сегмент 4',\n            children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\"\n          }), /*#__PURE__*/_jsx(Segment, {\n            id: 8,\n            title: 'Сегмент 4',\n            children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\"\n          })]\n        });\n      })\n    }), \"\\n\", \"\\n\", /*#__PURE__*/_jsx(ComponentHeader, {\n      name: \"SegmentedControl\",\n      version: packageJson.version,\n      package: \"@alfalab/core-components/segmented-control\",\n      design: \"https://www.figma.com/file/cdNnkh2QdxuvYLrBm4cubM/branch/HdEcrs2QMpvWPPHgfUIq2q/Web-%3A%3A-Core-Default-Components?node-id=75987%3A83551&t=eZpYvbDpqVyYyLV9-0\",\n      children: \"\\u0418\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u0435\\u0442\\u0441\\u044F \\u0434\\u043B\\u044F \\u043F\\u0435\\u0440\\u0435\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u044F \\u0438\\u043B\\u0438 \\u0444\\u0438\\u043B\\u044C\\u0442\\u0440\\u0430\\u0446\\u0438\\u0438 \\u043A\\u043E\\u043D\\u0442\\u0435\\u043D\\u0442\\u0430.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(Tabs, {\n      description: /*#__PURE__*/_jsx(Description, {}),\n      development: /*#__PURE__*/_jsx(Development, {})\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, {\n    ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n/* ========= */\nexport const segmentedControl = () => React.createElement(() => {\n  const [selectedId, setSelectedId] = React.useState(1);\n  const handleChange = id => setSelectedId(id);\n  return /*#__PURE__*/_jsxs(SegmentedControl, {\n    size: select(\"size\", [\"xs\", \"xxs\"], \"xs\"),\n    shape: select(\"shape\", [\"rounded\", \"rectangular\"], \"rectangular\"),\n    onChange: handleChange,\n    selectedId: selectedId,\n    children: [/*#__PURE__*/_jsx(Segment, {\n      id: 1,\n      title: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 1\",\n      children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 1\"\n    }), /*#__PURE__*/_jsx(Segment, {\n      id: 2,\n      title: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 2\",\n      children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 2\"\n    }), /*#__PURE__*/_jsx(Segment, {\n      id: 3,\n      title: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 3\",\n      children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 3\"\n    }), /*#__PURE__*/_jsx(Segment, {\n      id: 4,\n      title: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\",\n      children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\"\n    }), /*#__PURE__*/_jsx(Segment, {\n      id: 5,\n      title: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\",\n      children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\"\n    }), /*#__PURE__*/_jsx(Segment, {\n      id: 6,\n      title: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\",\n      children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\"\n    }), /*#__PURE__*/_jsx(Segment, {\n      id: 7,\n      title: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\",\n      children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\"\n    }), /*#__PURE__*/_jsx(Segment, {\n      id: 8,\n      title: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\",\n      children: \"\\u0421\\u0435\\u0433\\u043C\\u0435\\u043D\\u0442 4\"\n    })]\n  });\n});\nsegmentedControl.storyName = 'SegmentedControl';\nsegmentedControl.parameters = {\n  storySource: {\n    source: 'React.createElement(() => {\\n  const [selectedId, setSelectedId] = React.useState(1);\\n  const handleChange = id => setSelectedId(id);\\n  return <SegmentedControl size={select(\\\"size\\\", [\\\"xs\\\", \\\"xxs\\\"], \\\"xs\\\")} shape={select(\\\"shape\\\", [\\\"rounded\\\", \\\"rectangular\\\"], \\\"rectangular\\\")} onChange={handleChange} selectedId={selectedId}>\\n                <Segment id={1} title={\\\"\\\\u0421\\\\u0435\\\\u0433\\\\u043C\\\\u0435\\\\u043D\\\\u0442 1\\\"}>\\n                    Сегмент 1\\n                </Segment>\\n                <Segment id={2} title={\\\"\\\\u0421\\\\u0435\\\\u0433\\\\u043C\\\\u0435\\\\u043D\\\\u0442 2\\\"}>\\n                    Сегмент 2\\n                </Segment>\\n                <Segment id={3} title={\\\"\\\\u0421\\\\u0435\\\\u0433\\\\u043C\\\\u0435\\\\u043D\\\\u0442 3\\\"}>\\n                    Сегмент 3\\n                </Segment>\\n                <Segment id={4} title={\\\"\\\\u0421\\\\u0435\\\\u0433\\\\u043C\\\\u0435\\\\u043D\\\\u0442 4\\\"}>\\n                    Сегмент 4\\n                </Segment>\\n                <Segment id={5} title={\\\"\\\\u0421\\\\u0435\\\\u0433\\\\u043C\\\\u0435\\\\u043D\\\\u0442 4\\\"}>\\n                    Сегмент 4\\n                </Segment>\\n                <Segment id={6} title={\\\"\\\\u0421\\\\u0435\\\\u0433\\\\u043C\\\\u0435\\\\u043D\\\\u0442 4\\\"}>\\n                    Сегмент 4\\n                </Segment>\\n                <Segment id={7} title={\\\"\\\\u0421\\\\u0435\\\\u0433\\\\u043C\\\\u0435\\\\u043D\\\\u0442 4\\\"}>\\n                    Сегмент 4\\n                </Segment>\\n                <Segment id={8} title={\\\"\\\\u0421\\\\u0435\\\\u0433\\\\u043C\\\\u0435\\\\u043D\\\\u0442 4\\\"}>\\n                    Сегмент 4\\n                </Segment>\\n            </SegmentedControl>;\\n})'\n  }\n};\nconst componentMeta = {\n  title: 'Components/SegmentedControl',\n  id: 'SegmentedControl',\n  component: SegmentedControl,\n  tags: ['stories-mdx'],\n  includeStories: [\"segmentedControl\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;","// extracted by mini-css-extract-plugin\nexport default {\"changelog\":\"changelog_UmYwo\",\"root\":\"root_GgHKe\"};","import React, { FC, ReactNode } from 'react';\nimport cn from 'classnames';\n\nimport styles from './index.module.css';\n\ntype Props = {\n    content: ReactNode;\n    root?: boolean;\n};\n\nexport const Changelog: FC<Props> = ({ content, root = false }) => {\n    return (\n        <div className={cn(styles.changelog, root && styles.root, 'sb-unstyled')}>{content}</div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"cssVars\":\"cssVars_OsBA8\"};","import React, { FC, useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Link } from '@alfalab/core-components-link';\nimport { Example } from 'storybook-addon-live-examples';\n\nimport styles from './css-vars.module.css';\n\ntype Props = {\n    css: string;\n    title?: string;\n    expandable?: boolean;\n    type?: 'vars' | 'mixins';\n};\n\nconst rootBlockRegexp = /:root {([^}]*)}/g;\nconst mixinRegexp = /(?:@define-mixin)(.*{[^}]*})/g;\n\nexport const CssVars: FC<Props> = ({ css, title, expandable, type = 'vars' }) => {\n    const [vars, setVars] = useState('');\n    const [open, setOpen] = useState(!expandable);\n    const isVars = type === 'vars';\n    const regexp = isVars ? rootBlockRegexp : mixinRegexp;\n\n    useEffect(() => {\n        let rootBlockMatch = regexp.exec(css);\n\n        const rootBlocks = [];\n\n        while (rootBlockMatch) {\n            rootBlocks.push(rootBlockMatch[1]);\n            rootBlockMatch = regexp.exec(css);\n        }\n\n        let result = rootBlocks.reduce(\n            (acc, item, index) => {\n                const isLast = index === rootBlocks.length - 1;\n                const divider = isLast ? '' : '\\n';\n\n                return `${acc}${item}${divider}`;\n            },\n            isVars ? ':root {' : '',\n        );\n\n        if (isVars) {\n            result += '}';\n        }\n\n        setVars(result);\n    }, []);\n\n    return (\n        <div className={cn('sb-unstyled', styles.cssVars)}>\n            {title && <h2 className={cn('sbdocs', 'sbdocs-h2')}>{title}</h2>}\n            {vars && (\n                <>\n                    {expandable && (\n                        <Link view='default' onClick={() => setOpen(!open)} pseudo>\n                            {open ? 'Скрыть' : 'Показать'}\n                        </Link>\n                    )}\n                    {open && <Example language='css' code={vars} live={false} />}\n                </>\n            )}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_qx5zQ\",\"text\":\"text_TIocB\",\"textMobile\":\"textMobile_d_rnY\",\"info\":\"info_iGRHP\",\"commonLink\":\"commonLink_WJRCZ\",\"links\":\"links_kuMT8\",\"usageLink\":\"usageLink_ilI5I\",\"github\":\"github_ks4z8\",\"design\":\"design_NpKuj\"};","import React, { ReactNode } from 'react';\nimport cn from 'classnames';\nimport { Link } from '@alfalab/core-components-link';\nimport { Typography } from '@alfalab/core-components-typography';\nimport { Space } from '@alfalab/core-components-space';\nimport { pluralize } from '@alfalab/utils';\nimport { GithubIcon } from 'storybook/components/icons/GithubIcon';\n\nimport usages from 'storybook/usages.json';\n\nimport styles from './ComponentHeader.module.css';\nimport { useMatchMedia } from '@alfalab/core-components-mq';\n\ntype ComponentHeaderProps = {\n    name: string;\n    version?: string;\n    design?: string;\n    children?: ReactNode;\n};\n\nexport const ComponentHeader: React.FC<ComponentHeaderProps> = ({ name, design, children }) => {\n    const [isDesktop] = useMatchMedia('--tablet-m');\n\n    const packageName = name\n        .replace(/([a-z0-9])([A-Z])/g, '$1-$2')\n        .replace(/([A-Z])([A-Z])(?=[a-z])/g, '$1-$2')\n        .toLowerCase();\n\n    const githubLink = `https://github.com/core-ds/core-components/tree/master/packages/${packageName}`;\n\n    const Title = isDesktop ? Typography.Title : Typography.TitleMobile;\n\n    return (\n        <div className={cn('sb-unstyled', styles.component)}>\n            <Title tag='h1' view='xlarge'>\n                {name}\n            </Title>\n            {children && (\n                <Typography.Text\n                    tag='p'\n                    view='primary-medium'\n                    className={cn(styles.text, { [styles.textMobile]: !isDesktop })}\n                >\n                    {children}\n                </Typography.Text>\n            )}\n            <div className={styles.links}>\n                <a\n                    className={cn(styles.design, {\n                        [styles.commonLink]: !design,\n                    })}\n                    href={\n                        design ||\n                        'https://www.figma.com/file/cdNnkh2QdxuvYLrBm4cubM/Web-%3A%3A-Core-Default-Components'\n                    }\n                    target='_blank'\n                >\n                    Figma\n                </a>\n                <a className={styles.github} href={githubLink} target='_blank'>\n                    <GithubIcon fill='var(--color-light-graphic-primary)' />\n                    Github\n                </a>\n            </div>\n\n            <Space direction='horizontal' align='center' className={styles.info}>\n                {usages[name]?.projects > 0 && (\n                    <Typography.Text view='primary-small' color='secondary'>\n                        Используется в{' '}\n                        <Link\n                            href={`http://design/design-system-usage/usage-chart?component=${usages[name]?.search}`}\n                            target='_blank'\n                            view='secondary'\n                            underline={false}\n                            title='Необходимо подключение к VPN'\n                            className={styles.usageLink}\n                        >\n                            {usages[name]?.projects}{' '}\n                            {pluralize(usages[name]?.projects, 'проекте', 'проектах', 'проектах')}\n                        </Link>\n                        {' и '}~{usages[name]?.imports}{' '}\n                        {pluralize(usages[name]?.imports, 'файле', 'файлах', 'файлах')}\n                    </Typography.Text>\n                )}\n            </Space>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"tabs\":\"tabs_BRA6G\"};","import React, {\n    FC,\n    useState,\n    useMemo,\n    useCallback,\n    ReactNode,\n    isValidElement,\n    ReactElement,\n} from 'react';\nimport { TabsResponsive, Tab, TabsResponsiveProps } from '@alfalab/core-components-tabs';\nimport { Changelog } from '../changelog';\nimport styles from './index.module.css';\n\nenum TabName {\n    DESCRIPTION = 'DESCRIPTION',\n    PROPS = 'PROPS',\n    CSS_VARS = 'CSS_VARS',\n    CHANGELOG = 'CHANGELOG',\n    DEVELOPMENT = 'DEVELOPMENT',\n}\n\nconst TabTitle = {\n    [TabName.DESCRIPTION]: 'Описание',\n    [TabName.PROPS]: 'Свойства',\n    [TabName.CSS_VARS]: 'CSS-переменные',\n    [TabName.CHANGELOG]: 'Обновления',\n    [TabName.DEVELOPMENT]: 'Разработчику',\n};\n\ntype Props = {\n    description: ReactNode;\n    props: ReactNode;\n    cssVars?: ReactNode;\n    changelog?: string;\n    defaultSelected?: TabName;\n    development?: ReactNode;\n};\n\nexport const Tabs: FC<Props> = ({\n    description,\n    props,\n    cssVars,\n    changelog,\n    defaultSelected = TabName.DESCRIPTION,\n    development,\n}) => {\n    const [selected, setSelected] = useState(defaultSelected);\n\n    const handleChange = useCallback<Required<TabsResponsiveProps>['onChange']>(\n        (_, { selectedId }) => {\n            setSelected(selectedId as TabName);\n        },\n        [],\n    );\n\n    const renderTabs = (): TabsResponsiveProps['children'] => {\n        return [\n            <Tab title={TabTitle[TabName.DESCRIPTION]} id={TabName.DESCRIPTION} key='description'>\n                {description}\n            </Tab>,\n            props ? (\n                <Tab title={TabTitle[TabName.PROPS]} id={TabName.PROPS} key='props'>\n                    {props}\n                </Tab>\n            ) : null,\n            cssVars ? (\n                <Tab title={TabTitle[TabName.CSS_VARS]} id={TabName.CSS_VARS} key='css-vars'>\n                    {cssVars}\n                </Tab>\n            ) : null,\n            development ? (\n                <Tab\n                    title={TabTitle[TabName.DEVELOPMENT]}\n                    id={TabName.DEVELOPMENT}\n                    key='development'\n                >\n                    {development}\n                </Tab>\n            ) : null,\n            changelog ? (\n                <Tab title={TabTitle[TabName.CHANGELOG]} id={TabName.CHANGELOG} key='changelog'>\n                    <div style={{ marginTop: '32px' }}>\n                        <Changelog content={changelog} />\n                    </div>\n                </Tab>\n            ) : null,\n        ].filter(isValidElement) as ReactElement[];\n    };\n\n    const tabs = useMemo(() => renderTabs(), [description, props, cssVars]);\n\n    return (\n        <TabsResponsive\n            className='sb-unstyled'\n            selectedId={selected}\n            onChange={handleChange}\n            containerClassName={styles.tabs}\n        >\n            {tabs}\n        </TabsResponsive>\n    );\n};\n","import React from 'react';\n\nexport const GithubIcon = ({ fill = '#24292E', width = 32, height = 32 }) => (\n    <svg xmlns='http://www.w3.org/2000/svg' width={width} height={height} viewBox='0 0 32 32'>\n        <path\n            fillRule='evenodd'\n            clipRule='evenodd'\n            d='M16 0C7.16 0 0 7.16 0 16C0 23.08 4.58 29.06 10.94 31.18C11.74 31.32 12.04 30.84 12.04 30.42C12.04 30.04 12.02 28.78 12.02 27.44C8 28.18 6.96 26.46 6.64 25.56C6.46 25.1 5.68 23.68 5 23.3C4.44 23 3.64 22.26 4.98 22.24C6.24 22.22 7.14 23.4 7.44 23.88C8.88 26.3 11.18 25.62 12.1 25.2C12.24 24.16 12.66 23.46 13.12 23.06C9.56 22.66 5.84 21.28 5.84 15.16C5.84 13.42 6.46 11.98 7.48 10.86C7.32 10.46 6.76 8.82 7.64 6.62C7.64 6.62 8.98 6.2 12.04 8.26C13.32 7.9 14.68 7.72 16.04 7.72C17.4 7.72 18.76 7.9 20.04 8.26C23.1 6.18 24.44 6.62 24.44 6.62C25.32 8.82 24.76 10.46 24.6 10.86C25.62 11.98 26.24 13.4 26.24 15.16C26.24 21.3 22.5 22.66 18.94 23.06C19.52 23.56 20.02 24.52 20.02 26.02C20.02 28.16 20 29.88 20 30.42C20 30.84 20.3 31.34 21.1 31.18C27.42 29.06 32 23.06 32 16C32 7.16 24.84 0 16 0V0Z'\n            fill={fill}\n        />\n    </svg>\n);\n","import { createContext } from 'react';\n\nimport { IDType } from './typing';\n\nexport type ContextType = {\n    onChange: (id: IDType) => void;\n};\n\nexport const SegmentedControlContext = createContext<ContextType>({\n    onChange: () => null,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"wrapper_N9EbJ\",\"container\":\"container_wgn0V\",\"inner\":\"inner_mLacL\",\"segment\":\"segment_oMKH7\",\"selected\":\"selected_FwXVX\",\"xs\":\"xs_Ht6PL\",\"rounded\":\"rounded_LPl0z\",\"rectangular\":\"rectangular__hTJl\",\"selectedBox\":\"selectedBox_nVEcu\",\"xxs\":\"xxs_orhZH\"};","import React, { FC, ReactElement, useCallback, useEffect, useRef } from 'react';\nimport { ResizeObserver as ResizeObserverPolyfill } from '@juggle/resize-observer';\nimport cn from 'classnames';\n\nimport { SegmentProps } from './components';\nimport { ContextType, SegmentedControlContext } from './context';\nimport { IDType } from './typing';\n\nimport styles from './index.module.css';\n\nexport type SegmentedControlProps = {\n    /**\n     * Дополнительный className\n     */\n    className?: string;\n\n    /**\n     * Обработчик смены выбранного сегмента\n     */\n    onChange: ContextType['onChange'];\n\n    /**\n     * ID выбранного сегмента\n     */\n    selectedId: IDType;\n\n    /**\n     * Размер компонента\n     */\n    size?: 'xs' | 'xxs';\n\n    /**\n     * Форма компонента\n     */\n    shape?: 'rounded' | 'rectangular';\n\n    /**\n     * Дочерние элементы\n     */\n    children: Array<ReactElement<SegmentProps>>;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    dataTestId?: string;\n};\n\nconst MAX_SEGMENTS = 5;\n\nexport const SegmentedControl: FC<SegmentedControlProps> = ({\n    className,\n    selectedId,\n    onChange,\n    shape = 'rectangular',\n    size = 'xxs',\n    children: defaultChildren,\n    dataTestId,\n}) => {\n    const wrapperRef = useRef<HTMLDivElement>(null);\n    const innerRef = useRef<HTMLDivElement>(null);\n    const selectedBoxRef = useRef<HTMLDivElement>(null);\n    const children = defaultChildren.slice(0, MAX_SEGMENTS);\n\n    const selectedSegmentPosition = children.findIndex((item) => item.props.id === selectedId);\n    const isPositionFounded = selectedSegmentPosition !== -1;\n    const content = isPositionFounded && children[selectedSegmentPosition].props.children;\n    const contentClassName =\n        isPositionFounded && children[selectedSegmentPosition].props.contentClassName;\n\n    const setSelectedBoxStyles = useCallback(() => {\n        if (innerRef.current && selectedBoxRef.current) {\n            const segments = Array.from(innerRef.current.children);\n            const { width: parentWidth } = innerRef.current.getBoundingClientRect();\n            const width = parentWidth / segments.length;\n            const offsetLeft = width * selectedSegmentPosition;\n\n            selectedBoxRef.current.style.width = `${width}px`;\n            selectedBoxRef.current.style.transform = `translateX(${offsetLeft}px)`;\n        }\n    }, [selectedSegmentPosition]);\n\n    const setSelectedBoxStylesRef = useRef(setSelectedBoxStyles);\n\n    useEffect(() => {\n        setSelectedBoxStylesRef.current = setSelectedBoxStyles;\n        setSelectedBoxStyles();\n    }, [setSelectedBoxStyles]);\n\n    useEffect(() => {\n        if (!wrapperRef.current) return undefined;\n\n        const ResizeObserver = window.ResizeObserver || ResizeObserverPolyfill;\n\n        const observer = new ResizeObserver(() => setSelectedBoxStylesRef.current());\n\n        observer.observe(wrapperRef.current);\n\n        return () => observer.disconnect();\n    }, []);\n\n    return (\n        // eslint-disable-next-line react/jsx-no-constructed-context-values\n        <SegmentedControlContext.Provider value={{ onChange }}>\n            <div\n                ref={wrapperRef}\n                className={cn(styles.wrapper, styles[shape], styles[size], className)}\n                data-test-id={dataTestId}\n            >\n                <div className={cn(styles.container)}>\n                    <div className={cn(styles.selectedBox, styles[shape])} ref={selectedBoxRef} />\n                    <div className={cn(styles.inner)} ref={innerRef}>\n                        {React.Children.map(children, (item) =>\n                            React.cloneElement(item, {\n                                className: cn(\n                                    styles.segment,\n                                    {\n                                        [styles.selected]: item.props.id === selectedId,\n                                    },\n                                    item.props.className,\n                                ),\n                            }),\n                        )}\n                    </div>\n                </div>\n            </div>\n            {content && <div className={cn(contentClassName)}>{content}</div>}\n        </SegmentedControlContext.Provider>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"segment\":\"segment_zeSuv\",\"focused\":\"focused_igu1d\"};","import React, { forwardRef, ReactNode, useContext, useRef } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport cn from 'classnames';\n\nimport { useFocus } from '@alfalab/hooks';\n\nimport { SegmentedControlContext } from '../../context';\nimport { IDType } from '../../typing';\n\nimport styles from './index.module.css';\n\nexport type SegmentProps = {\n    /**\n     * Дополнительный className\n     */\n    className?: string;\n\n    /**\n     * Дополнительный className для контента сегмента\n     */\n    contentClassName?: string;\n\n    /**\n     * ID сегмента\n     */\n    id: IDType;\n\n    /**\n     * Заголовок сегмента\n     */\n    title: string;\n\n    /**\n     * Контент выбранного сегмента\n     */\n    children?: ReactNode;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    dataTestId?: string;\n};\n\nexport const Segment = forwardRef<HTMLButtonElement, SegmentProps>(\n    ({ id, className, title, dataTestId }, ref) => {\n        const { onChange } = useContext(SegmentedControlContext);\n\n        const segmentRef = useRef<HTMLButtonElement>(null);\n\n        const [focused] = useFocus(segmentRef, 'keyboard');\n\n        const handleClick = () => {\n            onChange(id);\n        };\n\n        return (\n            <button\n                type='button'\n                onClick={handleClick}\n                ref={mergeRefs([segmentRef, ref])}\n                className={cn(styles.segment, className, styles.focused && focused)}\n                data-test-id={dataTestId}\n            >\n                {title}\n            </button>\n        );\n    },\n);\n"],"names":["MDXContext","withMDXComponents","Component","boundMDXComponent","props","allComponents","useMDXComponents","components","contextComponents","emptyObject","MDXProvider","children","disableParentContext","Provider","value","defaultComponents","code","a","ErrorBoundary","constructor","super","arguments","this","state","hasError","static","componentDidCatch","err","showException","render","DocsRenderer","async","context","docsParameter","element","Promise","resolve","reject","then","key","Math","random","unmount","_createMdxContent","_components","Object","assign","h2","p","pre","id","live","className","MDXContent","wrapper","MDXLayout","ul","li","SegmentedControl","Segment","css","title","component","name","selectedId","setSelectedId","size","select","shape","onChange","version","package","design","description","development","segmentedControl","storyName","parameters","storySource","source","componentMeta","tags","includeStories","docs","page","Changelog","_ref","content","_ref$root","root","_jsx","cn","styles","rootBlockRegexp","mixinRegexp","CssVars","expandable","_ref$type","type","_useState","useState","_useState2","_slicedToArray","vars","setVars","_useState3","_useState4","open","setOpen","isVars","regexp","useEffect","rootBlockMatch","exec","rootBlocks","push","result","reduce","acc","item","index","divider","length","concat","_jsxs","_Fragment","Link","view","onClick","pseudo","Example","language","ComponentHeader","_usages$name","_usages$name2","_usages$name3","_usages$name4","_usages$name5","_usages$name6","_useMatchMedia","useMatchMedia","isDesktop","packageName","replace","toLowerCase","githubLink","Title","Typography","tag","_defineProperty","href","target","GithubIcon","fill","Space","direction","align","usages","projects","color","search","underline","pluralize","imports","TabName","TabTitle","_TabTitle","DESCRIPTION","PROPS","CSS_VARS","CHANGELOG","DEVELOPMENT","Tabs","cssVars","changelog","_ref$defaultSelected","defaultSelected","selected","setSelected","handleChange","useCallback","_","_ref2","tabs","useMemo","renderTabs","Tab","style","marginTop","filter","isValidElement","TabsResponsive","containerClassName","_ref$fill","_ref$width","width","_ref$height","height","xmlns","viewBox","fillRule","clipRule","d","__docgenInfo","SegmentedControlContext","createContext","_ref$shape","_ref$size","defaultChildren","dataTestId","wrapperRef","useRef","innerRef","selectedBoxRef","slice","selectedSegmentPosition","findIndex","isPositionFounded","contentClassName","setSelectedBoxStyles","current","segments","Array","from","getBoundingClientRect","offsetLeft","transform","setSelectedBoxStylesRef","observer","window","ResizeObserver","ResizeObserverPolyfill","observe","disconnect","ref","React","forwardRef","useContext","segmentRef","_useFocus","useFocus","focused","handleClick","mergeRefs"],"sourceRoot":""}