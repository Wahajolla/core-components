{"version":3,"file":"17-validation-stories-mdx.9c5e0342.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./node_modules/@mdx-js/react/lib/index.js","webpack://@alfalab/core-components/./node_modules/@storybook/addon-docs/dist/chunk-PCJTTTQV.mjs","webpack://@alfalab/core-components/./docs/17.validation.stories.mdx"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","import React, { Component } from 'react';\nimport { renderElement, unmountElement } from '@storybook/react-dom-shim';\nimport { CodeOrSourceMdx, AnchorMdx, HeadersMdx, Docs } from '@storybook/blocks';\n\nvar defaultComponents={code:CodeOrSourceMdx,a:AnchorMdx,...HeadersMdx},ErrorBoundary=class extends Component{constructor(){super(...arguments);this.state={hasError:!1};}static getDerivedStateFromError(){return {hasError:!0}}componentDidCatch(err){let{showException}=this.props;showException(err);}render(){let{hasError}=this.state,{children}=this.props;return hasError?null:children}},DocsRenderer=class{constructor(){this.render=async(context,docsParameter,element)=>{let components={...defaultComponents,...docsParameter?.components};return new Promise((resolve,reject)=>{import('@mdx-js/react').then(({MDXProvider})=>renderElement(React.createElement(ErrorBoundary,{showException:reject,key:Math.random()},React.createElement(MDXProvider,{components},React.createElement(Docs,{context,docsParameter}))),element)).then(resolve);})},this.unmount=element=>{unmountElement(element);};}};\n\nexport { DocsRenderer, defaultComponents };\n","\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"@storybook/addon-docs/mdx-react-shim\";\nimport { Meta } from '@storybook/addon-docs';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Meta, {\n      title: \"Patterns/\\u0412\\u0430\\u043B\\u0438\\u0434\\u0430\\u0446\\u0438\\u044F\",\n      parameters: {\n        previewTabs: {\n          canvas: {\n            hidden: true\n          }\n        }\n      },\n      id: \"Guidelines/Validation\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h1, {\n      id: \"\\u0432\\u0430\\u043B\\u0438\\u0434\\u0430\\u0446\\u0438\\u044F\",\n      children: \"Валидация\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Процесс проверки значений, указанных пользователем с последующим отображением найденных ошибок.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"\\u043F\\u0440\\u0438\\u043D\\u0446\\u0438\\u043F\\u044B\",\n      children: \"Принципы\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Лучшая валидация — это отсутствие потребности в валидации. Старайтесь проектировать интерфейс таким образом,\\nчтобы пользователю было сложно совершить ошибку. Для этого:\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ol, {\n      children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Используйте маски, чтобы ограничить ввод неподходящих символов и задать корректный формат ввода.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Используйте пикеры и другие контролы, не позволяющие указать ошибочное значение.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Пишите подсказки для пользователя, используйте тултипы, хинты или плейсхолдеры там, где это необходимо.\"\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"\\u043F\\u0430\\u0442\\u0442\\u0435\\u0440\\u043D\\u044B-\\u0432\\u0430\\u043B\\u0438\\u0434\\u0430\\u0446\\u0438\\u0438\",\n      children: \"Паттерны валидации\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"В порядке скорости реагирования:\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ol, {\n      children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Мгновенная.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"При потере фокуса.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"При отправке формы.\"\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"В интерфейсах нужно стремиться сообщить об ошибке как можно раньше, чтобы пользователю не приходилось возвращаться.\\nПри проектировании необходимо учитывать возможные технические ограничения и подбирать оптимальный паттерн под задачу.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"\\u043C\\u0433\\u043D\\u043E\\u0432\\u0435\\u043D\\u043D\\u0430\\u044F-\\u0432\\u0430\\u043B\\u0438\\u0434\\u0430\\u0446\\u0438\\u044F\",\n      children: \"Мгновенная валидация\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Если в процессе ввода значения можно проверить его на корректность, можно использовать мгновенную валидацию.\\nОшибки, которые может подсветить такая валидация, обычно связаны с вводом недопустимых символов,\\nнапример ввод букв в цифровое поле. В подобных случаях более сильным решением будет использование масок в полях ввода,\\nкоторые не допустят ввод ошибочных значений. А значит такая валидация будет не нужна.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"В примере ниже поля предназначены для ввода цифр.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      live: true,\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"const NumberInput = () => {\\n    const [value, setValue] = React.useState('');\\n    const [error, setError] = React.useState();\\n\\n    const handleChange = (e) => {\\n        const inputValue = e.target.value;\\n        setValue(inputValue);\\n\\n        if (!/^\\\\d*$/.test(inputValue)) {\\n            setError('Введено недопустимое значение');\\n        } else {\\n            setError(false);\\n        }\\n    };\\n\\n    return (\\n        <Input\\n            value={value}\\n            onChange={handleChange}\\n            size='m'\\n            block={true}\\n            placeholder='Мгновенная валидация'\\n            error={error}\\n        />\\n    );\\n};\\n\\nconst MaskedNumberInput = () => {\\n    const [value, setValue] = React.useState('');\\n\\n    return (\\n        <MaskedInput\\n            value={value}\\n            onChange={(e) => setValue(e.target.value)}\\n            size='m'\\n            block={true}\\n            placeholder='Маска'\\n            mask={(rawValue) => new Array(rawValue.length).fill(/\\\\d/)}\\n        />\\n    );\\n};\\n\\nrender(() => {\\n    return (\\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\\n            <NumberInput />\\n            <Gap size='m' />\\n            <MaskedNumberInput />\\n        </div>\\n    );\\n});\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"\\u0432\\u0430\\u043B\\u0438\\u0434\\u0430\\u0446\\u0438\\u044F-\\u043F\\u043E-\\u043F\\u043E\\u0442\\u0435\\u0440\\u0435-\\u0444\\u043E\\u043A\\u0443\\u0441\\u0430\",\n      children: \"Валидация по потере фокуса\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Валидация срабатывает сразу после потери валидируемым компонентом фокуса.\\nЕсли найдена ошибка, компонент переходит в состояние ошибки, но фокус к нему не возвращается.\\nСостояние ошибки должно быть снято как только пользователь начнет изменять значение.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Паттерн хорошо подходит для всех случаев, кроме проверки на заполненность обязательных полей.\\nУ пользователя может быть свой план заполнения полей, которого он придерживается.\\nТолько после отправки формы мы можем с уверенностью сказать, что какие-то из обязательных полей не заполнены и это ошибка.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      live: true,\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"const InputWrapper = ({ patronymic, placeholder, errMsg }) => {\\n    const [value, setValue] = React.useState('');\\n    const [error, setError] = React.useState(false);\\n\\n    const validate = () => {\\n        if (value.toLowerCase() !== patronymic) {\\n            setError(errMsg);\\n        }\\n    };\\n\\n    const handleChange = (e) => {\\n        setValue(e.target.value);\\n        setError(false);\\n    };\\n\\n    const handleBlur = () => validate();\\n\\n    return (\\n        <Input\\n            value={value}\\n            onChange={handleChange}\\n            onBlur={handleBlur}\\n            size='m'\\n            block={true}\\n            placeholder={placeholder}\\n            error={error}\\n        />\\n    );\\n};\\n\\nrender(() => {\\n    return (\\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\\n            <InputWrapper\\n                placeholder='Отчество Александра Пушкина'\\n                patronymic='сергеевич'\\n                errMsg='Александр Сергеевич – наше всё'\\n            />\\n            <Gap size='m' />\\n            <InputWrapper\\n                placeholder='Отчество Афанасия Фета'\\n                patronymic='афанасьевич'\\n                errMsg='Отца Афанасия тоже звали Афанасием'\\n            />\\n        </div>\\n    );\\n});\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"\\u0432\\u0430\\u043B\\u0438\\u0434\\u0430\\u0446\\u0438\\u044F-\\u043F\\u043E-\\u043E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0435-\\u0444\\u043E\\u0440\\u043C\\u044B\",\n      children: \"Валидация по отправке формы\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Проверка происходит после того, как пользователь нажал кнопку отправки данных:\\nвсе поля с ошибками на форме переходят в состояние ошибки, первый контрол с ошибкой получает фокус,\\nстраница прокручивается к нему.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Подобный паттерн хорошо подходит для проверки на заполненность обязательных полей,\\nтак как в случае отправки формы мы уверены что пользователь считает форму заполненной.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      live: true,\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"const data = {\\n    pushkin: {\\n        patronymic: 'сергеевич',\\n        desc: 'Отчество Александра Пушкина',\\n        errMsg: 'Александр Сергеевич – наше всё',\\n    },\\n    fet: {\\n        patronymic: 'афанасьевич',\\n        desc: 'Отчество Афанасия Фета',\\n        errMsg: 'Отца Афанасия тоже звали Афанасием',\\n    },\\n};\\n\\nconst dataKeys = Object.keys(data);\\n\\nconst validateForm = (form) => {\\n    let errors = {};\\n\\n    dataKeys.forEach((key) => {\\n        if (data[key].patronymic !== form.values[key].toLowerCase()) {\\n            errors[key] = data[key].errMsg;\\n        }\\n    });\\n\\n    return Object.keys(errors).length > 0 ? errors : null;\\n};\\n\\nconst getInitialState = () => {\\n    const initialValues = dataKeys.reduce((result, key) => {\\n        result[key] = '';\\n        return result;\\n    }, {});\\n\\n    return { values: initialValues, errors: initialValues };\\n};\\n\\nrender(() => {\\n    const [form, setForm] = React.useState(getInitialState);\\n\\n    const handleSubmit = (e) => {\\n        e.preventDefault();\\n\\n        const errors = validateForm(form);\\n        if (errors) {\\n            setForm((prevState) => ({ ...prevState, errors: { ...prevState.errors, ...errors } }));\\n        }\\n    };\\n\\n    const handleChange = (e) => {\\n        const name = e.target.name;\\n\\n        setForm((prevState) => ({\\n            ...prevState,\\n            values: { ...prevState.values, ...{ [name]: e.target.value } },\\n            errors: { ...prevState.errors, ...{ [name]: '' } },\\n        }));\\n    };\\n\\n    return (\\n        <form\\n            style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}\\n            onSubmit={handleSubmit}\\n        >\\n            {dataKeys.map((key, idx) => (\\n                <span key={key}>\\n                    <Input\\n                        value={form.values[key]}\\n                        error={form.errors[key]}\\n                        name={key}\\n                        onChange={handleChange}\\n                        size='m'\\n                        block={true}\\n                        placeholder={data[key].desc}\\n                    />\\n                    {idx !== dataKeys.length - 1 && <Gap size='m' />}\\n                </span>\\n            ))}\\n\\n            <Gap size='m' />\\n            <Button view='primary' size='m' type='submit'>\\n                Отправить форму\\n            </Button>\\n        </form>\\n    );\\n});\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, {\n    ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n/* ========= */\nexport const __page = () => {\n  throw new Error(\"Docs-only story\");\n};\n__page.parameters = {\n  docsOnly: true\n};\nconst componentMeta = {\n  title: 'Patterns/Валидация',\n  id: 'Guidelines/Validation',\n  parameters: {\n    previewTabs: {\n      canvas: {\n        hidden: true\n      }\n    }\n  },\n  tags: ['stories-mdx'],\n  includeStories: [\"__page\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;"],"names":["MDXContext","withMDXComponents","Component","boundMDXComponent","props","allComponents","useMDXComponents","components","contextComponents","emptyObject","MDXProvider","children","disableParentContext","Provider","value","defaultComponents","code","a","ErrorBoundary","constructor","super","arguments","this","state","hasError","static","componentDidCatch","err","showException","render","DocsRenderer","async","context","docsParameter","element","Promise","resolve","reject","then","key","Math","random","unmount","_createMdxContent","_components","Object","assign","h1","p","h2","ol","li","pre","title","parameters","previewTabs","canvas","hidden","id","live","className","__page","Error","docsOnly","componentMeta","tags","includeStories","docs","page","MDXContent","wrapper","MDXLayout"],"sourceRoot":""}