{"version":3,"file":"7549.da3f885a.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./packages/confirmation/src/component.desktop.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/mobile.module.css?3b7c","webpack://@alfalab/core-components/./packages/confirmation/src/component.mobile.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/component.responsive.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/base-confirmation/index.module.css?0888","webpack://@alfalab/core-components/./packages/confirmation/src/components/base-confirmation/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/countdown-loader/index.module.css?8539","webpack://@alfalab/core-components/./packages/confirmation/src/components/countdown-loader/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/header/index.module.css?0aac","webpack://@alfalab/core-components/./packages/confirmation/src/components/header/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/initial/index.module.css?7715","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/initial/countdown-section.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/initial/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/hint/index.module.css?1701","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/hint/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/fatal-error/index.module.css?97be","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/fatal-error/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/temp-block/index.module.css?4948","webpack://@alfalab/core-components/./packages/confirmation/src/components/screens/temp-block/component.tsx","webpack://@alfalab/core-components/./packages/confirmation/src/context.ts","webpack://@alfalab/core-components/./packages/confirmation/src/types.ts","webpack://@alfalab/core-components/./packages/confirmation/src/utils.ts"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { BaseConfirmation } from './components/base-confirmation';\nimport { ConfirmationProps } from './types';\n\nexport type DesktopConfirmationProps = Omit<ConfirmationProps, 'mobile' | 'breakpoint'>;\n\nexport const ConfirmationDesktop: FC<DesktopConfirmationProps> = (props) => (\n    <BaseConfirmation {...props} />\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container_P2oHI\"};","import React, { FC } from 'react';\nimport cn from 'classnames';\n\nimport { BaseConfirmation } from './components/base-confirmation';\nimport { ConfirmationProps } from './types';\n\nimport styles from './mobile.module.css';\n\nexport type MobileConfirmationProps = Omit<ConfirmationProps, 'mobile'>;\n\nexport const ConfirmationMobile: FC<MobileConfirmationProps> = ({ className, ...resProps }) => (\n    <BaseConfirmation mobile={true} className={cn(className, styles.container)} {...resProps} />\n);\n","import React, { FC } from 'react';\n\nimport { useMedia } from '@alfalab/hooks';\n\nimport { ConfirmationDesktop } from './component.desktop';\nimport { ConfirmationMobile } from './component.mobile';\nimport { ConfirmationProps } from './types';\n\nexport type ResponsiveConfirmationProps = Omit<\n    ConfirmationProps,\n    'confirmationScreens' | 'breakpoint'\n> & {\n    /**\n     * Контрольная точка, с нее начинается desktop версия\n     * @default 1024\n     */\n    breakpoint?: number;\n};\n\nexport type ConfirmationMedia = 'desktop' | 'mobile';\n\nexport const ConfirmationResponsive: FC<ResponsiveConfirmationProps> = ({\n    breakpoint = 1024,\n    ...restProps\n}) => {\n    const [view] = useMedia<ConfirmationMedia>(\n        [\n            ['mobile', `(max-width: ${breakpoint - 1}px)`],\n            ['desktop', `(min-width: ${breakpoint}px)`],\n        ],\n        'desktop',\n    );\n\n    return view === 'desktop' ? (\n        <ConfirmationDesktop {...restProps} />\n    ) : (\n        <ConfirmationMobile breakpoint={breakpoint} {...restProps} />\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_GvAjb\"};","import React, { ComponentType, FC, useEffect } from 'react';\nimport cn from 'classnames';\n\nimport { usePrevious } from '@alfalab/hooks';\n\nimport { ConfirmationContext } from '../../context';\nimport { ConfirmationProps, defaultTexts, TConfirmationContext } from '../../types';\nimport { ONE_DAY, ONE_MINUTE, useCountdown } from '../../utils';\nimport { FatalError, Hint, Initial, TempBlock } from '../screens';\n\nimport styles from './index.module.css';\n\nconst confirmationScreens: { [key: string]: ComponentType<{ mobile?: boolean }> } = {\n    INITIAL: Initial,\n    HINT: Hint,\n    FATAL_ERROR: FatalError,\n    TEMP_BLOCK: TempBlock,\n};\n\nexport const BaseConfirmation: FC<ConfirmationProps> = ({\n    state,\n    screen,\n    alignContent = 'left',\n    children,\n    requiredCharAmount = 5,\n    countdownDuration = ONE_MINUTE,\n    tempBlockDuration = ONE_DAY,\n    phone,\n    blockSmsRetry,\n    dataTestId,\n    className,\n    getScreensMap,\n    onInputFinished,\n    onChangeState,\n    onSmsRetryClick,\n    onChangeScreen,\n    onFatalErrorOkButtonClick,\n    onTempBlockFinished,\n    mobile,\n    clearCodeOnError = true,\n    hideCountdownSection = false,\n    breakpoint = 1024,\n    ...restProps\n}) => {\n    const [timeLeft, startTimer, stopTimer] = useCountdown(countdownDuration);\n\n    const prevState = usePrevious(state);\n\n    useEffect(() => {\n        startTimer();\n    }, [startTimer]);\n\n    useEffect(() => {\n        /**\n         * Перезапускаем таймер после повторного запроса кода\n         */\n        if (state === 'INITIAL' && prevState === 'CODE_SENDING') {\n            startTimer();\n        }\n    }, [state, prevState, startTimer]);\n\n    useEffect(() => {\n        /**\n         * Останавливаем таймер, если новый экран/состояние не содержит таймер\n         */\n        if (!['INITIAL', 'HINT', 'TEMP_BLOCK'].includes(screen) || blockSmsRetry) {\n            stopTimer();\n        }\n    }, [state, screen, blockSmsRetry, stopTimer]);\n\n    const handleSmsRetry = () => {\n        onChangeState('CODE_SENDING');\n\n        onSmsRetryClick();\n    };\n\n    const handleInputFinished = (code: string) => {\n        onChangeState('CODE_CHECKING');\n\n        onInputFinished(code);\n    };\n\n    const handleFatalErrorOkButtonClick = () => {\n        if (onFatalErrorOkButtonClick) {\n            onFatalErrorOkButtonClick();\n        }\n    };\n\n    // eslint-disable-next-line react/jsx-no-constructed-context-values\n    const contextValue: TConfirmationContext = {\n        hideCountdownSection,\n        alignContent,\n        texts: { ...defaultTexts, ...restProps.texts },\n        state,\n        screen,\n        requiredCharAmount,\n        countdownDuration,\n        timeLeft,\n        tempBlockDuration,\n        phone,\n        blockSmsRetry,\n        breakpoint,\n        onTempBlockFinished,\n        onChangeState,\n        onChangeScreen,\n        clearCodeOnError,\n        onInputFinished: handleInputFinished,\n        onSmsRetryClick: handleSmsRetry,\n        onFatalErrorOkButtonClick: handleFatalErrorOkButtonClick,\n    };\n\n    const screensMap = getScreensMap ? getScreensMap(confirmationScreens) : confirmationScreens;\n\n    const CurrentScreen = screensMap[screen];\n\n    return (\n        <ConfirmationContext.Provider value={contextValue}>\n            <div className={cn(styles.component, className)} data-test-id={dataTestId}>\n                {CurrentScreen && <CurrentScreen mobile={mobile} />}\n            </div>\n        </ConfirmationContext.Provider>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"circle\":\"circle_l0DaD\"};","import React, { FC } from 'react';\n\nimport styles from './index.module.css';\n\ntype Props = {\n    progress: number; // 0-1\n    className?: string;\n};\n\nconst SIZE = 16;\nconst STROKE_WIDTH = 2;\n\nconst CENTER = SIZE / 2;\nconst RADIUS = CENTER - STROKE_WIDTH / 2;\n/** Длина окружности */\nconst CIRCUMFERENCE = Math.PI * RADIUS * 2;\n\nexport const CountdownLoader: FC<Props> = ({ progress, className }) => {\n    const value = Math.min(progress, 1);\n\n    const strokeDasharray = CIRCUMFERENCE.toFixed(2);\n    const strokeDashoffset = (value * CIRCUMFERENCE).toFixed(2);\n\n    return (\n        <svg width={SIZE} height={SIZE} viewBox={`0 0 ${SIZE} ${SIZE}`} className={className}>\n            <circle\n                cx={CENTER}\n                cy={CENTER}\n                r={RADIUS}\n                strokeDasharray={strokeDasharray}\n                strokeDashoffset={strokeDashoffset}\n                transform={`rotate(-90 ${CENTER} ${CENTER})`}\n                className={styles.circle}\n            />\n        </svg>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"header_ZN_0G\",\"typography\":\"typography_oKWak\",\"typographyMobile\":\"typographyMobile_FD5ys\"};","import React, { FC, ReactNode } from 'react';\nimport cn from 'classnames';\n\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport styles from './index.module.css';\n\nexport type HeaderProps = {\n    /**\n     * Контент шапки\n     */\n    children?: ReactNode;\n\n    /**\n     * Отображать в мобильной версии экран компонента\n     */\n    mobile?: boolean;\n};\n\nexport const Header: FC<HeaderProps> = ({ mobile, children }) => (\n    <Typography.Title\n        className={cn(styles.header, styles.typography, { [styles.typographyMobile]: mobile })}\n        tag='h3'\n        color='primary'\n    >\n        {children}\n    </Typography.Title>\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_qSN5B\",\"typographyTheme\":\"typographyTheme_Pi_14\",\"phone\":\"phone_Z3ZUm\",\"compact\":\"compact_LIbRg\",\"loaderWrap\":\"loaderWrap_FwhcX\",\"left\":\"left_kmaqz\",\"center\":\"center_CU0cp\",\"codeInput\":\"codeInput_HZGBZ\",\"smsComeLink\":\"smsComeLink_fCGMw\",\"countdownContainer\":\"countdownContainer_KRt7L\",\"countdownMobile\":\"countdownMobile_k2JLm\",\"countdownLoaderMobile\":\"countdownLoaderMobile_Cmsnv\",\"getCodeButton\":\"getCodeButton_h8KEH\",\"getCodeButtonMobile\":\"getCodeButtonMobile_bdSnI\",\"containerInput\":\"containerInput_IUzHX\"};","import React, { FC, useContext } from 'react';\nimport cn from 'classnames';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { Loader } from '@alfalab/core-components-loader';\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport { ConfirmationContext } from '../../../context';\nimport { formatMsAsMinutes } from '../../../utils';\n\nimport styles from './index.module.css';\n\ntype CountdownSectionProps = {\n    codeSendHintVisible: boolean;\n    timePassed: boolean;\n    processing: boolean;\n    mobile?: boolean;\n    handleSmsRetryClick: () => void;\n};\n\nexport const CountdownSection: FC<CountdownSectionProps> = ({\n    codeSendHintVisible,\n    timePassed,\n    processing,\n    mobile,\n    handleSmsRetryClick,\n}) => {\n    const {\n        state,\n        texts,\n        timeLeft,\n        blockSmsRetry,\n        breakpoint: breakpointProps,\n    } = useContext(ConfirmationContext);\n\n    const breakpoint = mobile ? breakpointProps : 1;\n\n    const renderText = (text?: string) => (\n        <Typography.Text\n            className={cn(styles.countdownContainer, {\n                [styles.countdownMobile]: mobile,\n                [styles.typographyTheme]: !mobile,\n            })}\n            view={mobile ? 'primary-small' : 'primary-medium'}\n            tag='div'\n        >\n            {text}\n        </Typography.Text>\n    );\n\n    if (codeSendHintVisible) return renderText(texts.codeSended);\n\n    if (processing) {\n        return (\n            <div\n                className={cn(styles.loaderWrap, styles.countdownContainer, {\n                    [styles.countdownLoaderMobile]: mobile,\n                    [styles.typographyTheme]: !mobile,\n                })}\n            >\n                <Loader />\n\n                <span className={styles.loaderText}>\n                    {state === 'CODE_CHECKING' ? texts.codeChecking : texts.codeSending}\n                </span>\n            </div>\n        );\n    }\n\n    if (blockSmsRetry) return renderText(texts.noAttemptsLeft);\n\n    if (timePassed) {\n        return (\n            <Button\n                size={mobile ? 'xs' : 'xxs'}\n                view='secondary'\n                onClick={handleSmsRetryClick}\n                className={cn(styles.getCodeButton, { [styles.getCodeButtonMobile]: mobile })}\n                breakpoint={breakpoint}\n            >\n                {texts.buttonRetry}\n            </Button>\n        );\n    }\n\n    return renderText(`${texts.countdown} ${formatMsAsMinutes(timeLeft)}`);\n};\n","import React, {\n    FC,\n    useCallback,\n    useContext,\n    useEffect,\n    useLayoutEffect,\n    useRef,\n    useState,\n} from 'react';\nimport cn from 'classnames';\n\nimport { ButtonMobile } from '@alfalab/core-components-button/mobile';\nimport { CodeInput, CodeInputProps, CustomInputRef } from '@alfalab/core-components-code-input';\nimport { Link } from '@alfalab/core-components-link';\nimport { Typography } from '@alfalab/core-components-typography';\nimport { usePrevious } from '@alfalab/hooks';\n\nimport { ConfirmationContext } from '../../../context';\nimport { Header } from '../../header';\n\nimport { CountdownSection } from './countdown-section';\n\nimport styles from './index.module.css';\n\nexport type InitialProps = {\n    /**\n     * Отображать в мобильной версии экран компонента\n     */\n    mobile?: boolean;\n};\n\nconst CODE_SEND_HINT_VISIBLE_DURATION = 2000;\n\nexport const Initial: FC<InitialProps> = ({ mobile }) => {\n    const {\n        state,\n        alignContent,\n        texts,\n        requiredCharAmount,\n        timeLeft,\n        phone,\n        clearCodeOnError,\n        hideCountdownSection,\n        onChangeState,\n        onInputFinished,\n        onChangeScreen,\n        onSmsRetryClick,\n    } = useContext(ConfirmationContext);\n\n    const prevState = usePrevious(state);\n\n    const inputRef = useRef<CustomInputRef>(null);\n\n    const [codeSendHintVisible, setCodeSendHintVisible] = useState(false);\n\n    const timerId = useRef(0);\n\n    const handleInputComplete: CodeInputProps['onComplete'] = (code) => {\n        onInputFinished(code);\n    };\n\n    const handleSmsHintLinkClick = () => {\n        onChangeScreen('HINT');\n    };\n\n    const handleInputChange = () => {\n        if (state === 'CODE_ERROR') {\n            onChangeState('INITIAL');\n        }\n    };\n\n    const handleSmsRetryClick = () => {\n        if (inputRef.current) {\n            inputRef.current.reset();\n        }\n\n        onSmsRetryClick();\n    };\n\n    const handleErrorAnimationEnd = () => {\n        if (clearCodeOnError && state !== 'INITIAL') {\n            onChangeState('INITIAL');\n        }\n    };\n\n    const clearTimer = useCallback(() => {\n        window.clearTimeout(timerId.current);\n    }, []);\n\n    useEffect(() => {\n        if (inputRef.current) {\n            inputRef.current.focus();\n        }\n\n        return () => {\n            clearTimer();\n        };\n    }, [clearTimer]);\n\n    useEffect(() => {\n        if (!inputRef.current) {\n            return;\n        }\n\n        if (state === 'CODE_ERROR' && prevState !== 'CODE_ERROR') {\n            inputRef.current.focus(requiredCharAmount - 1);\n        }\n\n        if (prevState === 'CODE_SENDING' && state !== 'CODE_SENDING') {\n            inputRef.current.focus();\n        }\n    }, [prevState, state, requiredCharAmount]);\n\n    useLayoutEffect(() => {\n        if (prevState === 'CODE_SENDING' && state !== 'CODE_SENDING') {\n            setCodeSendHintVisible(true);\n\n            clearTimer();\n\n            timerId.current = window.setTimeout(() => {\n                setCodeSendHintVisible(false);\n            }, CODE_SEND_HINT_VISIBLE_DURATION);\n        }\n    }, [prevState, state, clearTimer]);\n\n    const getCodeInputError = (): string | boolean => {\n        if (state === 'CODE_ERROR') {\n            return texts.codeError || true;\n        }\n\n        return false;\n    };\n\n    const processing = ['CODE_CHECKING', 'CODE_SENDING'].includes(state);\n\n    const timePassed = timeLeft === 0;\n\n    return (\n        <div className={cn(styles.component, styles[alignContent])}>\n            <Header mobile={mobile}>{texts.title}</Header>\n\n            <Typography.Text\n                view='primary-medium'\n                color='primary'\n                className={cn(styles.phone, { [styles.typographyTheme]: !mobile })}\n            >\n                Код отправлен на {phone}\n            </Typography.Text>\n            <CodeInput\n                disabled={processing}\n                error={getCodeInputError()}\n                ref={inputRef}\n                fields={requiredCharAmount}\n                className={cn(styles.containerInput, styles.codeInput)}\n                onComplete={handleInputComplete}\n                onChange={handleInputChange}\n                clearCodeOnError={clearCodeOnError}\n                onErrorAnimationEnd={handleErrorAnimationEnd}\n            />\n            {!hideCountdownSection && (\n                <CountdownSection\n                    processing={processing}\n                    timePassed={timePassed}\n                    codeSendHintVisible={codeSendHintVisible}\n                    handleSmsRetryClick={handleSmsRetryClick}\n                    mobile={mobile}\n                />\n            )}\n\n            {mobile ? (\n                <ButtonMobile onClick={handleSmsHintLinkClick} view='link' size='xs'>\n                    {texts.linkToHint}\n                </ButtonMobile>\n            ) : (\n                <Link\n                    onClick={handleSmsHintLinkClick}\n                    className={styles.smsComeLink}\n                    view={mobile ? 'primary' : 'secondary'}\n                    pseudo={true}\n                >\n                    {texts.linkToHint}\n                </Link>\n            )}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_INcuh\",\"center\":\"center_evuGf\",\"text\":\"text_zYz7a\",\"typographyTheme\":\"typographyTheme_yDE4v\",\"phonesWrap\":\"phonesWrap_mk1JS\",\"phoneWrap\":\"phoneWrap_HDch2\",\"phoneLink\":\"phoneLink_CT7Za\",\"hintButton\":\"hintButton_psc2L\",\"phoneContentMobile\":\"phoneContentMobile_S8rEw\"};","import React, { FC, useContext } from 'react';\nimport cn from 'classnames';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { Link } from '@alfalab/core-components-link';\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport { ConfirmationContext } from '../../../context';\nimport { Header } from '../../header';\n\nimport styles from './index.module.css';\n\nexport type HintProps = {\n    /**\n     * Отображать в мобильной версии экран компонента\n     */\n    mobile?: boolean;\n};\n\nexport const Hint: FC<HintProps> = ({ mobile }) => {\n    const {\n        alignContent,\n        texts,\n        onChangeScreen,\n        onChangeState,\n        breakpoint: breakpointProps,\n    } = useContext(ConfirmationContext);\n\n    const breakpoint = mobile ? breakpointProps : 1;\n\n    const handleReturnButtonClick = () => {\n        onChangeScreen('INITIAL');\n        onChangeState('INITIAL');\n    };\n\n    return (\n        <div className={cn(styles.component, styles[alignContent])}>\n            <Header mobile={mobile}>Не&nbsp;приходит сообщение?</Header>\n\n            <Typography.Text\n                view='primary-medium'\n                color='primary'\n                className={cn(styles.text, { [styles.typographyTheme]: !mobile })}\n            >\n                Если у&nbsp;вас изменился номер телефона, позвоните нам или обратитесь в&nbsp;любое\n                отделение банка.\n            </Typography.Text>\n\n            <div className={styles.phonesWrap}>\n                <div className={cn(styles.phoneWrap, { [styles.phoneContentMobile]: mobile })}>\n                    <Link href='tel:+78002000000' underline={false} className={styles.phoneLink}>\n                        8 800 200-00-00\n                    </Link>\n                    <Typography.Text\n                        view='primary-medium'\n                        color='primary'\n                        className={cn(styles.text, { [styles.typographyTheme]: !mobile })}\n                    >\n                        {mobile\n                            ? 'Для\\u00A0звонков по\\u00A0России'\n                            : ' \\u2014\\u00A0для звонков по\\u00A0России'}\n                    </Typography.Text>\n                </div>\n\n                <div className={cn(styles.phoneWrap, { [styles.phoneContentMobile]: mobile })}>\n                    <Link href='tel:+74957888878' underline={false} className={styles.phoneLink}>\n                        +7 495 78-888-78\n                    </Link>\n                    <Typography.Text\n                        view='primary-medium'\n                        color='primary'\n                        className={cn(styles.text, { [styles.typographyTheme]: !mobile })}\n                    >\n                        {mobile\n                            ? 'В\\u00A0Москве и\\u00A0за\\u00A0границей'\n                            : ' \\u2014\\u00A0в\\u00A0Москве и\\u00A0за\\u00A0границей'}\n                    </Typography.Text>\n                </div>\n            </div>\n\n            <Typography.Text\n                view='primary-medium'\n                color='primary'\n                className={cn(styles.text, { [styles.typographyTheme]: !mobile })}\n            >\n                Если номер не&nbsp;менялся, возможно, перегружен сервис отправки сообщений.\n                Попробуйте повторить действие через несколько минут.\n            </Typography.Text>\n\n            <Button\n                size={mobile ? 'xs' : 's'}\n                view='secondary'\n                onClick={handleReturnButtonClick}\n                className={styles.hintButton}\n                breakpoint={breakpoint}\n            >\n                {texts.hintButton}\n            </Button>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_Sm4Ct\",\"typographyTheme\":\"typographyTheme_l4E5K\",\"left\":\"left_dVeU0\",\"center\":\"center_TCkjT\",\"button\":\"button_ON7yD\"};","import React, { FC, useContext } from 'react';\nimport cn from 'classnames';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport { ConfirmationContext } from '../../../context';\nimport { Header } from '../../header';\n\nimport styles from './index.module.css';\n\nexport type FatalErrorProps = {\n    /**\n     * Отображать в мобильной версии экран компонента\n     */\n    mobile?: boolean;\n};\n\nexport const FatalError: FC<FatalErrorProps> = ({ mobile }) => {\n    const {\n        alignContent,\n        texts,\n        onFatalErrorOkButtonClick,\n        breakpoint: breakpointProps,\n    } = useContext(ConfirmationContext);\n\n    const breakpoint = mobile ? breakpointProps : 1;\n\n    return (\n        <div className={cn(styles.component, styles[alignContent])}>\n            <Header mobile={mobile}>{texts.fatalErrorTitle}</Header>\n\n            <Typography.Text\n                view='primary-medium'\n                color='primary'\n                className={cn({ [styles.typographyTheme]: !mobile })}\n            >\n                {texts.fatalErrorDescription}\n            </Typography.Text>\n\n            <Button\n                size={mobile ? 'xs' : 's'}\n                view='secondary'\n                onClick={onFatalErrorOkButtonClick}\n                className={styles.button}\n                breakpoint={breakpoint}\n            >\n                {texts.fatalErrorButton}\n            </Button>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_jY5Gy\",\"center\":\"center_tRUZH\",\"typographyTheme\":\"typographyTheme_YYdhe\",\"description\":\"description_AbXit\",\"countdownWrap\":\"countdownWrap_LwPfJ\",\"loader\":\"loader_dlyIX\"};","import React, { FC, useContext, useEffect } from 'react';\nimport cn from 'classnames';\n\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport { ConfirmationContext } from '../../../context';\nimport { formatMsAsMinutes, useCountdown } from '../../../utils';\nimport { CountdownLoader } from '../../countdown-loader';\nimport { Header } from '../../header';\n\nimport styles from './index.module.css';\n\nexport type TempBlockProps = {\n    /**\n     * Отображать в мобильной версии экран компонента\n     */\n    mobile?: boolean;\n};\n\nexport const TempBlock: FC<TempBlockProps> = ({ mobile }) => {\n    const { alignContent, texts, tempBlockDuration, onChangeScreen, onTempBlockFinished } =\n        useContext(ConfirmationContext);\n\n    const [timeLeft, startTimer] = useCountdown(tempBlockDuration);\n\n    useEffect(() => {\n        startTimer();\n    }, [startTimer]);\n\n    useEffect(() => {\n        if (timeLeft === 0 && onTempBlockFinished) {\n            onTempBlockFinished();\n        }\n    }, [timeLeft, onChangeScreen, onTempBlockFinished]);\n\n    return (\n        <div className={cn(styles.component, styles[alignContent])}>\n            <Header mobile={mobile}>{texts.tempBlockTitle}</Header>\n\n            <Typography.Text\n                view='primary-medium'\n                color='primary'\n                className={cn(styles.description, { [styles.typographyTheme]: !mobile })}\n            >\n                {texts.tempBlockDescription}\n            </Typography.Text>\n\n            <div className={cn(styles.countdownWrap, { [styles.typographyTheme]: !mobile })}>\n                <CountdownLoader\n                    progress={1 - timeLeft / tempBlockDuration}\n                    className={styles.loader}\n                />\n\n                {formatMsAsMinutes(timeLeft)}\n            </div>\n        </div>\n    );\n};\n","import { createContext } from 'react';\n\nimport { TConfirmationContext } from './types';\nimport { ONE_DAY, ONE_MINUTE } from './utils';\n\nconst mockFn = () => undefined;\n\nexport const ConfirmationContext = createContext<TConfirmationContext>({\n    alignContent: 'left',\n    texts: {},\n    state: 'INITIAL',\n    screen: 'INITIAL',\n    requiredCharAmount: 5,\n    countdownDuration: ONE_MINUTE,\n    timeLeft: ONE_MINUTE,\n    tempBlockDuration: ONE_DAY,\n    phone: '',\n    hideCountdownSection: false,\n    breakpoint: 1024,\n    onTempBlockFinished: mockFn,\n    onInputFinished: mockFn,\n    onChangeState: mockFn,\n    onSmsRetryClick: mockFn,\n    onChangeScreen: mockFn,\n    onFatalErrorOkButtonClick: mockFn,\n});\n","import { ComponentType, ReactNode } from 'react';\n\nexport type ConfirmationProps = {\n    /**\n     * Экран компонента\n     */\n    screen: ConfirmationScreen | string;\n\n    /**\n     * Состояние компонента\n     */\n    state: ConfirmationState | string;\n\n    /**\n     * Мобильная версия компонента для экрана\n     */\n    mobile?: boolean;\n\n    /**\n     * Позиционирование контента\n     */\n    alignContent?: 'left' | 'center';\n\n    /**\n     * Объект с текстами\n     */\n    texts?: ConfirmationTexts;\n\n    /**\n     * Количество символов, которое можно ввести в поле ввода подписания до того, как произойдет автоотправка\n     */\n    requiredCharAmount?: number;\n\n    /**\n     * Длительность обратного отсчета на кнопке повторного запроса сообщения, в милисекундах\n     */\n    countdownDuration?: number;\n\n    /**\n     * Продолжительность блокировки формы (ms)\n     */\n    tempBlockDuration?: number;\n\n    /**\n     * Номер телефона, на который отправлен код\n     */\n    phone?: string;\n\n    /**\n     * Не осталось попыток ввода кода\n     */\n    blockSmsRetry?: boolean;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    dataTestId?: string;\n\n    /**\n     * Сss класс для стилизации общей обёртки\n     */\n    className?: string;\n\n    /**\n     * Флаг - нужно ли очищать код при возникновении ошибки\n     */\n    clearCodeOnError?: boolean;\n\n    /**\n     * Функция обновления состояния компонента\n     */\n    onChangeState: (state: ConfirmationState | string) => void;\n\n    /**\n     * Функция обновления состояния компонента\n     */\n    onChangeScreen: (state: ConfirmationScreen | string) => void;\n\n    /**\n     * Обработчик события завершения ввода кода подписания\n     */\n    onInputFinished: (code: string) => void;\n\n    /**\n     * Обработчик события нажатия на кнопку \"Запросить код\"\n     */\n    onSmsRetryClick: () => void;\n\n    /**\n     * Клик по кнопке \"Понятно\" на экране фатальной ошибки\n     */\n    onFatalErrorOkButtonClick?: () => void;\n\n    /**\n     * Временная блокировка формы закончилась\n     */\n    onTempBlockFinished?: () => void;\n\n    /**\n     * Возввращает объект, где ключ - название экрана (screen), значение - компонент для экрана\n     */\n    getScreensMap?: (defaulScreensMap: ScreensMap) => ScreensMap;\n\n    /**\n     * Дочерние элементы.\n     */\n    children?: ReactNode;\n\n    /**\n     * Скрыть секцию с повторной отправкой кода\n     * @default false\n     */\n    hideCountdownSection?: boolean;\n\n    /**\n     * Контрольная точка для кнопки, с нее начинается desktop версия\n     * @default 1024\n     */\n    breakpoint?: number;\n};\n\nexport type TConfirmationContext = Required<\n    Pick<\n        ConfirmationProps,\n        | 'alignContent'\n        | 'texts'\n        | 'state'\n        | 'screen'\n        | 'requiredCharAmount'\n        | 'onInputFinished'\n        | 'countdownDuration'\n        | 'onChangeState'\n        | 'onSmsRetryClick'\n        | 'onChangeScreen'\n        | 'onFatalErrorOkButtonClick'\n        | 'tempBlockDuration'\n        | 'hideCountdownSection'\n    >\n> &\n    Pick<\n        ConfirmationProps,\n        'phone' | 'blockSmsRetry' | 'onTempBlockFinished' | 'clearCodeOnError'\n    > & {\n        timeLeft: number;\n    } & {\n        /**\n         * Контрольная точка для кнопки, с нее начинается desktop версия\n         * @default 1024\n         */\n        breakpoint?: number;\n    };\n\nexport type ConfirmationTexts = {\n    /**\n     * Экран INITIAL\n     */\n    title?: ReactNode; // заголовок\n    codeError?: string; // ошибка проверки кода\n    codeChecking?: string; // код проверяется\n    codeSending?: string; // код отправляется\n    codeSended?: string; // код отправлен\n    buttonRetry?: string; // кнопка повторной отправки кода\n    linkToHint?: string; // ссылка на экран HINT\n    noAttemptsLeft?: string; // не осталось попыток запроса кода\n    countdown?: string; // 'запросить повторно можно через'\n\n    /**\n     * Экран HINT\n     */\n    hintButton?: string; // кнопка 'Вернуться'\n\n    /**\n     * Экран FATAL_ERROR\n     */\n    fatalErrorTitle?: ReactNode; // заголовок\n    fatalErrorDescription?: ReactNode; // описание\n    fatalErrorButton?: string; // кнопка\n\n    /**\n     * Экран TEMP_BLOCK\n     */\n    tempBlockTitle?: ReactNode; // заголовок\n    tempBlockDescription?: ReactNode; // описание\n};\n\nexport type ConfirmationScreen =\n    | 'INITIAL' // начальный экран\n    | 'HINT' // экран \"Не приходит смс?\"\n    | 'FATAL_ERROR' // экран критической ошибки\n    | 'TEMP_BLOCK'; // экран временной блокировки\n\nexport type ConfirmationState =\n    | 'INITIAL' // начальное состояние\n    | 'CODE_CHECKING' // проверка кода\n    | 'CODE_SENDING' // повторная отправка кода\n    | 'CODE_ERROR'; // ошибка, когда ввели неверный код\n\nexport type ScreensMap = {\n    [key: string]: ComponentType;\n};\n\nexport const defaultTexts = {\n    title: 'Введите код из\\xa0сообщения',\n    codeError: 'Код введён неверно',\n    codeChecking: '',\n    codeSending: '',\n    buttonRetry: 'Запросить код повторно',\n    linkToHint: 'Не\\xa0приходит сообщение?',\n    hintButton: 'Вернуться к\\xa0вводу кода',\n    noAttemptsLeft: 'Не\\xa0осталось попыток запроса кода',\n    fatalErrorTitle: 'Ввести код больше нельзя',\n    fatalErrorDescription:\n        'Вы\\xa0ввели код неверно более 5\\xa0раз. В\\xa0целях безопасности мы\\xa0ограничили дальнейший ввод.',\n    fatalErrorButton: 'Понятно',\n    tempBlockTitle: 'Превышено количество попыток запроса кода',\n    tempBlockDescription: 'Повторное подтверждение кодом будет возможно через 24\\xa0часа',\n    codeSended: 'Код выслан',\n    countdown: 'Запросить повторно можно через',\n};\n","import { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { ConfirmationProps } from './types';\n\n/**\n * Форматирование миллисекунд в hh:mm:ss.\n *\n * @param {Number} ms миллисекунды\n * @returns {String} время в формате mm:ss\n */\nexport function formatMsAsMinutes(ms: number) {\n    const totalSeconds = Math.ceil(ms / 1000);\n    const totalMinutes = Math.floor(totalSeconds / 60);\n    const totalHours = Math.floor(totalMinutes / 60);\n\n    const seconds = totalSeconds % 60;\n    const paddedSeconds = `00${seconds}`.slice(-2);\n\n    if (totalHours > 0) {\n        const minutes = totalMinutes % 60;\n\n        const paddedMinutes = `00${minutes}`.slice(-2);\n        const paddedHours = `00${totalHours}`.slice(-2);\n\n        return `${paddedHours}:${paddedMinutes}:${paddedSeconds}`;\n    }\n\n    const paddedMinutes = `00${totalMinutes}`.slice(-2);\n\n    return `${paddedMinutes}:${paddedSeconds}`;\n}\n\ntype UseCountdown = (countdownDuration: number, tick?: number) => [number, () => void, () => void];\n\n/**\n * Возвращает время, которое осталось до истечения таймера в ms\n */\nexport const useCountdown: UseCountdown = (countdownDuration, tick = 1000) => {\n    const timerId = useRef(0);\n\n    const start = useRef(0);\n\n    const [timePassed, setTimePassed] = useState(0);\n\n    const stopTimer = useCallback(() => {\n        window.clearInterval(timerId.current);\n    }, []);\n\n    const updateProgress = useCallback(() => {\n        const passed = Date.now() - start.current;\n\n        if (passed >= countdownDuration) {\n            stopTimer();\n\n            setTimePassed(countdownDuration);\n        } else {\n            setTimePassed(passed);\n        }\n    }, [countdownDuration, stopTimer]);\n\n    const startTimer = useCallback(() => {\n        stopTimer();\n\n        start.current = Date.now();\n\n        updateProgress();\n\n        timerId.current = window.setInterval(updateProgress, tick);\n    }, [stopTimer, updateProgress, tick]);\n\n    const timeLeft = countdownDuration - timePassed;\n\n    useEffect(\n        () => () => {\n            stopTimer();\n        },\n        [stopTimer],\n    );\n\n    return [timeLeft, startTimer, stopTimer];\n};\n\nexport const ONE_DAY = 24 * 60 * 60 * 1000;\nexport const ONE_MINUTE = 60 * 1000;\n\ntype UseConfirmationParams = {\n    state?: ConfirmationProps['state'];\n    screen?: ConfirmationProps['screen'];\n    blockSmsRetry?: ConfirmationProps['blockSmsRetry'];\n};\n\nexport const useConfirmation = ({ state, screen, blockSmsRetry }: UseConfirmationParams = {}) => {\n    const [confirmationState, setConfirmationState] = useState(state ?? 'INITIAL');\n    const [confirmationScreen, setConfirmationScreen] = useState(screen ?? 'INITIAL');\n    const [confirmationBlockSmsRetry, setConfirmationBlockSmsRetry] = useState(\n        blockSmsRetry ?? false,\n    );\n\n    return {\n        confirmationState,\n        confirmationScreen,\n        confirmationBlockSmsRetry,\n        setConfirmationState,\n        setConfirmationScreen,\n        setConfirmationBlockSmsRetry,\n    };\n};\n"],"names":["ConfirmationDesktop","props","_jsx","BaseConfirmation","_objectSpread","ConfirmationMobile","_ref","className","resProps","_objectWithoutProperties","_excluded","mobile","cn","styles","ConfirmationResponsive","_ref$breakpoint","breakpoint","restProps","_useMedia","useMedia","concat","_slicedToArray","confirmationScreens","INITIAL","Initial","HINT","Hint","FATAL_ERROR","FatalError","TEMP_BLOCK","TempBlock","state","screen","_ref$alignContent","alignContent","_ref$requiredCharAmou","children","requiredCharAmount","_ref$countdownDuratio","countdownDuration","ONE_MINUTE","_ref$tempBlockDuratio","tempBlockDuration","ONE_DAY","phone","blockSmsRetry","dataTestId","getScreensMap","onInputFinished","onChangeState","onSmsRetryClick","onChangeScreen","onFatalErrorOkButtonClick","onTempBlockFinished","_ref$clearCodeOnError","clearCodeOnError","_ref$hideCountdownSec","hideCountdownSection","_useCountdown","useCountdown","_useCountdown2","timeLeft","startTimer","stopTimer","prevState","usePrevious","useEffect","includes","contextValue","texts","defaultTexts","handleInputFinished","code","handleSmsRetry","handleFatalErrorOkButtonClick","CurrentScreen","ConfirmationContext","value","CIRCUMFERENCE","CENTER","Math","PI","CountdownLoader","progress","min","strokeDasharray","toFixed","strokeDashoffset","width","height","viewBox","cx","SIZE","cy","r","transform","Header","Typography","_defineProperty","tag","color","CountdownSection","_cn2","codeSendHintVisible","timePassed","processing","handleSmsRetryClick","_useContext","useContext","breakpointProps","renderText","text","_cn","view","codeSended","_jsxs","Loader","codeChecking","codeSending","noAttemptsLeft","Button","size","onClick","buttonRetry","countdown","formatMsAsMinutes","inputRef","useRef","_useState","useState","_useState2","setCodeSendHintVisible","timerId","handleSmsHintLinkClick","clearTimer","useCallback","window","clearTimeout","current","focus","useLayoutEffect","setTimeout","title","CodeInput","disabled","error","getCodeInputError","codeError","ref","fields","onComplete","handleInputComplete","onChange","handleInputChange","onErrorAnimationEnd","handleErrorAnimationEnd","reset","ButtonMobile","linkToHint","Link","pseudo","href","underline","handleReturnButtonClick","hintButton","fatalErrorTitle","fatalErrorDescription","fatalErrorButton","tempBlockTitle","tempBlockDescription","mockFn","createContext","ms","totalSeconds","ceil","totalMinutes","floor","totalHours","paddedSeconds","slice","paddedMinutes","paddedHours","tick","arguments","length","undefined","start","setTimePassed","clearInterval","updateProgress","passed","Date","now","setInterval","useConfirmation","_useState3","_useState4","confirmationState","setConfirmationState","_useState5","_useState6","confirmationScreen","setConfirmationScreen","_useState7","_useState8","confirmationBlockSmsRetry","setConfirmationBlockSmsRetry"],"sourceRoot":""}