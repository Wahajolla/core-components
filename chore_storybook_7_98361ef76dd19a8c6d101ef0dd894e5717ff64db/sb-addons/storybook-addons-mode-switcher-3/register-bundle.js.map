{
  "version": 3,
  "sources": ["global-externals:react", "global-externals:@storybook/addons", "global-externals:@storybook/components", "../../../.storybook/metrics/trackEvent.ts", "../../../.storybook/metrics/constant.js", "../../../.storybook/metrics/utils.js", "../../../.storybook/metrics/observers.js", "../../../.storybook/addons/utils.js", "../../../.storybook/addons/mode-switcher/register.js"],
  "sourcesContent": ["export default __REACT__;\nconst { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, version } = __REACT__;\nexport { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, version };", "export default __STORYBOOKADDONS__;\nconst { addons, types, mockChannel } = __STORYBOOKADDONS__;\nexport { addons, types, mockChannel };", "export default __STORYBOOKCOMPONENTS__;\nconst { A, ActionBar, AddonPanel, Badge, Bar, Blockquote, Button, Code, DL, Div, DocumentWrapper, ErrorFormatter, FlexBar, Form, H1, H2, H3, H4, H5, H6, HR, IconButton, IconButtonSkeleton, Icons, Img, LI, Link, ListItem, Loader, OL, P, Placeholder, Pre, ResetWrapper, ScrollArea, Separator, Spaced, Span, StorybookIcon, StorybookLogo, Symbols, SyntaxHighlighter, TT, TabBar, TabButton, TabWrapper, Table, Tabs, TabsState, TooltipLinkList, TooltipMessage, TooltipNote, UL, WithTooltip, WithTooltipPure, Zoom, codeCommon, components, createCopyToClipboardFunction, getStoryHref, icons, interleaveSeparators, nameSpaceClassNames, resetComponents, withReset } = __STORYBOOKCOMPONENTS__;\nexport { A, ActionBar, AddonPanel, Badge, Bar, Blockquote, Button, Code, DL, Div, DocumentWrapper, ErrorFormatter, FlexBar, Form, H1, H2, H3, H4, H5, H6, HR, IconButton, IconButtonSkeleton, Icons, Img, LI, Link, ListItem, Loader, OL, P, Placeholder, Pre, ResetWrapper, ScrollArea, Separator, Spaced, Span, StorybookIcon, StorybookLogo, Symbols, SyntaxHighlighter, TT, TabBar, TabButton, TabWrapper, Table, Tabs, TabsState, TooltipLinkList, TooltipMessage, TooltipNote, UL, WithTooltip, WithTooltipPure, Zoom, codeCommon, components, createCopyToClipboardFunction, getStoryHref, icons, interleaveSeparators, nameSpaceClassNames, resetComponents, withReset };", "import { CATEGORY } from './constant';\n\ntype CategoryType = typeof CATEGORY;\n\ntype Nullable<T> = T | null;\n\ntype EventParams = {\n    /**\n     * \u041A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F \u0441\u043E\u0431\u044B\u0442\u0438\u044F\n     */\n    category: CategoryType[keyof CategoryType];\n\n    /**\n     * \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 click, dnd\n     * @default 'click'\n     */\n    action?: string;\n\n    /**\n     * \u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\n     */\n    label?: Nullable<string>;\n\n    /**\n     * \u0421\u0432\u043E\u0439\u0441\u0442\u0432\u043E\n     */\n    property?: Nullable<string>;\n\n    /**\n     * \u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435\n     */\n    value?: Nullable<string>;\n\n    /**\n     * \u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0435 \u0434\u0430\u043D\u043D\u044B\u0435\n     */\n    dimension_1?: Nullable<string>;\n    /**\n     * \u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0435 \u0434\u0430\u043D\u043D\u044B\u0435\n     */\n    dimension_2?: Nullable<string>;\n};\n\nexport const trackEvent = ({\n    category,\n    action = 'click',\n    label,\n    property,\n    value,\n    dimension_1,\n    dimension_2,\n}: EventParams) => {\n    window.sp('trackStructEvent', category, action, label, property, value, [\n        {\n            schema: 'iglu:com.alfabank/custom_dimension/jsonschema/1-0-0',\n            data: {\n                '1': dimension_1,\n                '2': dimension_2,\n            },\n        },\n    ]);\n};\n", "export const DEFAULT_ELEMENT = 0;\nexport const CATEGORY = {\n    USERS: 'users',\n    PAGE: 'page',\n    EDITOR: 'editor',\n    TAB: 'tab',\n    SWITCHER: 'switcher',\n    PATH: 'path',\n    SEARCH_VALUE: 'search value',\n};\n\nexport const ACTIONS = {\n    SEARCH_VALUE: '\u041F\u043E\u0438\u0441\u043A \u0447\u0435\u0440\u0435\u0437 \u043F\u043E\u0438\u0441\u043A\u043E\u0432\u0443\u044E \u0441\u0442\u0440\u043E\u043A\u0443',\n    FOLDER: '\u0421\u0432\u043E\u0440\u0430\u0447\u0438\u0432\u0430\u043D\u0438\u0435 \u043F\u0430\u043F\u043A\u0438',\n};\n\nexport const LINK = {\n    DIRECT: '\u041F\u0440\u044F\u043C\u0430\u044F \u0441\u0441\u044B\u043B\u043A\u0430',\n    DEFAULT: '\u0421\u0441\u044B\u043B\u043A\u0430 \u043D\u0430 \u0433\u043B\u0430\u0432\u043D\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443',\n};\n", "import { LINK } from './constant';\n\nconst { DEFAULT, DIRECT } = LINK;\n\nexport const handleLinks = (url) => {\n    if (url.includes('page')) {\n        return `${DEFAULT}`;\n    }\n    return `${DIRECT}`;\n};\n\nexport const getCurrentUrlParams = () => {\n    return window.location.search;\n};\n\nexport const getPageNode = (param) => {\n    return document.querySelector(param);\n};\n", "import { getCurrentUrlParams, getPageNode, handleLinks } from './utils';\nimport { ACTIONS, CATEGORY, DEFAULT_ELEMENT } from './constant';\nimport { trackEvent } from './trackEvent';\n\nconst switcherState = {};\n\nconst { FOLDER, SEARCH_VALUE } = ACTIONS;\n\n/**\n * \u0421\u043B\u0435\u0434\u0438\u0442 \u0437\u0430 \u043F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u0440\u0435\u0436\u0438\u043C\u043E\u0432 \u0432\u044C\u044E\u0435\u0440\u0430 \u0434\u043B\u044F \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0430 (\u0434\u0435\u0441\u043A \u043C\u043E\u0431\u0430\u0439\u043B) \u0438 \u043E\u0442\u043A\u0440\u044B\u0442\u0438\u0435\u043C \u043A\u043E\u0434\u0430 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0430\n */\nconst createPreviewFrameComponentObserver = () => {\n    let observer = null;\n\n    return () => {\n        const disconnectObserver = () => {\n            if (observer) {\n                observer.disconnect();\n            }\n        };\n\n        if (observer) {\n            disconnectObserver();\n        }\n\n        const iframe = getPageNode('#storybook-preview-iframe');\n\n        if (!iframe) {\n            return;\n        }\n\n        const nodeList = iframe.contentDocument.querySelector('#docs-root');\n\n        const setupObserver = () => {\n            observer = new MutationObserver((mutations) => {\n                mutations.forEach((mutation) => {\n                    const { type, target } = mutation;\n\n                    if (type === 'attributes' && target?.tagName === 'BUTTON') {\n                        const isActive = target?.classList.contains('active');\n\n                        if (isActive) {\n                            const { textContent } = getPageNode('[data-selected=\"true\"]');\n\n                            trackEvent({\n                                category: CATEGORY.EDITOR,\n                                label: `${target?.title}`,\n                                value: textContent,\n                            });\n                        }\n                    }\n                });\n            });\n\n            const observerConfig = {\n                childList: true,\n                subtree: true,\n                attributes: true,\n            };\n\n            observer.observe(nodeList, observerConfig);\n        };\n\n        setupObserver();\n    };\n};\n\nexport const observePreviewFrameComponent = createPreviewFrameComponentObserver();\n\n/**\n * \u0421\u043B\u0435\u0434\u0438\u0442 \u0437\u0430 \u043E\u0442\u043A\u0440\u044B\u0442\u0438\u0435\u043C \u0442\u0430\u0431\u0430 \u0434\u043E\u043A\u0441/\u043A\u0430\u043D\u0432\u0430\u0441\n */\nexport const observePreviewModeTabs = () => {\n    const nodeMain = getPageNode('[role=\"main\"]');\n\n    if (!nodeMain) {\n        return;\n    }\n\n    nodeMain.addEventListener('click', (event) => {\n        const value = event?.target.innerHTML;\n        const { textContent } = getPageNode('[data-selected=\"true\"]');\n\n        if (value === 'Canvas') {\n            trackEvent({\n                category: CATEGORY.TAB,\n                action: `${value} view`,\n                label: textContent,\n            });\n            return;\n        }\n\n        if (value === 'Docs') {\n            trackEvent({\n                category: CATEGORY.TAB,\n                action: `${value} view`,\n                label: textContent,\n            });\n        }\n    });\n};\n\n/**\n * \u0421\u043B\u0435\u0434\u0438\u0442 \u0437\u0430 \u043F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435\u043C \u0440\u0435\u0436\u0438\u043C\u043E\u0432 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0430\n */\nexport const observeSwitcher = () => {\n    const themeSelect = getPageNode('#storybook-theme-switcher');\n    const modeSelect = getPageNode('#storybook-mode-switcher');\n\n    const handleSelect = (key) => {\n        return (event) => {\n            const { textContent } = getPageNode('[data-selected=\"true\"]');\n            const target = event.target;\n\n            if (target) {\n                switcherState[key] = target.value;\n\n                const { mode, theme } = switcherState;\n\n                trackEvent({\n                    category: CATEGORY.SWITCHER,\n                    label: textContent,\n                    dimension_1: theme,\n                    dimension_2: mode,\n                });\n            }\n        };\n    };\n\n    if (themeSelect) {\n        switcherState.theme = themeSelect[DEFAULT_ELEMENT].value;\n\n        themeSelect.addEventListener('change', handleSelect('theme'));\n    }\n\n    if (modeSelect) {\n        switcherState.mode = modeSelect[DEFAULT_ELEMENT].value;\n\n        modeSelect.addEventListener('change', handleSelect('mode'));\n    }\n};\n\n/**\n * \u0421\u043B\u0435\u0434\u0438\u0442 \u0437\u0430 \u043F\u0435\u0440\u0435\u0445\u043E\u0434\u0430\u043C\u0438 \u043F\u043E \u043F\u0440\u044F\u043C\u044B\u043C \u0441\u0441\u044B\u043B\u043A\u0430\u043C\n */\nexport const observeLink = () => {\n    const link = handleLinks(getCurrentUrlParams());\n\n    trackEvent({ category: CATEGORY.USERS, action: 'Page view', label: link });\n};\n\n/**\n * \u0421\u043B\u0435\u0434\u0438\u0442 \u0437\u0430 \u0432\u044B\u0437\u043E\u0432\u043E\u043C \u043F\u043E\u0438\u0441\u043A\u0430, \u0447\u0442\u043E \u0432\u0431\u0438\u0432\u0430\u044E\u0442 \u0432 \u043F\u043E\u0438\u0441\u043A, \u0441\u0432\u043E\u0440\u0430\u0447\u0438\u0432\u0430\u043D\u0438\u0435 \u043F\u0430\u043F\u043E\u043A, \u043E\u0442\u043A\u0440\u044B\u0442\u0438\u0435 \u043A\u043E\u043D\u043A\u0440\u0435\u0442\u043D\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u044B\n */\nexport const observeExplorerMenu = () => {\n    let isSearchValueFocusing;\n\n    const titlePageNode = getPageNode('#storybook-explorer-tree');\n    const input = getPageNode('#storybook-explorer-searchfield');\n    const { textContent } = getPageNode('[data-selected=\"true\"]');\n\n    const { mode, theme } = switcherState;\n\n    trackEvent({\n        category: CATEGORY.PAGE,\n        label: textContent,\n        dimension_1: theme,\n        dimension_2: mode,\n    });\n\n    if (input) {\n        input.addEventListener('focusin', () => {\n            trackEvent({ category: CATEGORY.PATH, label: `${SEARCH_VALUE}` });\n\n            isSearchValueFocusing = true;\n        });\n    }\n\n    if (!titlePageNode) {\n        return;\n    }\n\n    const setupObserver = () => {\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                const { target } = mutation;\n                const isSelectedPage = target?.getAttribute('data-selected') === 'true';\n                const isSelectedFolder = target?.hasAttribute('aria-expanded');\n                const { mode, theme } = switcherState;\n\n                if (target?.tagName === 'A' && isSelectedPage) {\n                    if (isSearchValueFocusing) {\n                        trackEvent({\n                            category: CATEGORY.SEARCH_VALUE,\n                            label: target.textContent,\n                        });\n                        isSearchValueFocusing = false;\n                    }\n\n                    trackEvent({\n                        category: CATEGORY.PAGE,\n                        label: target.textContent,\n                        dimension_1: theme,\n                        dimension_2: mode,\n                    });\n\n                    observePreviewFrameComponent();\n                    return;\n                }\n\n                if (target?.tagName === 'BUTTON' && isSelectedFolder) {\n                    trackEvent({\n                        category: CATEGORY.PATH,\n                        label: `${FOLDER}`,\n                        value: target.textContent,\n                    });\n                }\n            });\n        });\n\n        const observerConfig = {\n            childList: true,\n            subtree: true,\n            attributes: true,\n        };\n\n        observer.observe(titlePageNode, observerConfig);\n    };\n\n    setupObserver();\n};\n", "import { setMetricConfig, setObserveConnection } from '../metrics';\n\nexport const MODE_COLORS_TAG_ID = 'mode-colors';\n\nexport const getStoryDoc = () => document.querySelector('iframe').contentDocument;\n\nexport const getMobileFrames = () =>\n    Array.from(document.querySelectorAll('iframe[src*=mobileframe]'));\n\nexport function getOrCreateStyleTag(id, beforeId, doc = getStoryDoc()) {\n    const existingTag = doc.getElementById(id);\n    if (existingTag) {\n        return existingTag;\n    }\n\n    const styleTag = doc.createElement('style');\n    styleTag.id = id;\n\n    const before = beforeId ? doc.getElementById(beforeId) : null;\n\n    if (before) {\n        doc.body.insertBefore(styleTag, before);\n    } else {\n        const firstBodyChild = doc.body.firstChild;\n        doc.body.insertBefore(styleTag, firstBodyChild);\n    }\n\n    return styleTag;\n}\n\nexport function setGuidelinesStyles(styles) {\n    getOrCreateStyleTag('guidelines', null, document).innerHTML = styles;\n}\n\nexport const extractMixinContent = (css) => css.trim().split('\\n').slice(1, -1).join('\\n');\n\nexport const setMetricsConnection = () => {\n    setMetricConfig();\n    setObserveConnection();\n};\n\nexport function rmCommentsFromCss(css) {\n    return css.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n}\n", "import React, { useCallback, useState } from 'react';\nimport { addons, types } from '@storybook/addons';\nimport { Form } from '@storybook/components';\nimport { getStoryDoc } from '../utils';\n\nexport const ADDON_ID = 'mode-switcher';\n\nconst MODES = ['light', 'dark'];\n\nconst createModeChangeEvent = (newMode) =>\n    new CustomEvent('mode-change', { bubbles: true, detail: { mode: newMode } });\n\nconst Addon = () => {\n    const [mode, setMode] = useState('light');\n\n    const handleChange = useCallback((event) => {\n        const newMode = event.target.value;\n\n        setMode(newMode);\n\n        const modeChangeEvent = createModeChangeEvent(newMode);\n\n        document.body.dispatchEvent(modeChangeEvent);\n        getStoryDoc().body.dispatchEvent(modeChangeEvent);\n    }, []);\n\n    return (\n        <div className='tool'>\n            <Form.Select\n                id='storybook-mode-switcher'\n                size={1}\n                onChange={handleChange}\n                className='select'\n                value={mode}\n            >\n                {MODES.map((mode) => (\n                    <option value={mode} key={mode}>\n                        {mode}\n                    </option>\n                ))}\n            </Form.Select>\n        </div>\n    );\n};\n\naddons.register(ADDON_ID, () => {\n    addons.add(ADDON_ID, {\n        type: types.TOOL,\n        match: () => true,\n        render: () => <Addon />,\n        paramKey: ADDON_ID,\n    });\n});\n"],
  "mappings": "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",
  "names": ["react_default", "Children", "Component", "Fragment", "Profiler", "PureComponent", "StrictMode", "Suspense", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "cloneElement", "createContext", "createElement", "createFactory", "createRef", "forwardRef", "isValidElement", "lazy", "memo", "useCallback", "useContext", "useDebugValue", "useEffect", "useImperativeHandle", "useLayoutEffect", "useMemo", "useReducer", "useRef", "useState", "version", "addons_default", "addons", "types", "mockChannel", "components_default", "A", "ActionBar", "AddonPanel", "Badge", "Bar", "Blockquote", "Button", "Code", "DL", "Div", "DocumentWrapper", "ErrorFormatter", "FlexBar", "Form", "H1", "H2", "H3", "H4", "H5", "H6", "HR", "IconButton", "IconButtonSkeleton", "Icons", "Img", "LI", "Link", "ListItem", "Loader", "OL", "P", "Placeholder", "Pre", "ResetWrapper", "ScrollArea", "Separator", "Spaced", "Span", "StorybookIcon", "StorybookLogo", "Symbols", "SyntaxHighlighter", "TT", "TabBar", "TabButton", "TabWrapper", "Table", "Tabs", "TabsState", "TooltipLinkList", "TooltipMessage", "TooltipNote", "UL", "WithTooltip", "WithTooltipPure", "Zoom", "codeCommon", "components", "createCopyToClipboardFunction", "getStoryHref", "icons", "interleaveSeparators", "nameSpaceClassNames", "resetComponents", "withReset", "trackEvent", "category", "action", "label", "property", "value", "dimension_1", "dimension_2", "CATEGORY", "ACTIONS", "LINK", "DEFAULT", "DIRECT", "LINK", "getPageNode", "param", "FOLDER", "SEARCH_VALUE", "ACTIONS", "createPreviewFrameComponentObserver", "observer", "iframe", "getPageNode", "nodeList", "mutations", "mutation", "type", "target", "textContent", "trackEvent", "CATEGORY", "observerConfig", "observePreviewFrameComponent", "getStoryDoc", "ADDON_ID", "MODES", "createModeChangeEvent", "newMode", "Addon", "mode", "setMode", "useState", "handleChange", "useCallback", "event", "modeChangeEvent", "getStoryDoc", "react_default", "Form", "addons", "types"]
}
