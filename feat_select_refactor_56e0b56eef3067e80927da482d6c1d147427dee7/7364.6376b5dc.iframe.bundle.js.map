{"version":3,"file":"7364.6376b5dc.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./packages/select/src/components/native-select/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/base-select/index.module.css?7b4b","webpack://@alfalab/core-components/./packages/select/src/components/base-select/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/Component.desktop.tsx","webpack://@alfalab/core-components/./packages/select/src/Component.mobile.tsx","webpack://@alfalab/core-components/./packages/select/src/components/arrow/index.module.css?9ca6","webpack://@alfalab/core-components/./packages/select/src/components/arrow/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/base-select-mobile/footer/index.module.css?36b8","webpack://@alfalab/core-components/./packages/select/src/components/base-select-mobile/footer/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/base-select-mobile/index.module.css?d71b","webpack://@alfalab/core-components/./packages/select/src/components/base-select-mobile/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/field/index.module.css?c913","webpack://@alfalab/core-components/./packages/select/src/components/field/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/optgroup/index.module.css?b6c6","webpack://@alfalab/core-components/./packages/select/src/components/optgroup/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/checkmark/index.module.css?72e3","webpack://@alfalab/core-components/./packages/select/src/components/checkmark/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/checkmark-mobile/index.module.css?3860","webpack://@alfalab/core-components/./packages/select/src/components/checkmark-mobile/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/option/index.module.css?74cb","webpack://@alfalab/core-components/./packages/select/src/components/option/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/options-list/index.module.css?7337","webpack://@alfalab/core-components/./packages/select/src/components/options-list/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/virtual-options-list/index.module.css?31c5","webpack://@alfalab/core-components/./packages/select/src/components/virtual-options-list/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/consts.ts","webpack://@alfalab/core-components/./packages/select/src/Component.responsive.tsx","webpack://@alfalab/core-components/./packages/select/src/Component.modal.mobile.tsx","webpack://@alfalab/core-components/./packages/select/src/presets/useSelectWithApply/options-list-with-apply/footer/index.module.css?44c0","webpack://@alfalab/core-components/./packages/select/src/presets/useSelectWithApply/options-list-with-apply/footer/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/presets/useSelectWithApply/options-list-with-apply/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/presets/useSelectWithApply/hook.tsx","webpack://@alfalab/core-components/./packages/select/src/presets/useSelectWithApply/options-list-with-apply/header/index.module.css?11f8","webpack://@alfalab/core-components/./packages/select/src/presets/useSelectWithApply/options-list-with-apply/header/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/utils.ts","webpack://@alfalab/core-components/./packages/utils/getDataTestId.ts"],"sourcesContent":["import React, { forwardRef, SelectHTMLAttributes, useCallback } from 'react';\n\nimport { GroupShape, OptionShape } from '../../typings';\nimport { isGroup } from '../../utils';\n\nexport type NativeSelectProps = SelectHTMLAttributes<HTMLSelectElement> & {\n    /**\n     * Список вариантов выбора\n     */\n    options: Array<OptionShape | GroupShape>;\n\n    /**\n     * Значение селекта\n     */\n    value: string | string[];\n};\n\nconst Option = ({ option }: { option: OptionShape }) => (\n    <option value={option.key} disabled={option.disabled}>\n        {typeof option.content === 'string' ? option.content : option.key}\n    </option>\n);\n\nconst Group = ({ label, options }: GroupShape) => (\n    <optgroup label={label}>\n        {options.map((option) => (\n            <Option option={option} key={option.key} />\n        ))}\n    </optgroup>\n);\n\nexport const NativeSelect = forwardRef<HTMLSelectElement, NativeSelectProps>(\n    ({ className, disabled, multiple, value, name, options, onChange, ...restProps }, ref) => {\n        const handleClick = useCallback((event: React.MouseEvent<HTMLSelectElement>) => {\n            event.stopPropagation();\n        }, []);\n\n        return (\n            <select\n                className={className}\n                disabled={disabled}\n                multiple={multiple}\n                name={name}\n                value={value}\n                onChange={onChange}\n                onClick={handleClick}\n                ref={ref}\n                {...restProps}\n            >\n                {options.map((option) =>\n                    isGroup(option) ? (\n                        <Group {...option} key={option.label} />\n                    ) : (\n                        <Option option={option} key={option.key} />\n                    ),\n                )}\n            </select>\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_p63D9\",\"popoverInner\":\"popoverInner_gx5Ai\",\"optionsList\":\"optionsList_Ni45G\",\"optionsListBorder\":\"optionsListBorder_QZAA4\",\"nativeSelect\":\"nativeSelect_rLoGL\",\"block\":\"block_wKlh2\"};","/* eslint-disable no-nested-ternary */\nimport React, {\n    FocusEvent,\n    forwardRef,\n    KeyboardEvent,\n    MouseEvent,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { ResizeObserver as ResizeObserverPolyfill } from '@juggle/resize-observer';\nimport cn from 'classnames';\nimport {\n    useCombobox,\n    useMultipleSelection,\n    UseMultipleSelectionProps,\n    UseMultipleSelectionState,\n} from 'downshift';\n\nimport { Popover } from '@alfalab/core-components-popover';\nimport { useLayoutEffect_SAFE_FOR_SSR } from '@alfalab/hooks';\n\nimport { getDataTestId } from '../../../../utils';\nimport { AnyObject, BaseSelectProps, OptionShape } from '../../typings';\nimport { processOptions } from '../../utils';\nimport { NativeSelect } from '../native-select';\n\nimport styles from './index.module.css';\n\nexport const BaseSelect = forwardRef(\n    (\n        {\n            dataTestId,\n            className,\n            fieldClassName,\n            optionsListClassName,\n            optionClassName,\n            popperClassName,\n            options,\n            autocomplete = false,\n            multiple = false,\n            allowUnselect = false,\n            disabled = false,\n            closeOnSelect = !multiple,\n            circularNavigation = false,\n            nativeSelect = false,\n            defaultOpen = false,\n            open: openProp,\n            popoverPosition = 'bottom-start',\n            preventFlip = true,\n            optionsListWidth = 'content',\n            name,\n            id,\n            selected,\n            size = 's',\n            optionsSize = size,\n            error,\n            hint,\n            block,\n            label,\n            labelView,\n            placeholder,\n            fieldProps = {},\n            optionsListProps = {},\n            optionProps = {},\n            valueRenderer,\n            onChange,\n            onOpen,\n            onFocus,\n            onBlur,\n            onScroll,\n            Arrow,\n            Field = () => null,\n            OptionsList = () => null,\n            Optgroup = () => null,\n            Option = () => null,\n            updatePopover,\n            zIndexPopover,\n            showEmptyOptionsList = false,\n            visibleOptions,\n        }: BaseSelectProps,\n        ref,\n    ) => {\n        const rootRef = useRef<HTMLLabelElement>(null);\n        const fieldRef = useRef<HTMLInputElement>(null);\n        const listRef = useRef<HTMLDivElement>(null);\n        const initiatorRef = useRef<OptionShape | null>(null);\n\n        const itemToString = (option: OptionShape) => (option ? option.key : '');\n\n        const { flatOptions, selectedOptions } = useMemo(\n            () => processOptions(options, selected),\n            [options, selected],\n        );\n\n        const useMultipleSelectionProps: UseMultipleSelectionProps<OptionShape> = {\n            itemToString,\n            onSelectedItemsChange: (changes) => {\n                if (onChange) {\n                    const { selectedItems = [] } = changes;\n\n                    onChange({\n                        selectedMultiple: selectedItems,\n                        selected: selectedItems.length ? selectedItems[0] : null,\n                        initiator: initiatorRef.current,\n                        name,\n                    });\n\n                    initiatorRef.current = null;\n                }\n            },\n            stateReducer: (state, actionAndChanges) => {\n                const { type, changes } = actionAndChanges;\n\n                if (\n                    !allowUnselect &&\n                    type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace\n                ) {\n                    return state;\n                }\n\n                return changes as UseMultipleSelectionState<OptionShape>;\n            },\n        };\n\n        if (selected !== undefined) {\n            useMultipleSelectionProps.selectedItems = selectedOptions;\n        }\n\n        const {\n            selectedItems,\n            addSelectedItem,\n            setSelectedItems,\n            removeSelectedItem,\n            getDropdownProps,\n        } = useMultipleSelection(useMultipleSelectionProps);\n\n        const {\n            isOpen: open,\n            getMenuProps,\n            getInputProps,\n            getItemProps,\n            getComboboxProps,\n            getLabelProps,\n            highlightedIndex,\n            toggleMenu,\n            openMenu,\n        } = useCombobox<OptionShape>({\n            id,\n            isOpen: openProp,\n            circularNavigation,\n            items: flatOptions,\n            itemToString,\n            defaultHighlightedIndex: selectedItems.length === 0 ? -1 : undefined,\n            onIsOpenChange: (changes) => {\n                if (onOpen) {\n                    /**\n                     *  Вызываем обработчик асинхронно.\n                     *\n                     * Иначе при клике вне открытого селекта сначала сработает onOpen, который закроет селект,\n                     * А затем сработает onClick кнопки открытия\\закрытия с open=false и в итоге селект откроется снова.\n                     */\n                    setTimeout(() => {\n                        onOpen({\n                            open: changes.isOpen,\n                            name,\n                        });\n                    }, 0);\n                }\n            },\n            stateReducer: (state, actionAndChanges) => {\n                const { type, changes } = actionAndChanges;\n                const { selectedItem } = changes;\n\n                switch (type) {\n                    case useCombobox.stateChangeTypes.InputKeyDownEnter:\n                    case useCombobox.stateChangeTypes.ItemClick:\n                        initiatorRef.current = selectedItem;\n\n                        if (selectedItem && !selectedItem.disabled) {\n                            const alreadySelected = selectedItems.includes(selectedItem);\n                            const allowRemove =\n                                allowUnselect || (multiple && selectedItems.length > 1);\n\n                            if (alreadySelected && allowRemove) {\n                                removeSelectedItem(selectedItem);\n                            }\n\n                            if (!alreadySelected) {\n                                if (multiple) {\n                                    addSelectedItem(selectedItem);\n                                } else {\n                                    setSelectedItems([selectedItem]);\n                                }\n                            }\n                        }\n\n                        return {\n                            ...changes,\n                            isOpen: !closeOnSelect,\n                            // при closeOnSelect === false - сохраняем подсвеченный индекс\n                            highlightedIndex:\n                                state.isOpen && !closeOnSelect\n                                    ? state.highlightedIndex\n                                    : changes.highlightedIndex,\n                        };\n                    default:\n                        return changes;\n                }\n            },\n        });\n\n        const menuProps = (getMenuProps as (options: object, additional: object) => AnyObject)(\n            { ref: listRef },\n            { suppressRefError: true },\n        );\n        const inputProps = getInputProps(getDropdownProps({ ref: mergeRefs([ref, fieldRef]) }));\n\n        const handleFieldFocus = (event: FocusEvent<HTMLDivElement | HTMLInputElement>) => {\n            if (onFocus) onFocus(event);\n\n            if (autocomplete && !open) {\n                openMenu();\n            }\n        };\n\n        const handleFieldBlur = (event: FocusEvent<HTMLDivElement | HTMLInputElement>) => {\n            const isNextFocusInsideList = listRef.current?.contains(\n                (event.relatedTarget || document.activeElement) as HTMLElement,\n            );\n\n            if (!isNextFocusInsideList) {\n                if (onBlur) onBlur(event);\n\n                inputProps.onBlur(event);\n            }\n        };\n\n        const handleFieldKeyDown = (event: KeyboardEvent<HTMLDivElement | HTMLInputElement>) => {\n            inputProps.onKeyDown(event);\n            if (autocomplete && !open && (event.key.length === 1 || event.key === 'Backspace')) {\n                // Для автокомплита - открываем меню при начале ввода\n                openMenu();\n            }\n\n            if (\n                [' ', 'Enter'].includes(event.key) &&\n                !autocomplete &&\n                !nativeSelect &&\n                (event.target as HTMLElement).tagName !== 'INPUT' &&\n                (event.target as HTMLElement).tagName !== 'BUTTON'\n            ) {\n                // Открываем\\закрываем меню по нажатию enter или пробела\n                event.preventDefault();\n                if (!open || highlightedIndex === -1) toggleMenu();\n            }\n        };\n\n        const handleFieldClick = (event: MouseEvent) => {\n            if (!autocomplete || (event.target as HTMLElement).tagName !== 'INPUT') {\n                toggleMenu();\n            } else {\n                openMenu();\n            }\n        };\n\n        const handleNativeSelectChange = useCallback(\n            (event: React.ChangeEvent<HTMLSelectElement>) => {\n                setSelectedItems(\n                    // eslint-disable-next-line\n                    [...(event.target.options as any)].reduce(\n                        (acc, option, index) =>\n                            option.selected ? acc.concat(flatOptions[index]) : acc,\n                        [],\n                    ),\n                );\n            },\n            [flatOptions, setSelectedItems],\n        );\n\n        const getOptionProps = useCallback(\n            (option: OptionShape, index: number) => ({\n                ...(optionProps as object),\n                className: optionClassName,\n                innerProps: getItemProps({\n                    index,\n                    item: option,\n                    disabled: option.disabled,\n                    onMouseDown: (event: MouseEvent) => event.preventDefault(),\n                }),\n                multiple,\n                index,\n                option,\n                size: optionsSize,\n                disabled: option.disabled,\n                highlighted: index === highlightedIndex,\n                selected: selectedItems.includes(option),\n                dataTestId: getDataTestId(dataTestId, 'option'),\n            }),\n            [\n                dataTestId,\n                getItemProps,\n                highlightedIndex,\n                multiple,\n                optionClassName,\n                optionProps,\n                optionsSize,\n                selectedItems,\n            ],\n        );\n\n        useEffect(() => {\n            if (defaultOpen) openMenu();\n        }, [defaultOpen, openMenu]);\n\n        useEffect(() => {\n            if (openProp) {\n                openMenu();\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        const calcOptionsListWidth = useCallback(() => {\n            if (listRef.current) {\n                const widthAttr = optionsListWidth === 'field' ? 'width' : 'minWidth';\n\n                const optionsListMinWidth = rootRef.current\n                    ? rootRef.current.getBoundingClientRect().width\n                    : 0;\n\n                listRef.current.setAttribute('style', '');\n                listRef.current.style[widthAttr] = `${optionsListMinWidth}px`;\n            }\n        }, [optionsListWidth]);\n\n        useEffect(() => {\n            const ResizeObserver = window.ResizeObserver || ResizeObserverPolyfill;\n            const observer = new ResizeObserver(calcOptionsListWidth);\n\n            if (rootRef.current) {\n                observer.observe(rootRef.current);\n            }\n\n            return () => {\n                observer.disconnect();\n            };\n        }, [calcOptionsListWidth, open, optionsListWidth]);\n\n        useLayoutEffect_SAFE_FOR_SSR(calcOptionsListWidth, [\n            open,\n            optionsListWidth,\n            options,\n            selectedItems,\n        ]);\n\n        const renderValue = useCallback(\n            () =>\n                selectedItems.map((option) => (\n                    <input type='hidden' name={name} value={option.key} key={option.key} />\n                )),\n            [selectedItems, name],\n        );\n\n        const renderNativeSelect = useCallback(() => {\n            const value = multiple\n                ? selectedItems.map((option) => option.key)\n                : (selectedItems[0] || {}).key;\n\n            return (\n                <NativeSelect\n                    {...menuProps}\n                    className={styles.nativeSelect}\n                    disabled={disabled}\n                    multiple={multiple}\n                    name={name}\n                    value={value}\n                    onChange={handleNativeSelectChange}\n                    options={options}\n                />\n            );\n        }, [multiple, selectedItems, disabled, name, handleNativeSelectChange, options, menuProps]);\n\n        const needRenderOptionsList = flatOptions.length > 0 || showEmptyOptionsList;\n\n        return (\n            <div\n                {...getComboboxProps({\n                    ref: rootRef,\n                    ...(disabled && { 'aria-disabled': true }),\n                    className: cn(styles.component, { [styles.block]: block }, className),\n                })}\n                onKeyDown={disabled ? undefined : handleFieldKeyDown}\n                tabIndex={-1}\n                data-test-id={getDataTestId(dataTestId)}\n            >\n                {nativeSelect && renderNativeSelect()}\n\n                <Field\n                    selectedMultiple={selectedItems}\n                    selected={selectedItems[0]}\n                    setSelectedItems={setSelectedItems}\n                    toggleMenu={toggleMenu}\n                    multiple={multiple}\n                    open={open}\n                    disabled={disabled}\n                    size={size}\n                    placeholder={placeholder}\n                    label={label && <span {...getLabelProps()}>{label}</span>}\n                    labelView={labelView}\n                    Arrow={Arrow && <Arrow open={open} />}\n                    error={error}\n                    hint={hint}\n                    valueRenderer={valueRenderer}\n                    className={fieldClassName}\n                    innerProps={{\n                        onBlur: handleFieldBlur,\n                        onFocus: disabled ? undefined : handleFieldFocus,\n                        onClick: disabled ? undefined : handleFieldClick,\n                        tabIndex: disabled ? undefined : nativeSelect ? -1 : 0,\n                        ref: mergeRefs([inputProps.ref]),\n                        id: inputProps.id,\n                        'aria-labelledby': inputProps['aria-labelledby'],\n                        'aria-controls': inputProps['aria-controls'],\n                        'aria-autocomplete': autocomplete\n                            ? inputProps['aria-autocomplete']\n                            : undefined,\n                    }}\n                    dataTestId={getDataTestId(dataTestId, 'field')}\n                    {...(fieldProps as AnyObject)}\n                />\n\n                {name && !nativeSelect && renderValue()}\n\n                {!nativeSelect && (\n                    <Popover\n                        open={open}\n                        withTransition={false}\n                        anchorElement={fieldRef.current as HTMLElement}\n                        position={popoverPosition}\n                        preventFlip={preventFlip}\n                        popperClassName={cn(styles.popoverInner, popperClassName)}\n                        update={updatePopover}\n                        zIndex={zIndexPopover}\n                    >\n                        {needRenderOptionsList && (\n                            <div\n                                {...menuProps}\n                                className={cn(optionsListClassName, styles.optionsList)}\n                            >\n                                <OptionsList\n                                    {...(optionsListProps as AnyObject)}\n                                    optionsListWidth={optionsListWidth}\n                                    flatOptions={flatOptions}\n                                    highlightedIndex={highlightedIndex}\n                                    open={open}\n                                    size={size}\n                                    options={options}\n                                    Optgroup={Optgroup}\n                                    Option={Option}\n                                    selectedItems={selectedItems}\n                                    setSelectedItems={setSelectedItems}\n                                    toggleMenu={toggleMenu}\n                                    getOptionProps={getOptionProps}\n                                    visibleOptions={visibleOptions}\n                                    onScroll={onScroll}\n                                    dataTestId={getDataTestId(dataTestId, 'options-list')}\n                                />\n                                <div className={styles.optionsListBorder} />\n                            </div>\n                        )}\n                    </Popover>\n                )}\n            </div>\n        );\n    },\n);\n","import React, { forwardRef } from 'react';\n\nimport { FormControlProps } from '@alfalab/core-components-form-control/src/Component';\n\nimport { Arrow as DefaultArrow } from './components/arrow';\nimport { BaseSelect } from './components/base-select';\nimport { Field as DefaultField } from './components/field';\nimport { Optgroup as DefaultOptgroup } from './components/optgroup';\nimport { Option as DefaultOption } from './components/option';\nimport { OptionsList as DefaultOptionsList } from './components/options-list';\nimport { BaseSelectProps } from './typings';\n\nexport type SelectFieldProps = Omit<FormControlProps, 'size'> & Record<string, unknown>;\n\nexport type SelectDesktopProps = Omit<BaseSelectProps, 'fieldProps'> & {\n    /**\n     * Пропсы, которые будут прокинуты в компонент поля\n     */\n    fieldProps?: SelectFieldProps;\n};\n\nexport const SelectDesktop = forwardRef<HTMLDivElement, SelectDesktopProps>(\n    (\n        {\n            Arrow = DefaultArrow,\n            Field = DefaultField,\n            OptionsList = DefaultOptionsList,\n            Optgroup = DefaultOptgroup,\n            Option = DefaultOption,\n            ...restProps\n        },\n        ref,\n    ) => (\n        <BaseSelect\n            ref={ref}\n            Option={Option}\n            Field={Field}\n            Optgroup={Optgroup}\n            OptionsList={OptionsList}\n            Arrow={Arrow}\n            {...restProps}\n        />\n    ),\n);\n","import React, { forwardRef, ReactNode } from 'react';\n\nimport { BottomSheetProps } from '@alfalab/core-components-bottom-sheet';\n\nimport { Arrow as DefaultArrow } from './components/arrow';\nimport { BaseSelectMobile } from './components/base-select-mobile';\nimport { Footer } from './components/base-select-mobile/footer';\nimport { Field as DefaultField } from './components/field';\nimport { Optgroup as DefaultOptgroup } from './components/optgroup';\nimport { Option as DefaultOption } from './components/option';\nimport { OptionsList as DefaultOptionsList } from './components/options-list';\nimport { VirtualOptionsList as DefaultVirtualOptionsList } from './components/virtual-options-list';\nimport { useSelectWithApply, UseSelectWithApplyProps } from './presets/useSelectWithApply/hook';\nimport { Header } from './presets/useSelectWithApply/options-list-with-apply/header/Component';\nimport { AnyObject, BaseSelectProps } from './typings';\n\nexport type AdditionalMobileProps = {\n    /**\n     * Футер\n     * @deprecated Используйте bottomSheetProps.actionButton\n     */\n    footer?: ReactNode;\n\n    /**\n     * Будет ли свайпаться шторка\n     * @deprecated Используйте bottomSheetProps.swipeable\n     */\n    swipeable?: boolean;\n\n    /**\n     * Дополнительные пропсы шторки\n     */\n    bottomSheetProps?: Partial<BottomSheetProps>;\n\n    /**\n     * Показывать кнопку очистки\n     */\n    showClear?: UseSelectWithApplyProps['showClear'];\n\n    /**\n     * Показывать пункт \"Выбрать все\"\n     */\n    showSelectAll?: UseSelectWithApplyProps['showSelectAll'];\n\n    /**\n     * Показывать пункт \"Выбрать все\" в заголовке списка\n     */\n    showHeaderWithSelectAll?: UseSelectWithApplyProps['showHeaderWithSelectAll'];\n\n    /**\n     * Использовать ли хук useSelectWithApply\n     */\n    useWithApplyHook?: boolean;\n};\n\nexport type SelectMobileProps = Omit<BaseSelectProps, 'Checkmark' | 'onScroll'> &\n    AdditionalMobileProps;\n\nconst VIRTUAL_OPTIONS_LIST_THRESHOLD = 30;\n\nexport const SelectMobile = forwardRef(\n    (\n        {\n            autocomplete = false,\n            multiple = false,\n            allowUnselect = false,\n            disabled = false,\n            closeOnSelect = !multiple,\n            circularNavigation = false,\n            defaultOpen = false,\n            open: openProp,\n            size = 'm',\n            optionsSize = 'm',\n            fieldProps = {},\n            optionProps = {},\n            optionsListProps = {},\n            Arrow = DefaultArrow,\n            Field = DefaultField,\n            Optgroup = DefaultOptgroup,\n            Option = DefaultOption,\n            selected,\n            options,\n            OptionsList = options.length > VIRTUAL_OPTIONS_LIST_THRESHOLD\n                ? DefaultVirtualOptionsList\n                : DefaultOptionsList,\n            onChange,\n            bottomSheetProps,\n            showClear = true,\n            showSelectAll,\n            showHeaderWithSelectAll,\n            useWithApplyHook = multiple,\n            ...restProps\n        }: SelectMobileProps,\n        ref,\n    ) => {\n        const applyProps = useSelectWithApply({\n            optionsListProps: {\n                ...(optionsListProps as AnyObject),\n                Footer,\n            },\n            OptionsList,\n            selected,\n            options,\n            onChange,\n            showClear,\n            showSelectAll,\n        });\n\n        return (\n            <BaseSelectMobile\n                ref={ref}\n                autocomplete={autocomplete}\n                multiple={multiple}\n                allowUnselect={allowUnselect}\n                disabled={disabled}\n                closeOnSelect={closeOnSelect}\n                circularNavigation={circularNavigation}\n                defaultOpen={defaultOpen}\n                open={openProp}\n                size={size}\n                optionsSize={optionsSize}\n                fieldProps={fieldProps}\n                optionProps={optionProps}\n                Arrow={Arrow}\n                Field={Field}\n                Optgroup={Optgroup}\n                Option={Option}\n                isBottomSheet={true}\n                options={options}\n                selected={selected}\n                onChange={onChange}\n                OptionsList={OptionsList}\n                bottomSheetProps={{\n                    bottomAddons: useWithApplyHook && showHeaderWithSelectAll && (\n                        <Header {...applyProps.optionsListProps.headerProps} mobile={true} />\n                    ),\n                    ...bottomSheetProps,\n                }}\n                optionsListProps={optionsListProps}\n                {...restProps}\n                {...(useWithApplyHook && applyProps)}\n            />\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"arrow\":\"arrow_Fidyu\",\"open\":\"open_JDO2N\"};","import React from 'react';\nimport cn from 'classnames';\n\nimport { ChevronDownMIcon } from '@alfalab/icons-glyph/ChevronDownMIcon';\n\nimport { ArrowProps } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport const Arrow = ({ open, className }: ArrowProps) => (\n    <ChevronDownMIcon className={cn(styles.arrow, className, { [styles.open]: open })} />\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"footer_axvIA\",\"button\":\"button_pDzdW\",\"highlighted\":\"highlighted_Elc3O\"};","import React, { useContext, useEffect } from 'react';\nimport cn from 'classnames';\n\nimport { BaseModalContext } from '@alfalab/core-components-base-modal';\nimport { Button } from '@alfalab/core-components-button';\n\nimport styles from './index.module.css';\n\nexport type FooterProps = {\n    handleClear?: () => void;\n    handleApply?: () => void;\n    showClear?: boolean;\n};\n\nexport const Footer = ({ handleApply, handleClear, showClear }: FooterProps) => {\n    const { footerHighlighted, setHasFooter } = useContext(BaseModalContext);\n\n    useEffect(() => {\n        setHasFooter(true);\n    }, [setHasFooter]);\n\n    return (\n        <div\n            // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n            tabIndex={0}\n            className={cn(styles.footer, {\n                [styles.highlighted]: footerHighlighted,\n            })}\n        >\n            {showClear && (\n                <Button size='s' view='secondary' className={styles.button} onClick={handleClear}>\n                    Сбросить\n                </Button>\n            )}\n\n            <Button size='s' view='primary' className={styles.button} onClick={handleApply}>\n                Применить\n            </Button>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_Ueoys\",\"sheet\":\"sheet_M7FLk\",\"sheetContent\":\"sheetContent_FzFRt\",\"sheetContainer\":\"sheetContainer_xoxRd\",\"block\":\"block_UhmUp\",\"option\":\"option_SOtzg\",\"optionGroup\":\"optionGroup_afe40\"};","import React, {\n    FocusEvent,\n    forwardRef,\n    KeyboardEvent,\n    MouseEvent,\n    ReactNode,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport cn from 'classnames';\nimport {\n    useCombobox,\n    useMultipleSelection,\n    UseMultipleSelectionProps,\n    UseMultipleSelectionState,\n} from 'downshift';\n\nimport { BottomSheet, BottomSheetProps } from '@alfalab/core-components-bottom-sheet';\nimport { ModalMobile } from '@alfalab/core-components-modal/mobile';\n\nimport { getDataTestId } from '../../../../utils';\nimport {\n    AnyObject,\n    BaseSelectProps,\n    OptionProps,\n    OptionShape,\n    OptionsListProps,\n} from '../../typings';\nimport { processOptions } from '../../utils';\nimport { Arrow as DefaultArrow } from '../arrow';\nimport { Field as DefaultField } from '../field';\nimport { Optgroup as DefaultOptgroup } from '../optgroup';\nimport { Option as DefaultOption } from '../option';\nimport { OptionsList as DefaultOptionsList } from '../options-list';\n\nimport styles from './index.module.css';\n\nexport type SelectMobileProps = Omit<BaseSelectProps, 'Checkmark' | 'onScroll'> & {\n    /**\n     * Футер\n     * @deprecated Используйте bottomSheetProps.actionButton\n     */\n    footer?: ReactNode;\n\n    /**\n     * Будет ли свайпаться шторка\n     * @deprecated Используйте bottomSheetProps.swipeable\n     */\n    swipeable?: boolean;\n\n    /**\n     * Отображать в BottomSheet\n     */\n    isBottomSheet?: boolean;\n\n    /**\n     * Дополнительные пропсы шторки\n     */\n    bottomSheetProps?: Partial<BottomSheetProps>;\n\n    /**\n     *  Дополнительные пропсы модалки\n     */\n    modalProps?: Partial<React.ComponentProps<typeof ModalMobile>>;\n\n    /**\n     *  Дополнительные пропсы шапки модалки\n     */\n    modalHeaderProps?: Partial<React.ComponentProps<typeof ModalMobile.Header>>;\n\n    /**\n     *  Дополнительные пропсы футера модалки\n     */\n    modalFooterProps?: Partial<React.ComponentProps<typeof ModalMobile.Footer>>;\n};\n\nexport const BaseSelectMobile = forwardRef(\n    (\n        {\n            dataTestId,\n            className,\n            fieldClassName,\n            optionsListClassName,\n            optionClassName,\n            optionGroupClassName,\n            optionsListProps,\n            options = [],\n            autocomplete = false,\n            multiple = false,\n            allowUnselect = false,\n            disabled = false,\n            closeOnSelect = !multiple,\n            circularNavigation = false,\n            defaultOpen = false,\n            open: openProp,\n            optionsListWidth = 'content',\n            name,\n            id,\n            selected = [],\n            size = 'm',\n            optionsSize = 'm',\n            error,\n            hint,\n            block,\n            label,\n            labelView,\n            placeholder,\n            fieldProps = {},\n            optionProps = {},\n            valueRenderer,\n            onChange,\n            onOpen,\n            onFocus,\n            Arrow = DefaultArrow,\n            Field = DefaultField,\n            Optgroup = DefaultOptgroup,\n            Option = DefaultOption,\n            OptionsList = DefaultOptionsList,\n            swipeable,\n            footer,\n            isBottomSheet,\n            bottomSheetProps,\n            modalProps,\n            modalHeaderProps,\n            modalFooterProps,\n            showEmptyOptionsList = false,\n        }: SelectMobileProps,\n        ref,\n    ) => {\n        const rootRef = useRef<HTMLLabelElement>(null);\n        const fieldRef = useRef<HTMLInputElement>(null);\n        const listRef = useRef<HTMLDivElement>(null);\n        const initiatorRef = useRef<OptionShape | null>(null);\n        const alreadyClickedRef = useRef<boolean>(false);\n\n        const itemToString = (option: OptionShape) => (option ? option.key : '');\n\n        const { flatOptions, selectedOptions } = useMemo(\n            () => processOptions(options, selected),\n            [options, selected],\n        );\n\n        const scrollableContainerRef = useRef<HTMLDivElement>(null);\n\n        const useMultipleSelectionProps: UseMultipleSelectionProps<OptionShape> = {\n            itemToString,\n            onSelectedItemsChange: (changes) => {\n                if (onChange) {\n                    const { selectedItems = [] } = changes;\n\n                    onChange({\n                        selectedMultiple: selectedItems,\n                        selected: selectedItems.length ? selectedItems[0] : null,\n                        initiator: initiatorRef.current,\n                        name,\n                    });\n\n                    initiatorRef.current = null;\n                }\n            },\n            stateReducer: (state, actionAndChanges) => {\n                const { type, changes } = actionAndChanges;\n\n                if (\n                    !allowUnselect &&\n                    type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace\n                ) {\n                    return state;\n                }\n\n                return changes as UseMultipleSelectionState<OptionShape>;\n            },\n        };\n\n        if (selected !== undefined) {\n            useMultipleSelectionProps.selectedItems = selectedOptions;\n        }\n\n        const {\n            selectedItems,\n            addSelectedItem,\n            setSelectedItems,\n            removeSelectedItem,\n            getDropdownProps,\n        } = useMultipleSelection(useMultipleSelectionProps);\n\n        const {\n            isOpen: open,\n            getMenuProps,\n            getInputProps,\n            getItemProps,\n            getComboboxProps,\n            getLabelProps,\n            highlightedIndex,\n            toggleMenu,\n            openMenu,\n        } = useCombobox<OptionShape>({\n            id,\n            isOpen: openProp,\n            circularNavigation,\n            items: flatOptions,\n            itemToString,\n            defaultHighlightedIndex: -1,\n            onIsOpenChange: ({ isOpen }) => {\n                if (onOpen) {\n                    /**\n                     *  Вызываем обработчик асинхронно.\n                     *\n                     * Иначе при клике вне открытого селекта сначала сработает onOpen, который закроет селект,\n                     * А затем сработает onClick кнопки открытия\\закрытия с open=false и в итоге селект откроется снова.\n                     */\n                    setTimeout(() => {\n                        onOpen({\n                            open: isOpen,\n                            name,\n                        });\n                    }, 0);\n                }\n            },\n            stateReducer: (state, actionAndChanges) => {\n                const { type, changes } = actionAndChanges;\n                const { selectedItem } = changes;\n\n                switch (type) {\n                    case useCombobox.stateChangeTypes.InputBlur:\n                        return state;\n                    case useCombobox.stateChangeTypes.InputKeyDownEnter:\n                    case useCombobox.stateChangeTypes.ItemClick:\n                        initiatorRef.current = selectedItem;\n\n                        if (selectedItem && !selectedItem.disabled && !alreadyClickedRef.current) {\n                            alreadyClickedRef.current = true;\n                            // TODO!!! Проблема downshift + React 18. ItemClick срабатывает дважды. См https://github.com/downshift-js/downshift/issues/1384\n                            setTimeout(() => {\n                                alreadyClickedRef.current = false;\n                            });\n                            const alreadySelected = selectedItems.includes(selectedItem);\n                            const allowRemove =\n                                allowUnselect || (multiple && selectedItems.length > 1);\n\n                            if (alreadySelected && allowRemove) {\n                                if (multiple) {\n                                    removeSelectedItem(selectedItem);\n                                } else {\n                                    setSelectedItems([]);\n                                }\n                            }\n\n                            if (!alreadySelected) {\n                                if (multiple) {\n                                    addSelectedItem(selectedItem);\n                                } else {\n                                    setSelectedItems([selectedItem]);\n                                }\n                            }\n                        }\n\n                        return {\n                            ...changes,\n                            isOpen: !closeOnSelect || multiple,\n                            // при closeOnSelect === false - сохраняем подсвеченный индекс\n                            highlightedIndex:\n                                state.isOpen && !closeOnSelect\n                                    ? state.highlightedIndex\n                                    : changes.highlightedIndex,\n                        };\n                    default:\n                        return changes;\n                }\n            },\n        });\n\n        const menuProps = (getMenuProps as (options: object, additional: object) => AnyObject)(\n            { ref: listRef },\n            { suppressRefError: true },\n        );\n        const inputProps = getInputProps(getDropdownProps({ ref: mergeRefs([ref, fieldRef]) }));\n\n        const handleFieldFocus = (event: FocusEvent<HTMLDivElement | HTMLInputElement>) => {\n            if (onFocus) onFocus(event);\n\n            if (autocomplete && !open) {\n                openMenu();\n            }\n        };\n\n        const handleFieldKeyDown = (event: KeyboardEvent<HTMLDivElement | HTMLInputElement>) => {\n            inputProps.onKeyDown(event);\n            if (autocomplete && !open && (event.key.length === 1 || event.key === 'Backspace')) {\n                // Для автокомплита - открываем меню при начале ввода\n                openMenu();\n            }\n\n            if (\n                [' ', 'Enter'].includes(event.key) &&\n                !autocomplete &&\n                (event.target as HTMLElement).tagName !== 'INPUT' &&\n                (event.target as HTMLElement).tagName !== 'BUTTON'\n            ) {\n                // Открываем\\закрываем меню по нажатию enter или пробела\n                event.preventDefault();\n                if (!open || highlightedIndex === -1) toggleMenu();\n            }\n        };\n\n        const handleFieldClick = (event: MouseEvent) => {\n            if (!autocomplete || (event.target as HTMLElement).tagName !== 'INPUT') {\n                toggleMenu();\n            } else {\n                openMenu();\n            }\n        };\n\n        const getOptionProps = (option: OptionShape, index: number): OptionProps => {\n            const selectedItem = selectedItems.includes(option);\n\n            return {\n                ...(optionProps as object),\n                mobile: true,\n                className: cn(styles.option, optionClassName),\n                innerProps: getItemProps({\n                    index,\n                    item: option,\n                    disabled: option.disabled,\n                    onMouseDown: (event: MouseEvent) => event.preventDefault(),\n                }),\n                multiple,\n                index,\n                option,\n                size: optionsSize,\n                disabled: option.disabled,\n                highlighted: index === highlightedIndex,\n                selected: selectedItem,\n                dataTestId: getDataTestId(dataTestId, 'option'),\n            };\n        };\n\n        useEffect(() => {\n            if (defaultOpen) openMenu();\n        }, [defaultOpen, openMenu]);\n\n        useEffect(() => {\n            if (openProp) {\n                openMenu();\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        const handleClose = () => {\n            toggleMenu();\n        };\n\n        const renderValue = () =>\n            selectedItems.map((option) => (\n                <input type='hidden' name={name} value={option.key} key={option.key} />\n            ));\n\n        const renderOptionsList = () => {\n            if (flatOptions.length === 0 && !showEmptyOptionsList) return null;\n\n            return (\n                <div {...menuProps} className={optionsListClassName}>\n                    <OptionsList\n                        {...(optionsListProps as OptionsListProps)}\n                        ref={scrollableContainerRef}\n                        optionsListWidth={optionsListWidth}\n                        flatOptions={flatOptions}\n                        highlightedIndex={highlightedIndex}\n                        open={open}\n                        size={size}\n                        options={options}\n                        Optgroup={Optgroup}\n                        Option={Option}\n                        selectedItems={selectedItems}\n                        setSelectedItems={setSelectedItems}\n                        toggleMenu={toggleMenu}\n                        getOptionProps={getOptionProps}\n                        visibleOptions={0}\n                        dataTestId={getDataTestId(dataTestId, 'options-list')}\n                        optionGroupClassName={cn(styles.optionGroup, optionGroupClassName)}\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <div\n                {...getComboboxProps({\n                    ref: rootRef,\n                    ...(disabled && { 'aria-disabled': true }),\n                    className: cn(styles.component, { [styles.block]: block }, className),\n                })}\n                onKeyDown={disabled ? undefined : handleFieldKeyDown}\n                tabIndex={-1}\n                data-test-id={getDataTestId(dataTestId)}\n            >\n                <Field\n                    selectedMultiple={selectedItems}\n                    selected={selectedItems[0]}\n                    setSelectedItems={setSelectedItems}\n                    toggleMenu={toggleMenu}\n                    multiple={multiple}\n                    open={open}\n                    disabled={disabled}\n                    size={size}\n                    placeholder={placeholder}\n                    label={label && <span {...getLabelProps()}>{label}</span>}\n                    labelView={labelView}\n                    Arrow={Arrow && <Arrow open={open} />}\n                    error={error}\n                    hint={hint}\n                    valueRenderer={valueRenderer}\n                    className={fieldClassName}\n                    innerProps={{\n                        onFocus: disabled ? undefined : handleFieldFocus,\n                        onClick: disabled ? undefined : handleFieldClick,\n                        tabIndex: disabled ? -1 : 0,\n                        ref: mergeRefs([inputProps.ref]),\n                        id: inputProps.id,\n                        'aria-labelledby': inputProps['aria-labelledby'],\n                        'aria-controls': inputProps['aria-controls'],\n                        'aria-autocomplete': autocomplete\n                            ? inputProps['aria-autocomplete']\n                            : undefined,\n                    }}\n                    dataTestId={getDataTestId(dataTestId, 'field')}\n                    {...(fieldProps as AnyObject)}\n                />\n\n                {name && renderValue()}\n\n                {isBottomSheet ? (\n                    <BottomSheet\n                        open={open}\n                        onClose={handleClose}\n                        className={styles.sheet}\n                        contentClassName={styles.sheetContent}\n                        containerClassName={styles.sheetContainer}\n                        title={label || placeholder}\n                        actionButton={footer}\n                        stickyHeader={true}\n                        hasCloser={true}\n                        swipeable={swipeable}\n                        scrollableContainerRef={scrollableContainerRef}\n                        {...bottomSheetProps}\n                    >\n                        {renderOptionsList()}\n                    </BottomSheet>\n                ) : (\n                    <ModalMobile\n                        open={open}\n                        hasCloser={true}\n                        {...modalProps}\n                        onClose={(...args) => {\n                            handleClose();\n                            modalProps?.onClose?.(...args);\n                        }}\n                        contentClassName={cn(styles.sheetContent, modalProps?.contentClassName)}\n                        ref={mergeRefs([\n                            scrollableContainerRef,\n                            modalProps?.ref as React.Ref<HTMLDivElement>,\n                        ])}\n                    >\n                        <ModalMobile.Header hasCloser={true} sticky={true} {...modalHeaderProps}>\n                            {label || placeholder}\n                        </ModalMobile.Header>\n\n                        {renderOptionsList()}\n\n                        {modalFooterProps?.children && <ModalMobile.Footer {...modalFooterProps} />}\n                    </ModalMobile>\n                )}\n            </div>\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_zOUqa\",\"field\":\"field_dLiU8\",\"disabled\":\"disabled_V9ICB\",\"arrow\":\"arrow_J35rX\",\"placeholder\":\"placeholder_ipIF4\",\"contentWrapper\":\"contentWrapper_zxzjS\",\"value\":\"value_WHuoX\",\"focusVisible\":\"focusVisible_otvIz\"};","import React, { useCallback, useRef, useState } from 'react';\nimport cn from 'classnames';\n\nimport { FormControl, FormControlProps } from '@alfalab/core-components-form-control';\nimport { useFocus } from '@alfalab/hooks';\n\nimport { FieldProps as BaseFieldProps } from '../../typings';\nimport { joinOptions } from '../../utils';\n\nimport styles from './index.module.css';\n\nexport const Field = ({\n    size = 'm',\n    open,\n    multiple,\n    error,\n    hint,\n    disabled,\n    label,\n    labelView = 'inner',\n    placeholder,\n    selectedMultiple = [],\n    selected,\n    rightAddons,\n    valueRenderer = joinOptions,\n    setSelectedItems,\n    toggleMenu,\n    Arrow,\n    innerProps,\n    dataTestId,\n    fieldClassName,\n    ...restProps\n}: BaseFieldProps & FormControlProps) => {\n    const [focused, setFocused] = useState(false);\n\n    const wrapperRef = useRef<HTMLDivElement>(null);\n\n    const [focusVisible] = useFocus(wrapperRef, 'keyboard');\n\n    const handleFocus = useCallback(() => setFocused(true), []);\n    const handleBlur = useCallback(() => setFocused(false), []);\n\n    const value = valueRenderer({ selected, selectedMultiple });\n\n    const filled = Boolean(value);\n    const showLabel = !!label && (filled || !placeholder || labelView === 'outer');\n\n    return (\n        <div\n            className={styles.component}\n            ref={wrapperRef}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n        >\n            <FormControl\n                fieldClassName={cn(styles.field, fieldClassName, {\n                    [styles.disabled]: disabled,\n                    [styles.focusVisible]: focusVisible,\n                })}\n                block={true}\n                size={size}\n                focused={open || focused}\n                disabled={disabled}\n                filled={filled}\n                label={showLabel && label}\n                labelView={labelView}\n                error={error}\n                hint={hint}\n                rightAddons={\n                    (Arrow || rightAddons) && (\n                        <React.Fragment>\n                            {rightAddons}\n                            {/* TODO: стоит переделать, но это будет мажорка */}\n                            {Arrow ? React.cloneElement(Arrow, { className: styles.arrow }) : null}\n                        </React.Fragment>\n                    )\n                }\n                data-test-id={dataTestId}\n                {...restProps}\n                {...innerProps}\n            >\n                <div className={styles.contentWrapper}>\n                    {placeholder && !filled && (\n                        <span className={styles.placeholder}>{placeholder}</span>\n                    )}\n                    {filled && <div className={styles.value}>{value}</div>}\n                </div>\n            </FormControl>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"optgroup\":\"optgroup_q8FGV\",\"label\":\"label_YEkB6\",\"l\":\"l_ns03o\",\"xl\":\"xl_Cgp4G\"};","import React from 'react';\nimport cn from 'classnames';\n\nimport { OptgroupProps } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport const Optgroup = ({ children, className, label, size = 's' }: OptgroupProps) => (\n    <React.Fragment>\n        <div className={cn(styles.optgroup, className, styles[size])}>\n            <span className={styles.label}>{label}</span>\n        </div>\n        {children}\n    </React.Fragment>\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkmark\":\"checkmark_CSCCc\",\"after\":\"after_aCWWU\",\"single\":\"single_XrElb\",\"selected\":\"selected_gJ5q_\",\"before\":\"before_A2aV6\",\"multiple\":\"multiple_enpsV\",\"colorIcon\":\"colorIcon_pQ3if\"};","import React, { useCallback } from 'react';\nimport cn from 'classnames';\n\nimport { Badge } from '@alfalab/core-components-badge';\nimport { Checkbox, CheckboxProps } from '@alfalab/core-components-checkbox';\nimport { CheckmarkCircleMIcon } from '@alfalab/icons-glyph/CheckmarkCircleMIcon';\nimport CheckmarkMIcon from '@alfalab/icons-glyph/CheckmarkMIcon';\n\nimport { CheckmarkProps } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport const Checkmark = ({\n    selected,\n    disabled = false,\n    className,\n    multiple,\n    position = 'before',\n}: CheckmarkProps) => {\n    const single = !multiple;\n\n    const checkmarkClassNames = cn(styles.checkmark, className, styles[position], {\n        [styles.multiple]: !single,\n        [styles.single]: single,\n        [styles.selected]: selected,\n    });\n\n    const handleCheckboxClick = useCallback<Required<CheckboxProps>['onClick']>(\n        (event) => event.stopPropagation(),\n        [],\n    );\n\n    return single ? (\n        <div className={checkmarkClassNames}>\n            {position === 'before' ? (\n                <Badge\n                    className={styles.after}\n                    view='icon'\n                    size='m'\n                    iconColor='positive'\n                    content={<CheckmarkCircleMIcon className={styles.colorIcon} />}\n                />\n            ) : (\n                <CheckmarkMIcon className={cn(styles.displayIcon)} />\n            )}\n        </div>\n    ) : (\n        <Checkbox\n            checked={selected}\n            disabled={disabled}\n            className={checkmarkClassNames}\n            size='m'\n            onClick={handleCheckboxClick}\n        />\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"checkmark\":\"checkmark_rWzcg\",\"selected\":\"selected_wACln\",\"displayIcon\":\"displayIcon_GEtCs\",\"displayBadge\":\"displayBadge_ei_LP\"};","import React from 'react';\nimport cn from 'classnames';\n\nimport { CheckmarkMIcon } from '@alfalab/icons-glyph/CheckmarkMIcon';\n\nimport { CheckmarkProps } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport const Checkmark = ({ selected, className }: CheckmarkProps) => (\n    <div\n        className={cn(styles.checkmark, className, {\n            [styles.selected]: selected,\n        })}\n    >\n        <CheckmarkMIcon className={styles.displayIcon} />\n    </div>\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"option\":\"option_gwrUy\",\"disabled\":\"disabled__Fu13\",\"s\":\"s_utmIH\",\"m\":\"m_Dt3qv\",\"l\":\"l_rPQbN\",\"xl\":\"xl_m_KYY\",\"selected\":\"selected_hRgWF\",\"highlighted\":\"highlighted_kJT1g\",\"content\":\"content_ExbhC\",\"textContent\":\"textContent_IMZ6e\"};","import React, { FC, isValidElement } from 'react';\nimport cn from 'classnames';\n\nimport { OptionProps } from '../../typings';\nimport { Checkmark as DefaultCheckMark } from '../checkmark';\nimport { Checkmark as DefaultMobileCheckmark } from '../checkmark-mobile';\n\nimport styles from './index.module.css';\n\nexport const Option: FC<OptionProps> = ({\n    size = 's',\n    className,\n    option,\n    children,\n    selected,\n    highlighted,\n    disabled,\n    multiple,\n    mobile,\n    Checkmark = mobile ? DefaultMobileCheckmark : DefaultCheckMark,\n    innerProps,\n    dataTestId,\n}) => {\n    const content = children || option.content || option.key;\n    const { showCheckMark = true } = option;\n\n    return (\n        <div\n            {...innerProps}\n            className={cn(styles.option, styles[size], className, {\n                [styles.highlighted]: !mobile && highlighted,\n                [styles.selected]: selected,\n                [styles.disabled]: disabled,\n            })}\n            data-test-id={dataTestId}\n        >\n            {Checkmark && showCheckMark && (\n                <Checkmark\n                    disabled={disabled}\n                    selected={selected}\n                    multiple={multiple}\n                    position='before'\n                />\n            )}\n\n            <div\n                className={cn(styles.content, {\n                    [styles.textContent]: !isValidElement(content),\n                })}\n            >\n                {content}\n            </div>\n\n            {/** Workaround чтобы для клика показывать отметку справа и всегда в виде иконки */}\n            {Checkmark && showCheckMark && (\n                <Checkmark\n                    disabled={disabled}\n                    selected={selected}\n                    multiple={multiple}\n                    position='after'\n                />\n            )}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"optionsList\":\"optionsList_dWWP1\",\"optionsListHeader\":\"optionsListHeader_l6dzu\",\"optionsListFooter\":\"optionsListFooter_RLFvC\",\"withBorder\":\"withBorder_B_X9i\",\"scrollable\":\"scrollable_gc3Nx\",\"emptyPlaceholder\":\"emptyPlaceholder_rowx2\",\"l\":\"l_uu6sb\",\"xl\":\"xl_hSRK3\"};","import React, { forwardRef, useRef } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport cn from 'classnames';\n\nimport { Scrollbar } from '@alfalab/core-components-scrollbar';\nimport { useMedia } from '@alfalab/hooks';\n\nimport { DEFAULT_VISIBLE_OPTIONS } from '../../consts';\nimport { GroupShape, OptionShape, OptionsListProps } from '../../typings';\nimport { isGroup, useVisibleOptions } from '../../utils';\nimport { Optgroup as DefaultOptgroup } from '../optgroup';\n\nimport styles from './index.module.css';\n\nconst createCounter = () => {\n    let count = 0;\n\n    // eslint-disable-next-line no-plusplus\n    return () => count++;\n};\n\nexport const OptionsList = forwardRef<HTMLDivElement, OptionsListProps>(\n    (\n        {\n            size = 's',\n            className,\n            optionGroupClassName,\n            Option,\n            getOptionProps,\n            options = [],\n            Optgroup = DefaultOptgroup,\n            dataTestId,\n            emptyPlaceholder,\n            visibleOptions = DEFAULT_VISIBLE_OPTIONS,\n            onScroll,\n            open,\n            header,\n            footer,\n            showFooter = true,\n            optionsListWidth,\n            nativeScrollbar: nativeScrollbarProp,\n            flatOptions = [],\n        },\n        ref,\n    ) => {\n        let [nativeScrollbar] = useMedia<boolean>([[true, '(max-width: 1023px)']], false);\n\n        nativeScrollbar = Boolean(nativeScrollbarProp ?? nativeScrollbar);\n\n        const renderOption = (option: OptionShape, index: number) => (\n            <Option key={option.key} {...getOptionProps(option, index)} />\n        );\n\n        const listRef = useRef<HTMLDivElement>(null);\n        const scrollbarRef = useRef<HTMLDivElement>(null);\n        const counter = createCounter();\n        const renderGroup = (group: GroupShape) => (\n            <Optgroup\n                className={optionGroupClassName}\n                label={group.label}\n                key={group.label}\n                size={size}\n            >\n                {group.options.map((option) => renderOption(option, counter()))}\n            </Optgroup>\n        );\n\n        useVisibleOptions({\n            ...(!nativeScrollbar && { styleTargetRef: scrollbarRef }),\n            visibleOptions,\n            listRef,\n            open,\n            invalidate: options,\n        });\n\n        if (options.length === 0 && !emptyPlaceholder) {\n            return null;\n        }\n\n        const renderListItems = () => (\n            <React.Fragment>\n                {options.map((option) =>\n                    isGroup(option) ? renderGroup(option) : renderOption(option, counter()),\n                )}\n\n                {emptyPlaceholder && options.length === 0 && (\n                    <div className={styles.emptyPlaceholder}>{emptyPlaceholder}</div>\n                )}\n            </React.Fragment>\n        );\n\n        const renderWithCustomScrollbar = () => {\n            const scrollableNodeProps = {\n                onScroll,\n                'data-test-id': dataTestId,\n                ref: ref as React.RefObject<HTMLDivElement>,\n            };\n\n            return (\n                <Scrollbar\n                    className={styles.scrollable}\n                    ref={scrollbarRef}\n                    horizontalAutoStretch={optionsListWidth === 'content'}\n                    scrollableNodeProps={scrollableNodeProps}\n                    contentNodeProps={{ ref: listRef }}\n                >\n                    {renderListItems()}\n                </Scrollbar>\n            );\n        };\n\n        const renderWithNativeScrollbar = () => (\n            <div className={styles.scrollable} ref={mergeRefs([listRef, ref])} onScroll={onScroll}>\n                {renderListItems()}\n            </div>\n        );\n\n        return (\n            <div\n                {...(nativeScrollbar && { 'data-test-id': dataTestId })}\n                className={cn(styles.optionsList, styles[size], className)}\n            >\n                {header && <div className={styles.optionsListHeader}>{header}</div>}\n\n                {nativeScrollbar ? renderWithNativeScrollbar() : renderWithCustomScrollbar()}\n\n                {showFooter && footer && (\n                    <div\n                        className={cn(styles.optionsListFooter, {\n                            [styles.withBorder]:\n                                visibleOptions && flatOptions.length > visibleOptions,\n                        })}\n                    >\n                        {footer}\n                    </div>\n                )}\n            </div>\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"virtualOptionsList\":\"virtualOptionsList_f8l8Q\",\"virtualOptionsListHeader\":\"virtualOptionsListHeader_Il1v5\",\"virtualOptionsListFooter\":\"virtualOptionsListFooter_dRAb1\",\"withBorder\":\"withBorder_Ufdow\",\"scrollable\":\"scrollable_D_W_P\",\"inner\":\"inner_HnsHb\",\"virtualRow\":\"virtualRow_LhVkm\",\"highlighted\":\"highlighted_pMwde\",\"emptyPlaceholder\":\"emptyPlaceholder_VR5vJ\",\"l\":\"l_eZbum\",\"xl\":\"xl_jd5nz\"};","import React, { forwardRef, useEffect, useMemo, useRef, useState } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { useVirtual } from 'react-virtual';\nimport cn from 'classnames';\n\nimport { Scrollbar } from '@alfalab/core-components-scrollbar';\nimport { useMedia } from '@alfalab/hooks';\n\nimport { DEFAULT_VISIBLE_OPTIONS } from '../../consts';\nimport { GroupShape, OptionShape, OptionsListProps } from '../../typings';\nimport { isGroup, lastIndexOf, usePrevious, useVisibleOptions } from '../../utils';\nimport { Optgroup as DefaultOptgroup } from '../optgroup';\n\nimport styles from './index.module.css';\n\nexport const VirtualOptionsList = forwardRef<HTMLDivElement, OptionsListProps>(\n    (\n        {\n            size = 's',\n            flatOptions = [],\n            highlightedIndex = -1,\n            className,\n            getOptionProps,\n            Option,\n            open,\n            options = [],\n            Optgroup = DefaultOptgroup,\n            dataTestId,\n            emptyPlaceholder,\n            visibleOptions = DEFAULT_VISIBLE_OPTIONS,\n            header,\n            footer,\n            showFooter = true,\n            optionsListWidth,\n            onScroll,\n            nativeScrollbar: nativeScrollbarProp,\n        },\n        ref,\n    ) => {\n        const listRef = useRef<HTMLDivElement>(null);\n        const parentRef = useRef<HTMLDivElement>(null);\n        const scrollbarRef = useRef<HTMLDivElement>(null);\n        const [visibleOptionsInvalidateKey, setVisibleOptionsInvalidateKey] = useState(0);\n        const prevHighlightedIndex = usePrevious(highlightedIndex) || -1;\n\n        let [nativeScrollbar] = useMedia<boolean>([[true, '(max-width: 1023px)']], false);\n\n        const rowVirtualizer = useVirtual({\n            size: flatOptions.length,\n            parentRef: (ref || parentRef) as React.RefObject<HTMLDivElement>,\n            overscan: 15,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        nativeScrollbar = Boolean(nativeScrollbarProp ?? nativeScrollbar);\n\n        // Сколл к выбранному пункту при открытии меню\n        useEffect(() => {\n            if (open) {\n                rowVirtualizer.scrollToIndex(highlightedIndex, { align: 'end' });\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [open]);\n\n        // Скролл к пункту, которого нет на экране\n        useEffect(() => {\n            if (highlightedIndex === -1) return;\n\n            if (!rowVirtualizer.virtualItems.some((option) => option.index === highlightedIndex)) {\n                rowVirtualizer.scrollToIndex(highlightedIndex, { align: 'end' });\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [highlightedIndex]);\n\n        // Циклическая навигация\n        useEffect(() => {\n            const notDisabled = (option: OptionShape) => !option.disabled;\n            const firstNonDisabled = flatOptions.findIndex(notDisabled);\n            const lastNonDisabled = lastIndexOf(flatOptions, notDisabled);\n\n            if (\n                prevHighlightedIndex <= firstNonDisabled &&\n                highlightedIndex === flatOptions.length - 1\n            ) {\n                rowVirtualizer.scrollToIndex(lastNonDisabled);\n            }\n\n            if (prevHighlightedIndex >= lastNonDisabled && highlightedIndex === 0) {\n                rowVirtualizer.scrollToIndex(0);\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [prevHighlightedIndex, highlightedIndex]);\n\n        useEffect(() => {\n            setVisibleOptionsInvalidateKey(\n                /**\n                 * react-virtual может несколько раз отрендерить список с одним элементом,\n                 * поэтому нужно еще раз пересчитать высоту, когда список ВИДИМЫХ пунктов будет отрендерен полностью\n                 * Также, высоту нужно пересчитывать при изменении ОБЩЕГО кол-ва пунктов меню\n                 */\n                rowVirtualizer.virtualItems.length > 1 ? flatOptions.length : 1,\n            );\n        }, [rowVirtualizer.virtualItems.length, flatOptions.length]);\n\n        useVisibleOptions({\n            visibleOptions,\n            invalidate: visibleOptionsInvalidateKey,\n            listRef,\n            styleTargetRef: nativeScrollbar ? parentRef : scrollbarRef,\n            open,\n        });\n\n        // Т.к. рендерится плоский список, необходимо знать индекс, когда начинается новая группа\n        const groupStartIndexes = useMemo(() => {\n            let currentIndex = 0;\n\n            return options.reduce((acc: { [key: number]: number }, option, index) => {\n                if (isGroup(option)) {\n                    acc[currentIndex] = index;\n                    currentIndex += option.options.length;\n                } else {\n                    currentIndex += 1;\n                }\n\n                return acc;\n            }, {});\n        }, [options]);\n\n        const renderList = () =>\n            rowVirtualizer.virtualItems.map((virtualRow) => {\n                const option = flatOptions[virtualRow.index];\n                const group = options[groupStartIndexes[virtualRow.index]] as GroupShape;\n\n                return (\n                    <div\n                        key={virtualRow.index}\n                        ref={virtualRow.measureRef}\n                        className={cn(styles.virtualRow, {\n                            [styles.highlighted]: highlightedIndex === virtualRow.index,\n                        })}\n                        style={{\n                            transform: `translateY(${virtualRow.start}px)`,\n                        }}\n                    >\n                        {group && <Optgroup label={group.label} />}\n                        {!isGroup(option) && (\n                            <Option {...getOptionProps(option, virtualRow.index)} />\n                        )}\n                    </div>\n                );\n            });\n\n        const contentNodeProps = {\n            className: styles.inner,\n            style: { height: `${rowVirtualizer.totalSize}px` },\n            ref: listRef,\n        };\n\n        const renderWithCustomScrollbar = () => (\n            <Scrollbar\n                className={styles.scrollable}\n                ref={scrollbarRef}\n                horizontalAutoStretch={optionsListWidth === 'content'}\n                scrollableNodeProps={{ onScroll, ref: parentRef }}\n                contentNodeProps={contentNodeProps}\n            >\n                {renderList()}\n            </Scrollbar>\n        );\n\n        const renderWithNativeScrollbar = () => {\n            if (visibleOptions) {\n                return (\n                    <div\n                        className={styles.scrollable}\n                        ref={mergeRefs([parentRef, ref])}\n                        onScroll={onScroll}\n                    >\n                        <div {...contentNodeProps}>{renderList()}</div>\n                    </div>\n                );\n            }\n\n            return <div {...contentNodeProps}>{renderList()}</div>;\n        };\n\n        if (options.length === 0 && !emptyPlaceholder) {\n            return null;\n        }\n\n        return (\n            <div\n                className={cn(styles.virtualOptionsList, styles[size], className)}\n                data-test-id={dataTestId}\n            >\n                {header && <div className={styles.virtualOptionsListHeader}>{header}</div>}\n\n                {nativeScrollbar ? renderWithNativeScrollbar() : renderWithCustomScrollbar()}\n\n                {emptyPlaceholder && options.length === 0 && (\n                    <div className={styles.emptyPlaceholder}>{emptyPlaceholder}</div>\n                )}\n\n                {showFooter && footer && (\n                    <div\n                        className={cn(styles.virtualOptionsListFooter, {\n                            [styles.withBorder]:\n                                visibleOptions && flatOptions.length > visibleOptions,\n                        })}\n                    >\n                        {footer}\n                    </div>\n                )}\n            </div>\n        );\n    },\n);\n","export const DEFAULT_VISIBLE_OPTIONS = 5;\n","import React, { forwardRef } from 'react';\n\nimport { useMedia } from '@alfalab/hooks';\n\nimport { SelectDesktop, SelectFieldProps } from './Component.desktop';\nimport { AdditionalMobileProps, SelectMobile } from './Component.mobile';\nimport type { BaseSelectProps } from './typings';\n\nexport type SelectResponsiveProps = BaseSelectProps &\n    AdditionalMobileProps & {\n        /**\n         * Контрольная точка, с нее начинается desktop версия\n         * @default 1024\n         */\n        breakpoint?: number;\n    };\n\nexport const SelectResponsive = forwardRef<HTMLDivElement, SelectResponsiveProps>(\n    (\n        {\n            footer,\n            swipeable,\n            bottomSheetProps,\n            OptionsList,\n            onScroll,\n            fieldProps,\n            breakpoint = 1024,\n            ...restProps\n        },\n        ref,\n    ) => {\n        const [view] = useMedia(\n            [\n                ['mobile', `(max-width: ${breakpoint - 1}px)`],\n                ['desktop', `(min-width: ${breakpoint}px)`],\n            ],\n            'desktop',\n        );\n\n        return view === 'desktop' ? (\n            <SelectDesktop\n                OptionsList={OptionsList}\n                onScroll={onScroll}\n                {...restProps}\n                ref={ref}\n                fieldProps={fieldProps as SelectFieldProps}\n            />\n        ) : (\n            <SelectMobile\n                footer={footer}\n                swipeable={swipeable}\n                bottomSheetProps={bottomSheetProps}\n                fieldProps={fieldProps}\n                {...restProps}\n                ref={ref}\n            />\n        );\n    },\n);\n","import React, { forwardRef } from 'react';\n\nimport { ModalMobile } from '@alfalab/core-components-modal/Component.mobile';\n\nimport { Arrow as DefaultArrow } from './components/arrow';\nimport { BaseSelectMobile } from './components/base-select-mobile';\nimport { Footer } from './components/base-select-mobile/footer';\nimport { Field as DefaultField } from './components/field';\nimport { Optgroup as DefaultOptgroup } from './components/optgroup';\nimport { Option as DefaultOption } from './components/option';\nimport { OptionsList as DefaultOptionsList } from './components/options-list';\nimport { VirtualOptionsList as DefaultVirtualOptionsList } from './components/virtual-options-list';\nimport { useSelectWithApply, UseSelectWithApplyProps } from './presets/useSelectWithApply/hook';\nimport { Header } from './presets/useSelectWithApply/options-list-with-apply/header/Component';\nimport { AnyObject, BaseSelectProps } from './typings';\n\nexport type SelectModalMobileProps = Omit<BaseSelectProps, 'Checkmark' | 'onScroll'> & {\n    /**\n     * Показывать кнопку очистки\n     */\n    showClear?: UseSelectWithApplyProps['showClear'];\n\n    /**\n     * Показывать пункт \"Выбрать все\"\n     */\n    showSelectAll?: UseSelectWithApplyProps['showSelectAll'];\n\n    /**\n     *  Дополнительные пропсы шапки модалки\n     */\n    modalHeaderProps?: Partial<React.ComponentProps<typeof ModalMobile.Header>>;\n\n    /**\n     *  Дополнительные пропсы модалки\n     */\n    modalProps?: Partial<React.ComponentProps<typeof ModalMobile>>;\n\n    /**\n     *  Дополнительные пропсы футера модалки\n     */\n    modalFooterProps?: Partial<React.ComponentProps<typeof ModalMobile.Footer>>;\n\n    /*\n     * Показывать пункт \"Выбрать все\" в заголовке списка\n     */\n    showHeaderWithSelectAll?: UseSelectWithApplyProps['showHeaderWithSelectAll'];\n\n    /**\n     * Использовать ли хук useSelectWithApply\n     */\n    useWithApplyHook?: boolean;\n};\n\nconst VIRTUAL_OPTIONS_LIST_THRESHOLD = 30;\n\nexport const SelectModalMobile = forwardRef(\n    (\n        {\n            autocomplete = false,\n            multiple = false,\n            allowUnselect = false,\n            disabled = false,\n            closeOnSelect = !multiple,\n            circularNavigation = false,\n            defaultOpen = false,\n            open: openProp,\n            size = 'm',\n            optionsSize = 'm',\n            fieldProps = {},\n            optionProps = {},\n            optionsListProps = {},\n            Arrow = DefaultArrow,\n            Field = DefaultField,\n            Optgroup = DefaultOptgroup,\n            Option = DefaultOption,\n            selected,\n            options,\n            OptionsList = options.length > VIRTUAL_OPTIONS_LIST_THRESHOLD\n                ? DefaultVirtualOptionsList\n                : DefaultOptionsList,\n            onChange,\n            showClear = true,\n            showSelectAll,\n            useWithApplyHook = multiple,\n            modalHeaderProps,\n            showHeaderWithSelectAll,\n            ...restProps\n        }: SelectModalMobileProps,\n        ref,\n    ) => {\n        const applyProps = useSelectWithApply({\n            optionsListProps: {\n                ...(optionsListProps as AnyObject),\n                Footer,\n            },\n            OptionsList,\n            selected,\n            options,\n            onChange,\n            showClear,\n            showSelectAll,\n        });\n\n        return (\n            <BaseSelectMobile\n                ref={ref}\n                autocomplete={autocomplete}\n                multiple={multiple}\n                allowUnselect={allowUnselect}\n                disabled={disabled}\n                closeOnSelect={closeOnSelect}\n                circularNavigation={circularNavigation}\n                defaultOpen={defaultOpen}\n                open={openProp}\n                size={size}\n                optionsSize={optionsSize}\n                fieldProps={fieldProps}\n                optionProps={optionProps}\n                Arrow={Arrow}\n                Field={Field}\n                Optgroup={Optgroup}\n                Option={Option}\n                isBottomSheet={false}\n                options={options}\n                selected={selected}\n                onChange={onChange}\n                OptionsList={OptionsList}\n                optionsListProps={optionsListProps}\n                modalHeaderProps={{\n                    bottomAddons: useWithApplyHook && showHeaderWithSelectAll && (\n                        <Header {...applyProps.optionsListProps.headerProps} mobile={true} />\n                    ),\n                    ...modalHeaderProps,\n                }}\n                {...restProps}\n                {...(useWithApplyHook && applyProps)}\n            />\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"footer__dans\"};","import React from 'react';\n\nimport { Button } from '@alfalab/core-components-button';\n\nimport { OptionShape } from '../../../../typings';\n\nimport styles from './index.module.css';\n\nexport type FooterProps = {\n    handleClear?: () => void;\n    handleApply?: () => void;\n    showClear?: boolean;\n    selectedDraft?: OptionShape[];\n};\n\nexport const Footer = ({\n    handleApply,\n    handleClear,\n    showClear,\n    selectedDraft = [],\n}: FooterProps) => (\n    <div\n        // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n        tabIndex={0}\n        className={styles.footer}\n    >\n        <Button size='xxs' view='primary' onClick={handleApply}>\n            Применить\n        </Button>\n\n        {showClear && selectedDraft.length > 0 && (\n            <Button size='xxs' view='secondary' onClick={handleClear}>\n                Сбросить\n            </Button>\n        )}\n    </div>\n);\n","import React, { FC, forwardRef, RefAttributes, useCallback, useEffect } from 'react';\n\nimport { OptionsList as DefaultOptionsList } from '../../../components/options-list';\nimport { DEFAULT_VISIBLE_OPTIONS } from '../../../consts';\nimport { OptionShape, OptionsListProps } from '../../../typings';\nimport { SELECT_ALL_KEY } from '../hook';\n\nimport { Footer as DefaultFooter, FooterProps } from './footer/Component';\nimport { Header as DefaultHeader, HeaderProps } from './header/Component';\n\ntype OptionsListWithApplyProps = OptionsListProps & {\n    showClear?: boolean;\n    onClose?: () => void;\n    selectedDraft?: OptionShape[];\n    OptionsList?: React.FC<OptionsListProps & RefAttributes<HTMLDivElement>>;\n    Footer?: FC<FooterProps>;\n    Header?: FC<HeaderProps>;\n    headerProps?: HeaderProps;\n    showHeaderWithSelectAll?: boolean;\n};\n\nexport const OptionsListWithApply = forwardRef<HTMLDivElement, OptionsListWithApplyProps>(\n    (\n        {\n            toggleMenu,\n            getOptionProps: defaultGetOptionProps,\n            showClear = true,\n            showHeaderWithSelectAll,\n            selectedDraft = [],\n            flatOptions = [],\n            OptionsList = DefaultOptionsList,\n            onApply = () => null,\n            onClear = () => null,\n            onClose = () => null,\n            visibleOptions = DEFAULT_VISIBLE_OPTIONS,\n            Footer = DefaultFooter,\n            Header = DefaultHeader,\n            headerProps,\n            ...restProps\n        }: OptionsListWithApplyProps,\n        ref,\n    ) => {\n        const getOptionProps = useCallback(\n            (option: OptionShape, index: number) => {\n                const optionProps = defaultGetOptionProps(option, index);\n\n                const selected =\n                    option.key === SELECT_ALL_KEY\n                        ? selectedDraft.length === flatOptions.length - 1\n                        : selectedDraft.includes(option);\n\n                return {\n                    ...optionProps,\n                    selected,\n                };\n            },\n            [defaultGetOptionProps, flatOptions.length, selectedDraft],\n        );\n\n        const handleApply = useCallback(() => {\n            onApply();\n\n            toggleMenu();\n        }, [onApply, toggleMenu]);\n\n        const handleClear = useCallback(() => {\n            onClear();\n\n            toggleMenu();\n        }, [onClear, toggleMenu]);\n\n        useEffect(() => {\n            const activeElement = document.activeElement as HTMLElement;\n\n            return () => {\n                onClose();\n                if (activeElement) {\n                    activeElement.focus();\n                }\n            };\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        return (\n            <OptionsList\n                {...restProps}\n                ref={ref}\n                visibleOptions={visibleOptions}\n                toggleMenu={toggleMenu}\n                flatOptions={flatOptions}\n                getOptionProps={getOptionProps}\n                onApply={handleApply}\n                onClear={handleClear}\n                header={showHeaderWithSelectAll ? <Header {...headerProps} /> : undefined}\n                footer={\n                    <Footer\n                        handleApply={handleApply}\n                        handleClear={handleClear}\n                        showClear={showClear}\n                        selectedDraft={selectedDraft}\n                    />\n                }\n            />\n        );\n    },\n);\n","import { useEffect, useMemo, useRef, useState } from 'react';\n\nimport type { AnyObject, BaseSelectProps, OptionShape } from '../../typings';\nimport { processOptions } from '../../utils';\n\nimport { OptionsListWithApply } from './options-list-with-apply';\n\nexport type UseSelectWithApplyProps = {\n    /**\n     * Список выбранных пунктов\n     */\n    selected: BaseSelectProps['selected'];\n\n    /**\n     * Список вариантов выбора\n     */\n    options: BaseSelectProps['options'];\n\n    /**\n     * Обработчик выбора\n     */\n    onChange: BaseSelectProps['onChange'];\n\n    /**\n     * Компонент выпадающего меню\n     */\n    OptionsList?: BaseSelectProps['OptionsList'];\n\n    /**\n     * Пропсы, которые будут прокинуты в компонент списка\n     */\n    optionsListProps?: BaseSelectProps['optionsListProps'];\n\n    /**\n     * Показывать кнопку очистки\n     */\n    showClear?: boolean;\n\n    /**\n     * Показывать пункт \"Выбрать все\"\n     */\n    showSelectAll?: boolean;\n\n    /**\n     * Показывать пункт \"Выбрать все\" в заголовке списка\n     */\n    showHeaderWithSelectAll?: boolean;\n};\n\nexport const SELECT_ALL_KEY = 'select_all';\n\nconst selectAllOption = { key: SELECT_ALL_KEY, content: 'Выбрать все' };\n\nexport function useSelectWithApply({\n    options,\n    selected,\n    onChange = () => null,\n    OptionsList,\n    optionsListProps = {},\n    showClear = true,\n    showSelectAll = false,\n    showHeaderWithSelectAll = false,\n}: UseSelectWithApplyProps) {\n    const { flatOptions, selectedOptions } = useMemo(\n        () => processOptions(options, selected),\n        [options, selected],\n    );\n\n    const [selectedDraft, setSelectedDraft] = useState<OptionShape[]>(selectedOptions);\n\n    const selectedOptionsRef = useRef<OptionShape[]>(selectedOptions);\n\n    const handleApply = () => {\n        onChange({\n            selected: selectedDraft[0],\n            selectedMultiple: selectedDraft,\n            initiator: null,\n        });\n    };\n\n    const handleClear = () => {\n        setSelectedDraft([]);\n        onChange({\n            selected: null,\n            selectedMultiple: [],\n            initiator: null,\n        });\n    };\n\n    const handleToggleAll = () => {\n        setSelectedDraft(flatOptions.length === selectedDraft.length ? [] : flatOptions);\n    };\n\n    const handleChange: Required<BaseSelectProps>['onChange'] = ({ initiator, ...restArgs }) => {\n        if (!initiator) {\n            onChange({\n                initiator: null,\n                ...restArgs,\n            });\n\n            return;\n        }\n\n        const initiatorSelected =\n            selectedDraft.includes(initiator) ||\n            (initiator.key === SELECT_ALL_KEY && selectedDraft.length === flatOptions.length);\n\n        if (initiator.key === SELECT_ALL_KEY) {\n            setSelectedDraft(initiatorSelected ? [] : flatOptions);\n        } else {\n            setSelectedDraft(\n                initiatorSelected\n                    ? selectedDraft.filter((o) => o !== initiator)\n                    : selectedDraft.concat(initiator),\n            );\n        }\n    };\n\n    const handleClose = () => setSelectedDraft(selectedOptionsRef.current);\n\n    useEffect(() => {\n        setSelectedDraft(selectedOptions);\n        selectedOptionsRef.current = selectedOptions;\n    }, [selectedOptions]);\n\n    const memoizedOptions = useMemo(\n        () => (showSelectAll ? [selectAllOption, ...options] : options),\n        [options, showSelectAll],\n    );\n\n    return {\n        OptionsList: OptionsListWithApply,\n        optionsListProps: {\n            ...(optionsListProps as AnyObject),\n            OptionsList,\n            showClear,\n            onClear: handleClear,\n            onApply: handleApply,\n            onClose: handleClose,\n            selectedDraft,\n            showHeaderWithSelectAll,\n            headerProps: {\n                indeterminate: !!selectedDraft.length && selectedDraft.length < flatOptions.length,\n                checked: selectedDraft.length === flatOptions.length,\n                onChange: handleToggleAll,\n            },\n        },\n        allowUnselect: true,\n        multiple: true,\n        options: memoizedOptions,\n        onChange: handleChange,\n        selected,\n    };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"desktop\":\"desktop_eZJqs\",\"mobile\":\"mobile_yYgHP\"};","import React from 'react';\nimport cn from 'classnames';\n\nimport { Checkbox, CheckboxProps } from '@alfalab/core-components-checkbox';\n\nimport styles from './index.module.css';\n\nexport type HeaderProps = {\n    checked?: boolean;\n    indeterminate?: boolean;\n    onChange?: CheckboxProps['onChange'];\n    mobile?: boolean;\n};\n\nexport const Header: React.FC<HeaderProps> = ({ onChange, checked, indeterminate, mobile }) => (\n    <div className={cn({ [styles.desktop]: !mobile, [styles.mobile]: mobile })}>\n        <Checkbox\n            block={true}\n            indeterminate={indeterminate}\n            size='m'\n            onChange={onChange}\n            checked={checked}\n            label='Выбрать все'\n        />\n    </div>\n);\n","import { cloneElement, isValidElement, ReactNode, RefObject, useEffect, useRef } from 'react';\n\nimport { BaseSelectProps, GroupShape, OptionShape } from './typings';\n\nexport const isGroup = (item: OptionShape | GroupShape): item is GroupShape =>\n    Object.prototype.hasOwnProperty.call(item, 'options');\n\nexport const isOptionShape = (item: OptionShape | string | null): item is OptionShape =>\n    !!item && Object.prototype.hasOwnProperty.call(item, 'key');\n\nexport const joinOptions = ({\n    selected,\n    selectedMultiple,\n}: {\n    selected?: OptionShape;\n    selectedMultiple?: OptionShape[];\n}) => {\n    const options = selectedMultiple || (selected ? [selected] : []);\n\n    if (!options.length) return null;\n\n    return options.reduce((acc: Array<ReactNode | string>, option: OptionShape, index: number) => {\n        if (isValidElement(option.content)) {\n            acc.push(cloneElement(option.content, { key: option.key }));\n        } else {\n            acc.push(option.content);\n        }\n\n        if (index < options.length - 1) acc.push(', ');\n\n        return acc;\n    }, []);\n};\n\n// За один проход делает список пунктов меню плоским и находит выбранные пункты по ключу\nexport function processOptions(\n    options: BaseSelectProps['options'],\n    selected: BaseSelectProps['selected'] = [],\n) {\n    const flatOptions: OptionShape[] = [];\n\n    const selectedArray = Array.isArray(selected) ? selected : [selected];\n    const selectedOptions = selectedArray.filter(isOptionShape);\n    const selectedKeys = selectedArray.filter(\n        (option): option is string => typeof option === 'string',\n    );\n\n    const isSelected = (option: OptionShape) => selectedKeys.includes(option.key);\n\n    const process = (option: OptionShape) => {\n        flatOptions.push(option);\n\n        if (isSelected(option)) {\n            selectedOptions.push(option);\n        }\n    };\n\n    options.forEach((option) => {\n        if (isGroup(option)) {\n            option.options.forEach(process);\n        } else {\n            process(option);\n        }\n    });\n\n    return { flatOptions, selectedOptions };\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ntype useVisibleOptionsArgs = {\n    /**\n     * Количество видимых пунктов\n     */\n    visibleOptions: number;\n\n    /**\n     * Реф на контейнер с пунтами меню\n     */\n    listRef: RefObject<HTMLElement>;\n\n    /**\n     * Реф на контейнер, которому нужно установить высоту\n     */\n    styleTargetRef?: RefObject<HTMLElement>;\n\n    /**\n     * Флаг открытия меню\n     */\n    open?: boolean;\n\n    /**\n     * Позволяет вызвать пересчет высоты\n     */\n    invalidate?: unknown;\n};\n\nexport function useVisibleOptions({\n    visibleOptions,\n    listRef,\n    styleTargetRef = listRef,\n    open,\n    invalidate,\n}: useVisibleOptionsArgs) {\n    useEffect(() => {\n        const list = listRef.current;\n        const styleTarget = styleTargetRef.current;\n\n        if (open && list && styleTarget && visibleOptions > 0) {\n            const childCount = list.children.length;\n            const optionsNodes = ([] as HTMLElement[]).slice.call(\n                list.children,\n                0,\n                visibleOptions + 1,\n            );\n\n            let height = optionsNodes\n                .slice(0, visibleOptions)\n                .reduce((acc, child) => acc + child.clientHeight, 0);\n\n            if (visibleOptions < childCount) {\n                const lastVisibleOptionHeight = optionsNodes[optionsNodes.length - 1].clientHeight;\n\n                // Если кол-во опций больше visibleOptions на 1, то показываем все опции, иначе добавляем половинку\n                height += Math.round(\n                    childCount - visibleOptions === 1\n                        ? lastVisibleOptionHeight\n                        : lastVisibleOptionHeight / 2,\n                );\n            }\n\n            styleTarget.style.height = `${height}px`;\n        }\n    }, [listRef, open, styleTargetRef, visibleOptions, invalidate]);\n}\n\n// TODO: перенести\nexport function usePrevious<T>(value: T) {\n    const ref = useRef<T>();\n\n    useEffect(() => {\n        ref.current = value;\n    }, [value]);\n\n    return ref.current;\n}\n\n// TODO: перенести\nexport const lastIndexOf = <T>(array: T[], predicate: (item: T) => boolean) => {\n    for (let i = array.length - 1; i >= 0; i--) {\n        if (predicate(array[i])) return i;\n    }\n\n    return -1;\n};\n","export const getDataTestId = (dataTestId?: string, element?: string) => {\n    const elementPart = element ? `-${element.toLowerCase()}` : '';\n\n    return dataTestId ? `${dataTestId}${elementPart}` : undefined;\n};\n"],"names":["Option","_ref","option","_jsx","value","key","disabled","children","content","Group","_ref2","label","options","map","NativeSelect","forwardRef","_ref3","ref","className","multiple","name","onChange","restProps","_objectWithoutProperties","_excluded","handleClick","useCallback","event","stopPropagation","_objectSpread","onClick","isGroup","_createElement","BaseSelect","dataTestId","fieldClassName","optionsListClassName","optionClassName","popperClassName","_ref$autocomplete","autocomplete","_ref$multiple","_ref$allowUnselect","allowUnselect","_ref$disabled","_ref$closeOnSelect","closeOnSelect","_ref$circularNavigati","circularNavigation","_ref$nativeSelect","nativeSelect","_ref$defaultOpen","defaultOpen","openProp","open","_ref$popoverPosition","popoverPosition","_ref$preventFlip","preventFlip","_ref$optionsListWidth","optionsListWidth","id","selected","_ref$size","size","_ref$optionsSize","optionsSize","error","hint","block","labelView","placeholder","_ref$fieldProps","fieldProps","_ref$optionsListProps","optionsListProps","_ref$optionProps","optionProps","valueRenderer","onOpen","onFocus","onBlur","onScroll","Arrow","_ref$Field","Field","_ref$OptionsList","OptionsList","_ref$Optgroup","Optgroup","_ref$Option","updatePopover","zIndexPopover","_ref$showEmptyOptions","showEmptyOptionsList","visibleOptions","rootRef","useRef","fieldRef","listRef","initiatorRef","itemToString","_useMemo","useMemo","processOptions","flatOptions","selectedOptions","useMultipleSelectionProps","onSelectedItemsChange","changes","_changes$selectedItem","selectedItems","selectedMultiple","length","initiator","current","stateReducer","state","actionAndChanges","type","useMultipleSelection","undefined","_useMultipleSelection","addSelectedItem","setSelectedItems","removeSelectedItem","getDropdownProps","_useCombobox","useCombobox","isOpen","items","defaultHighlightedIndex","onIsOpenChange","setTimeout","selectedItem","alreadySelected","includes","allowRemove","highlightedIndex","getMenuProps","getInputProps","getItemProps","getComboboxProps","getLabelProps","toggleMenu","openMenu","menuProps","suppressRefError","inputProps","mergeRefs","handleNativeSelectChange","_toConsumableArray","target","reduce","acc","index","concat","getOptionProps","innerProps","item","onMouseDown","preventDefault","highlighted","getDataTestId","useEffect","calcOptionsListWidth","widthAttr","optionsListMinWidth","getBoundingClientRect","width","setAttribute","style","observer","window","ResizeObserver","ResizeObserverPolyfill","observe","disconnect","useLayoutEffect_SAFE_FOR_SSR","renderValue","renderNativeSelect","styles","needRenderOptionsList","_jsxs","cn","_defineProperty","onKeyDown","handleFieldKeyDown","tagName","tabIndex","handleFieldBlur","_listRef$current","contains","relatedTarget","document","activeElement","handleFieldFocus","handleFieldClick","Popover","withTransition","anchorElement","position","update","zIndex","SelectDesktop","_ref$Arrow","DefaultArrow","DefaultField","DefaultOptionsList","DefaultOptgroup","DefaultOption","SelectMobile","DefaultVirtualOptionsList","bottomSheetProps","_ref$showClear","showClear","showSelectAll","showHeaderWithSelectAll","_ref$useWithApplyHook","useWithApplyHook","applyProps","useSelectWithApply","Footer","BaseSelectMobile","isBottomSheet","bottomAddons","Header","headerProps","mobile","ChevronDownMIcon","handleApply","handleClear","_useContext","useContext","BaseModalContext","footerHighlighted","setHasFooter","Button","view","optionGroupClassName","_ref$options","_ref$selected","swipeable","footer","modalProps","modalHeaderProps","modalFooterProps","alreadyClickedRef","scrollableContainerRef","handleClose","renderOptionsList","BottomSheet","onClose","contentClassName","containerClassName","title","actionButton","stickyHeader","hasCloser","ModalMobile","_modalProps$onClose","_len","arguments","args","Array","_key","call","apply","sticky","_cn","_ref$labelView","_ref$selectedMultiple","rightAddons","_ref$valueRenderer","joinOptions","_useState","useState","_useState2","_slicedToArray","focused","setFocused","wrapperRef","_useFocus","useFocus","focusVisible","handleFocus","handleBlur","filled","Boolean","showLabel","FormControl","React","Checkmark","_ref$position","single","checkmarkClassNames","handleCheckboxClick","Badge","iconColor","CheckmarkCircleMIcon","CheckmarkMIcon","Checkbox","checked","_ref$Checkmark","DefaultMobileCheckmark","DefaultCheckMark","_option$showCheckMark","showCheckMark","isValidElement","emptyPlaceholder","_ref$visibleOptions","DEFAULT_VISIBLE_OPTIONS","header","_ref$showFooter","showFooter","nativeScrollbarProp","nativeScrollbar","_ref$flatOptions","_useMedia","useMedia","renderOption","scrollbarRef","counter","createCounter","count","useVisibleOptions","styleTargetRef","invalidate","renderListItems","renderGroup","group","renderWithNativeScrollbar","renderWithCustomScrollbar","scrollableNodeProps","Scrollbar","horizontalAutoStretch","contentNodeProps","VirtualOptionsList","_ref$highlightedIndex","parentRef","visibleOptionsInvalidateKey","setVisibleOptionsInvalidateKey","prevHighlightedIndex","usePrevious","rowVirtualizer","useVirtual","overscan","scrollToIndex","align","virtualItems","some","notDisabled","firstNonDisabled","findIndex","lastNonDisabled","lastIndexOf","groupStartIndexes","currentIndex","renderList","virtualRow","measureRef","transform","start","height","totalSize","SelectResponsive","_ref$breakpoint","breakpoint","SelectModalMobile","_ref$selectedDraft","selectedDraft","OptionsListWithApply","defaultGetOptionProps","_ref$onApply","onApply","_ref$onClear","onClear","_ref$onClose","_ref$Footer","DefaultFooter","_ref$Header","DefaultHeader","SELECT_ALL_KEY","focus","selectAllOption","_ref$onChange","_ref$showSelectAll","_ref$showHeaderWithSe","setSelectedDraft","selectedOptionsRef","memoizedOptions","indeterminate","handleToggleAll","handleChange","restArgs","initiatorSelected","filter","o","Object","prototype","hasOwnProperty","isOptionShape","push","cloneElement","selectedArray","isArray","selectedKeys","process","isSelected","forEach","_ref2$styleTargetRef","list","styleTarget","childCount","optionsNodes","slice","child","clientHeight","lastVisibleOptionHeight","Math","round","array","predicate","i","element","elementPart","toLowerCase"],"sourceRoot":""}