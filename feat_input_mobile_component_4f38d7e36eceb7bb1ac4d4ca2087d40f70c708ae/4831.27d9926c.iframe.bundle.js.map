{"version":3,"file":"4831.27d9926c.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./packages/select/src/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/arrow/index.module.css?9ca6","webpack://@alfalab/core-components/./packages/select/src/components/arrow/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/native-select/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/base-select/index.module.css?7b4b","webpack://@alfalab/core-components/./packages/select/src/components/base-select/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/field/index.module.css?c913","webpack://@alfalab/core-components/./packages/select/src/components/field/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/optgroup/index.module.css?b6c6","webpack://@alfalab/core-components/./packages/select/src/components/optgroup/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/checkmark/index.module.css?72e3","webpack://@alfalab/core-components/./packages/select/src/components/checkmark/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/checkmark-mobile/index.module.css?3860","webpack://@alfalab/core-components/./packages/select/src/components/checkmark-mobile/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/option/index.module.css?74cb","webpack://@alfalab/core-components/./packages/select/src/components/option/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/options-list/index.module.css?7337","webpack://@alfalab/core-components/./packages/select/src/components/options-list/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/consts.ts","webpack://@alfalab/core-components/./packages/select/src/utils.ts","webpack://@alfalab/core-components/./packages/utils/getDataTestId.ts"],"sourcesContent":["import React, { forwardRef } from 'react';\n\nimport {\n    FormControlDesktop,\n    FormControlDesktopProps,\n} from '@alfalab/core-components-form-control/desktop';\n\nimport { Arrow as DefaultArrow } from './components/arrow';\nimport { BaseSelect } from './components/base-select';\nimport { Field as DefaultField } from './components/field';\nimport { Optgroup as DefaultOptgroup } from './components/optgroup';\nimport { Option as DefaultOption } from './components/option';\nimport { OptionsList as DefaultOptionsList } from './components/options-list';\nimport { BaseSelectProps } from './typings';\n\nexport type SelectFieldProps = Omit<FormControlDesktopProps, 'size'> & Record<string, unknown>;\n\nexport type SelectProps = Omit<BaseSelectProps, 'fieldProps'> & {\n    /**\n     * Пропсы, которые будут прокинуты в компонент поля\n     */\n    fieldProps?: SelectFieldProps;\n};\n\nexport const Select = forwardRef<HTMLDivElement, SelectProps>(\n    (\n        {\n            Arrow = DefaultArrow,\n            Field = DefaultField,\n            OptionsList = DefaultOptionsList,\n            Optgroup = DefaultOptgroup,\n            Option = DefaultOption,\n            fieldProps={},\n            ...restProps\n        },\n        ref,\n    ) => (\n        <BaseSelect\n            ref={ref}\n            Option={Option}\n            Field={Field}\n            fieldProps={{\n                FormControlComponent: FormControlDesktop,\n                ...(fieldProps as object),\n            }}\n            Optgroup={Optgroup}\n            OptionsList={OptionsList}\n            Arrow={Arrow}\n            {...restProps}\n        />\n    ),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"arrow\":\"arrow_Fidyu\",\"open\":\"open_JDO2N\"};","import React from 'react';\nimport cn from 'classnames';\n\nimport { ChevronDownMIcon } from '@alfalab/icons-glyph/ChevronDownMIcon';\n\nimport { ArrowProps } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport const Arrow = ({ open, className }: ArrowProps) => (\n    <ChevronDownMIcon className={cn(styles.arrow, className, { [styles.open]: open })} />\n);\n","import React, { forwardRef, SelectHTMLAttributes, useCallback } from 'react';\n\nimport { GroupShape, OptionShape } from '../../typings';\nimport { isGroup } from '../../utils';\n\nexport type NativeSelectProps = SelectHTMLAttributes<HTMLSelectElement> & {\n    /**\n     * Список вариантов выбора\n     */\n    options: Array<OptionShape | GroupShape>;\n\n    /**\n     * Значение селекта\n     */\n    value: string | string[];\n};\n\nconst Option = ({ option }: { option: OptionShape }) => (\n    <option value={option.key} disabled={option.disabled}>\n        {typeof option.content === 'string' ? option.content : option.key}\n    </option>\n);\n\nconst Group = ({ label, options }: GroupShape) => (\n    <optgroup label={label}>\n        {options.map((option) => (\n            <Option option={option} key={option.key} />\n        ))}\n    </optgroup>\n);\n\nexport const NativeSelect = forwardRef<HTMLSelectElement, NativeSelectProps>(\n    ({ className, disabled, multiple, value, name, options, onChange, ...restProps }, ref) => {\n        const handleClick = useCallback((event: React.MouseEvent<HTMLSelectElement>) => {\n            event.stopPropagation();\n        }, []);\n\n        return (\n            <select\n                className={className}\n                disabled={disabled}\n                multiple={multiple}\n                name={name}\n                value={value}\n                onChange={onChange}\n                onClick={handleClick}\n                ref={ref}\n                {...restProps}\n            >\n                {options.map((option) =>\n                    isGroup(option) ? (\n                        <Group {...option} key={option.label} />\n                    ) : (\n                        <Option option={option} key={option.key} />\n                    ),\n                )}\n            </select>\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_p63D9\",\"popoverInner\":\"popoverInner_gx5Ai\",\"optionsList\":\"optionsList_Ni45G\",\"optionsListBorder\":\"optionsListBorder_QZAA4\",\"nativeSelect\":\"nativeSelect_rLoGL\",\"block\":\"block_wKlh2\"};","/* eslint-disable no-nested-ternary */\nimport React, {\n    FocusEvent,\n    forwardRef,\n    KeyboardEvent,\n    MouseEvent,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { ResizeObserver as ResizeObserverPolyfill } from '@juggle/resize-observer';\nimport cn from 'classnames';\nimport {\n    useCombobox,\n    useMultipleSelection,\n    UseMultipleSelectionProps,\n    UseMultipleSelectionState,\n} from 'downshift';\n\nimport { Popover } from '@alfalab/core-components-popover';\nimport { useLayoutEffect_SAFE_FOR_SSR } from '@alfalab/hooks';\n\nimport { getDataTestId } from '../../../../utils';\nimport { AnyObject, BaseSelectProps, OptionShape } from '../../typings';\nimport { processOptions } from '../../utils';\nimport { NativeSelect } from '../native-select';\n\nimport styles from './index.module.css';\n\nexport const BaseSelect = forwardRef(\n    (\n        {\n            dataTestId,\n            className,\n            fieldClassName,\n            optionsListClassName,\n            optionClassName,\n            popperClassName,\n            options,\n            autocomplete = false,\n            multiple = false,\n            allowUnselect = false,\n            disabled = false,\n            closeOnSelect = !multiple,\n            circularNavigation = false,\n            nativeSelect = false,\n            defaultOpen = false,\n            open: openProp,\n            popoverPosition = 'bottom-start',\n            preventFlip = true,\n            optionsListWidth = 'content',\n            name,\n            id,\n            selected,\n            size = 's',\n            optionsSize = size,\n            error,\n            hint,\n            block,\n            label,\n            labelView,\n            placeholder,\n            fieldProps = {},\n            optionsListProps = {},\n            optionProps = {},\n            valueRenderer,\n            onChange,\n            onOpen,\n            onFocus,\n            onBlur,\n            onScroll,\n            Arrow,\n            Field = () => null,\n            OptionsList = () => null,\n            Optgroup = () => null,\n            Option = () => null,\n            updatePopover,\n            zIndexPopover,\n            showEmptyOptionsList = false,\n            visibleOptions,\n        }: BaseSelectProps,\n        ref,\n    ) => {\n        const rootRef = useRef<HTMLLabelElement>(null);\n        const fieldRef = useRef<HTMLInputElement>(null);\n        const listRef = useRef<HTMLDivElement>(null);\n        const initiatorRef = useRef<OptionShape | null>(null);\n\n        const itemToString = (option: OptionShape) => (option ? option.key : '');\n\n        const { flatOptions, selectedOptions } = useMemo(\n            () => processOptions(options, selected),\n            [options, selected],\n        );\n\n        const useMultipleSelectionProps: UseMultipleSelectionProps<OptionShape> = {\n            itemToString,\n            onSelectedItemsChange: (changes) => {\n                if (onChange) {\n                    const { selectedItems = [] } = changes;\n\n                    onChange({\n                        selectedMultiple: selectedItems,\n                        selected: selectedItems.length ? selectedItems[0] : null,\n                        initiator: initiatorRef.current,\n                        name,\n                    });\n\n                    initiatorRef.current = null;\n                }\n            },\n            stateReducer: (state, actionAndChanges) => {\n                const { type, changes } = actionAndChanges;\n\n                if (\n                    !allowUnselect &&\n                    type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace\n                ) {\n                    return state;\n                }\n\n                return changes as UseMultipleSelectionState<OptionShape>;\n            },\n        };\n\n        if (selected !== undefined) {\n            useMultipleSelectionProps.selectedItems = selectedOptions;\n        }\n\n        const {\n            selectedItems,\n            addSelectedItem,\n            setSelectedItems,\n            removeSelectedItem,\n            getDropdownProps,\n        } = useMultipleSelection(useMultipleSelectionProps);\n\n        const {\n            isOpen: open,\n            getMenuProps,\n            getInputProps,\n            getItemProps,\n            getComboboxProps,\n            getLabelProps,\n            highlightedIndex,\n            toggleMenu,\n            openMenu,\n        } = useCombobox<OptionShape>({\n            id,\n            isOpen: openProp,\n            circularNavigation,\n            items: flatOptions,\n            itemToString,\n            defaultHighlightedIndex: selectedItems.length === 0 ? -1 : undefined,\n            onIsOpenChange: (changes) => {\n                if (onOpen) {\n                    /**\n                     *  Вызываем обработчик асинхронно.\n                     *\n                     * Иначе при клике вне открытого селекта сначала сработает onOpen, который закроет селект,\n                     * А затем сработает onClick кнопки открытия\\закрытия с open=false и в итоге селект откроется снова.\n                     */\n                    setTimeout(() => {\n                        onOpen({\n                            open: changes.isOpen,\n                            name,\n                        });\n                    }, 0);\n                }\n            },\n            stateReducer: (state, actionAndChanges) => {\n                const { type, changes } = actionAndChanges;\n                const { selectedItem } = changes;\n\n                switch (type) {\n                    case useCombobox.stateChangeTypes.InputKeyDownEnter:\n                    case useCombobox.stateChangeTypes.ItemClick:\n                        initiatorRef.current = selectedItem;\n\n                        if (selectedItem && !selectedItem.disabled) {\n                            const alreadySelected = selectedItems.includes(selectedItem);\n                            const allowRemove =\n                                allowUnselect || (multiple && selectedItems.length > 1);\n\n                            if (alreadySelected && allowRemove) {\n                                removeSelectedItem(selectedItem);\n                            }\n\n                            if (!alreadySelected) {\n                                if (multiple) {\n                                    addSelectedItem(selectedItem);\n                                } else {\n                                    setSelectedItems([selectedItem]);\n                                }\n                            }\n                        }\n\n                        return {\n                            ...changes,\n                            isOpen: !closeOnSelect,\n                            // при closeOnSelect === false - сохраняем подсвеченный индекс\n                            highlightedIndex:\n                                state.isOpen && !closeOnSelect\n                                    ? state.highlightedIndex\n                                    : changes.highlightedIndex,\n                        };\n                    default:\n                        return changes;\n                }\n            },\n        });\n\n        const menuProps = (getMenuProps as (options: object, additional: object) => AnyObject)(\n            { ref: listRef },\n            { suppressRefError: true },\n        );\n        const inputProps = getInputProps(getDropdownProps({ ref: mergeRefs([ref, fieldRef]) }));\n\n        const handleFieldFocus = (event: FocusEvent<HTMLDivElement | HTMLInputElement>) => {\n            if (onFocus) onFocus(event);\n\n            if (autocomplete && !open) {\n                openMenu();\n            }\n        };\n\n        const handleFieldBlur = (event: FocusEvent<HTMLDivElement | HTMLInputElement>) => {\n            const isNextFocusInsideList = listRef.current?.contains(\n                (event.relatedTarget || document.activeElement) as HTMLElement,\n            );\n\n            if (!isNextFocusInsideList) {\n                if (onBlur) onBlur(event);\n\n                inputProps.onBlur(event);\n            }\n        };\n\n        const handleFieldKeyDown = (event: KeyboardEvent<HTMLDivElement | HTMLInputElement>) => {\n            inputProps.onKeyDown(event);\n            if (autocomplete && !open && (event.key.length === 1 || event.key === 'Backspace')) {\n                // Для автокомплита - открываем меню при начале ввода\n                openMenu();\n            }\n\n            if (\n                [' ', 'Enter'].includes(event.key) &&\n                !autocomplete &&\n                !nativeSelect &&\n                (event.target as HTMLElement).tagName !== 'INPUT' &&\n                (event.target as HTMLElement).tagName !== 'BUTTON'\n            ) {\n                // Открываем\\закрываем меню по нажатию enter или пробела\n                event.preventDefault();\n                if (!open || highlightedIndex === -1) toggleMenu();\n            }\n        };\n\n        const handleFieldClick = (event: MouseEvent) => {\n            if (!autocomplete || (event.target as HTMLElement).tagName !== 'INPUT') {\n                toggleMenu();\n            } else {\n                openMenu();\n            }\n        };\n\n        const handleNativeSelectChange = useCallback(\n            (event: React.ChangeEvent<HTMLSelectElement>) => {\n                setSelectedItems(\n                    // eslint-disable-next-line\n                    [...(event.target.options as any)].reduce(\n                        (acc, option, index) =>\n                            option.selected ? acc.concat(flatOptions[index]) : acc,\n                        [],\n                    ),\n                );\n            },\n            [flatOptions, setSelectedItems],\n        );\n\n        const getOptionProps = useCallback(\n            (option: OptionShape, index: number) => ({\n                ...(optionProps as object),\n                className: optionClassName,\n                innerProps: getItemProps({\n                    index,\n                    item: option,\n                    disabled: option.disabled,\n                    onMouseDown: (event: MouseEvent) => event.preventDefault(),\n                }),\n                multiple,\n                index,\n                option,\n                size: optionsSize,\n                disabled: option.disabled,\n                highlighted: index === highlightedIndex,\n                selected: selectedItems.includes(option),\n                dataTestId: getDataTestId(dataTestId, 'option'),\n            }),\n            [\n                dataTestId,\n                getItemProps,\n                highlightedIndex,\n                multiple,\n                optionClassName,\n                optionProps,\n                optionsSize,\n                selectedItems,\n            ],\n        );\n\n        useEffect(() => {\n            if (defaultOpen) openMenu();\n        }, [defaultOpen, openMenu]);\n\n        useEffect(() => {\n            if (openProp) {\n                openMenu();\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        const calcOptionsListWidth = useCallback(() => {\n            if (listRef.current) {\n                const widthAttr = optionsListWidth === 'field' ? 'width' : 'minWidth';\n\n                const optionsListMinWidth = rootRef.current\n                    ? rootRef.current.getBoundingClientRect().width\n                    : 0;\n\n                listRef.current.setAttribute('style', '');\n                listRef.current.style[widthAttr] = `${optionsListMinWidth}px`;\n            }\n        }, [optionsListWidth]);\n\n        useEffect(() => {\n            const ResizeObserver = window.ResizeObserver || ResizeObserverPolyfill;\n            const observer = new ResizeObserver(calcOptionsListWidth);\n\n            if (rootRef.current) {\n                observer.observe(rootRef.current);\n            }\n\n            return () => {\n                observer.disconnect();\n            };\n        }, [calcOptionsListWidth, open, optionsListWidth]);\n\n        useLayoutEffect_SAFE_FOR_SSR(calcOptionsListWidth, [\n            open,\n            optionsListWidth,\n            options,\n            selectedItems,\n        ]);\n\n        const renderValue = useCallback(\n            () =>\n                selectedItems.map((option) => (\n                    <input type='hidden' name={name} value={option.key} key={option.key} />\n                )),\n            [selectedItems, name],\n        );\n\n        const renderNativeSelect = useCallback(() => {\n            const value = multiple\n                ? selectedItems.map((option) => option.key)\n                : (selectedItems[0] || {}).key;\n\n            return (\n                <NativeSelect\n                    {...menuProps}\n                    className={styles.nativeSelect}\n                    disabled={disabled}\n                    multiple={multiple}\n                    name={name}\n                    value={value}\n                    onChange={handleNativeSelectChange}\n                    options={options}\n                />\n            );\n        }, [multiple, selectedItems, disabled, name, handleNativeSelectChange, options, menuProps]);\n\n        const needRenderOptionsList = flatOptions.length > 0 || showEmptyOptionsList;\n\n        return (\n            <div\n                {...getComboboxProps({\n                    ref: rootRef,\n                    ...(disabled && { 'aria-disabled': true }),\n                    className: cn(styles.component, { [styles.block]: block }, className),\n                })}\n                onKeyDown={disabled ? undefined : handleFieldKeyDown}\n                tabIndex={-1}\n                data-test-id={getDataTestId(dataTestId)}\n            >\n                {nativeSelect && renderNativeSelect()}\n\n                <Field\n                    selectedMultiple={selectedItems}\n                    selected={selectedItems[0]}\n                    setSelectedItems={setSelectedItems}\n                    toggleMenu={toggleMenu}\n                    multiple={multiple}\n                    open={open}\n                    disabled={disabled}\n                    size={size}\n                    placeholder={placeholder}\n                    label={label && <span {...getLabelProps()}>{label}</span>}\n                    labelView={labelView}\n                    Arrow={Arrow && <Arrow open={open} />}\n                    error={error}\n                    hint={hint}\n                    valueRenderer={valueRenderer}\n                    className={fieldClassName}\n                    innerProps={{\n                        onBlur: handleFieldBlur,\n                        onFocus: disabled ? undefined : handleFieldFocus,\n                        onClick: disabled ? undefined : handleFieldClick,\n                        tabIndex: disabled ? undefined : nativeSelect ? -1 : 0,\n                        ref: mergeRefs([inputProps.ref]),\n                        id: inputProps.id,\n                        'aria-labelledby': inputProps['aria-labelledby'],\n                        'aria-controls': inputProps['aria-controls'],\n                        'aria-autocomplete': autocomplete\n                            ? inputProps['aria-autocomplete']\n                            : undefined,\n                    }}\n                    dataTestId={getDataTestId(dataTestId, 'field')}\n                    {...(fieldProps as AnyObject)}\n                />\n\n                {name && !nativeSelect && renderValue()}\n\n                {!nativeSelect && (\n                    <Popover\n                        open={open}\n                        withTransition={false}\n                        anchorElement={fieldRef.current as HTMLElement}\n                        position={popoverPosition}\n                        preventFlip={preventFlip}\n                        popperClassName={cn(styles.popoverInner, popperClassName)}\n                        update={updatePopover}\n                        zIndex={zIndexPopover}\n                    >\n                        {needRenderOptionsList && (\n                            <div\n                                {...menuProps}\n                                className={cn(optionsListClassName, styles.optionsList)}\n                            >\n                                <OptionsList\n                                    {...(optionsListProps as AnyObject)}\n                                    optionsListWidth={optionsListWidth}\n                                    flatOptions={flatOptions}\n                                    highlightedIndex={highlightedIndex}\n                                    open={open}\n                                    size={size}\n                                    options={options}\n                                    Optgroup={Optgroup}\n                                    Option={Option}\n                                    selectedItems={selectedItems}\n                                    setSelectedItems={setSelectedItems}\n                                    toggleMenu={toggleMenu}\n                                    getOptionProps={getOptionProps}\n                                    visibleOptions={visibleOptions}\n                                    onScroll={onScroll}\n                                    dataTestId={getDataTestId(dataTestId, 'options-list')}\n                                />\n                                <div className={styles.optionsListBorder} />\n                            </div>\n                        )}\n                    </Popover>\n                )}\n            </div>\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_zOUqa\",\"field\":\"field_dLiU8\",\"disabled\":\"disabled_V9ICB\",\"arrow\":\"arrow_J35rX\",\"placeholder\":\"placeholder_ipIF4\",\"contentWrapper\":\"contentWrapper_zxzjS\",\"value\":\"value_WHuoX\",\"focusVisible\":\"focusVisible_otvIz\"};","import React, { ElementType, useCallback, useRef, useState } from 'react';\nimport cn from 'classnames';\n\nimport { FormControlProps } from '@alfalab/core-components-form-control';\nimport { useFocus } from '@alfalab/hooks';\n\nimport { FieldProps as BaseFieldProps } from '../../typings';\nimport { joinOptions } from '../../utils';\n\nimport styles from './index.module.css';\n\ntype FieldProps = {\n    /**\n     * Компонент FormControl\n     */\n    FormControlComponent?: ElementType;\n};\n\nexport const Field = ({\n    size = 'm',\n    open,\n    multiple,\n    error,\n    hint,\n    disabled,\n    label,\n    labelView = 'inner',\n    placeholder,\n    selectedMultiple = [],\n    selected,\n    rightAddons,\n    valueRenderer = joinOptions,\n    setSelectedItems,\n    toggleMenu,\n    Arrow,\n    innerProps,\n    dataTestId,\n    fieldClassName,\n    FormControlComponent,\n    ...restProps\n}: BaseFieldProps & FormControlProps & FieldProps) => {\n    const [focused, setFocused] = useState(false);\n\n    const wrapperRef = useRef<HTMLDivElement>(null);\n\n    const [focusVisible] = useFocus(wrapperRef, 'keyboard');\n\n    const handleFocus = useCallback(() => setFocused(true), []);\n    const handleBlur = useCallback(() => setFocused(false), []);\n\n    const value = valueRenderer({ selected, selectedMultiple });\n\n    const filled = Boolean(value);\n    const showLabel = !!label && (filled || !placeholder || labelView === 'outer');\n\n    return (\n        <div\n            className={styles.component}\n            ref={wrapperRef}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n        >\n            {FormControlComponent ? (\n                <FormControlComponent\n                    fieldClassName={cn(styles.field, fieldClassName, {\n                        [styles.disabled]: disabled,\n                        [styles.focusVisible]: focusVisible,\n                    })}\n                    block={true}\n                    size={size}\n                    focused={open || focused}\n                    disabled={disabled}\n                    filled={filled}\n                    label={showLabel && label}\n                    labelView={labelView}\n                    error={error}\n                    hint={hint}\n                    rightAddons={\n                        (Arrow || rightAddons) && (\n                            <React.Fragment>\n                                {rightAddons}\n                                {/* TODO: стоит переделать, но это будет мажорка */}\n                                {Arrow\n                                    ? React.cloneElement(Arrow, { className: styles.arrow })\n                                    : null}\n                            </React.Fragment>\n                        )\n                    }\n                    data-test-id={dataTestId}\n                    {...restProps}\n                    {...innerProps}\n                >\n                    <div className={styles.contentWrapper}>\n                        {placeholder && !filled && (\n                            <span className={styles.placeholder}>{placeholder}</span>\n                        )}\n                        {filled && <div className={styles.value}>{value}</div>}\n                    </div>\n                </FormControlComponent>\n            ) : null}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"optgroup\":\"optgroup_q8FGV\",\"label\":\"label_YEkB6\",\"l\":\"l_ns03o\",\"xl\":\"xl_Cgp4G\"};","import React from 'react';\nimport cn from 'classnames';\n\nimport { OptgroupProps } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport const Optgroup = ({ children, className, label, size = 's' }: OptgroupProps) => (\n    <React.Fragment>\n        <div className={cn(styles.optgroup, className, styles[size])}>\n            <span className={styles.label}>{label}</span>\n        </div>\n        {children}\n    </React.Fragment>\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkmark\":\"checkmark_CSCCc\",\"after\":\"after_aCWWU\",\"single\":\"single_XrElb\",\"selected\":\"selected_gJ5q_\",\"before\":\"before_A2aV6\",\"multiple\":\"multiple_enpsV\",\"colorIcon\":\"colorIcon_pQ3if\"};","import React, { useCallback } from 'react';\nimport cn from 'classnames';\n\nimport { Badge } from '@alfalab/core-components-badge';\nimport { Checkbox, CheckboxProps } from '@alfalab/core-components-checkbox';\nimport { CheckmarkCircleMIcon } from '@alfalab/icons-glyph/CheckmarkCircleMIcon';\nimport CheckmarkMIcon from '@alfalab/icons-glyph/CheckmarkMIcon';\n\nimport { CheckmarkProps } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport const Checkmark = ({\n    selected,\n    disabled = false,\n    className,\n    multiple,\n    position = 'before',\n}: CheckmarkProps) => {\n    const single = !multiple;\n\n    const checkmarkClassNames = cn(styles.checkmark, className, styles[position], {\n        [styles.multiple]: !single,\n        [styles.single]: single,\n        [styles.selected]: selected,\n    });\n\n    const handleCheckboxClick = useCallback<Required<CheckboxProps>['onClick']>(\n        (event) => event.stopPropagation(),\n        [],\n    );\n\n    return single ? (\n        <div className={checkmarkClassNames}>\n            {position === 'before' ? (\n                <Badge\n                    className={styles.after}\n                    view='icon'\n                    size='m'\n                    iconColor='positive'\n                    content={<CheckmarkCircleMIcon className={styles.colorIcon} />}\n                />\n            ) : (\n                <CheckmarkMIcon className={cn(styles.displayIcon)} />\n            )}\n        </div>\n    ) : (\n        <Checkbox\n            checked={selected}\n            disabled={disabled}\n            className={checkmarkClassNames}\n            size='m'\n            onClick={handleCheckboxClick}\n        />\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"checkmark\":\"checkmark_rWzcg\",\"selected\":\"selected_wACln\",\"displayIcon\":\"displayIcon_GEtCs\",\"displayBadge\":\"displayBadge_ei_LP\"};","import React from 'react';\nimport cn from 'classnames';\n\nimport { CheckmarkMIcon } from '@alfalab/icons-glyph/CheckmarkMIcon';\n\nimport { CheckmarkProps } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport const Checkmark = ({ selected, className }: CheckmarkProps) => (\n    <div\n        className={cn(styles.checkmark, className, {\n            [styles.selected]: selected,\n        })}\n    >\n        <CheckmarkMIcon className={styles.displayIcon} />\n    </div>\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"option\":\"option_gwrUy\",\"disabled\":\"disabled__Fu13\",\"s\":\"s_utmIH\",\"m\":\"m_Dt3qv\",\"l\":\"l_rPQbN\",\"xl\":\"xl_m_KYY\",\"selected\":\"selected_hRgWF\",\"highlighted\":\"highlighted_kJT1g\",\"content\":\"content_ExbhC\",\"textContent\":\"textContent_IMZ6e\"};","import React, { FC, isValidElement } from 'react';\nimport cn from 'classnames';\n\nimport { OptionProps } from '../../typings';\nimport { Checkmark as DefaultCheckMark } from '../checkmark';\nimport { Checkmark as DefaultMobileCheckmark } from '../checkmark-mobile';\n\nimport styles from './index.module.css';\n\nexport const Option: FC<OptionProps> = ({\n    size = 's',\n    className,\n    option,\n    children,\n    selected,\n    highlighted,\n    disabled,\n    multiple,\n    mobile,\n    Checkmark = mobile ? DefaultMobileCheckmark : DefaultCheckMark,\n    innerProps,\n    dataTestId,\n}) => {\n    const content = children || option.content || option.key;\n    const { showCheckMark = true } = option;\n\n    return (\n        <div\n            {...innerProps}\n            className={cn(styles.option, styles[size], className, {\n                [styles.highlighted]: !mobile && highlighted,\n                [styles.selected]: selected,\n                [styles.disabled]: disabled,\n            })}\n            data-test-id={dataTestId}\n        >\n            {Checkmark && showCheckMark && (\n                <Checkmark\n                    disabled={disabled}\n                    selected={selected}\n                    multiple={multiple}\n                    position='before'\n                />\n            )}\n\n            <div\n                className={cn(styles.content, {\n                    [styles.textContent]: !isValidElement(content),\n                })}\n            >\n                {content}\n            </div>\n\n            {/** Workaround чтобы для клика показывать отметку справа и всегда в виде иконки */}\n            {Checkmark && showCheckMark && (\n                <Checkmark\n                    disabled={disabled}\n                    selected={selected}\n                    multiple={multiple}\n                    position='after'\n                />\n            )}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"optionsList\":\"optionsList_dWWP1\",\"optionsListHeader\":\"optionsListHeader_l6dzu\",\"optionsListFooter\":\"optionsListFooter_RLFvC\",\"withBorder\":\"withBorder_B_X9i\",\"scrollable\":\"scrollable_gc3Nx\",\"emptyPlaceholder\":\"emptyPlaceholder_rowx2\",\"l\":\"l_uu6sb\",\"xl\":\"xl_hSRK3\"};","import React, { forwardRef, useRef } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport cn from 'classnames';\n\nimport { Scrollbar } from '@alfalab/core-components-scrollbar';\nimport { useMedia } from '@alfalab/hooks';\n\nimport { DEFAULT_VISIBLE_OPTIONS } from '../../consts';\nimport { GroupShape, OptionShape, OptionsListProps } from '../../typings';\nimport { isGroup, useVisibleOptions } from '../../utils';\nimport { Optgroup as DefaultOptgroup } from '../optgroup';\n\nimport styles from './index.module.css';\n\nconst createCounter = () => {\n    let count = 0;\n\n    // eslint-disable-next-line no-plusplus\n    return () => count++;\n};\n\nexport const OptionsList = forwardRef<HTMLDivElement, OptionsListProps>(\n    (\n        {\n            size = 's',\n            className,\n            optionGroupClassName,\n            Option,\n            getOptionProps,\n            options = [],\n            Optgroup = DefaultOptgroup,\n            dataTestId,\n            emptyPlaceholder,\n            visibleOptions = DEFAULT_VISIBLE_OPTIONS,\n            onScroll,\n            open,\n            header,\n            footer,\n            showFooter = true,\n            optionsListWidth,\n            nativeScrollbar: nativeScrollbarProp,\n            flatOptions = [],\n        },\n        ref,\n    ) => {\n        let [nativeScrollbar] = useMedia<boolean>([[true, '(max-width: 1023px)']], false);\n\n        nativeScrollbar = Boolean(nativeScrollbarProp ?? nativeScrollbar);\n\n        const renderOption = (option: OptionShape, index: number) => (\n            <Option key={option.key} {...getOptionProps(option, index)} />\n        );\n\n        const listRef = useRef<HTMLDivElement>(null);\n        const scrollbarRef = useRef<HTMLDivElement>(null);\n        const counter = createCounter();\n        const renderGroup = (group: GroupShape) => (\n            <Optgroup\n                className={optionGroupClassName}\n                label={group.label}\n                key={group.label}\n                size={size}\n            >\n                {group.options.map((option) => renderOption(option, counter()))}\n            </Optgroup>\n        );\n\n        useVisibleOptions({\n            ...(!nativeScrollbar && { styleTargetRef: scrollbarRef }),\n            visibleOptions,\n            listRef,\n            open,\n            invalidate: options,\n        });\n\n        if (options.length === 0 && !emptyPlaceholder) {\n            return null;\n        }\n\n        const renderListItems = () => (\n            <React.Fragment>\n                {options.map((option) =>\n                    isGroup(option) ? renderGroup(option) : renderOption(option, counter()),\n                )}\n\n                {emptyPlaceholder && options.length === 0 && (\n                    <div className={styles.emptyPlaceholder}>{emptyPlaceholder}</div>\n                )}\n            </React.Fragment>\n        );\n\n        const renderWithCustomScrollbar = () => {\n            const scrollableNodeProps = {\n                onScroll,\n                'data-test-id': dataTestId,\n                ref: ref as React.RefObject<HTMLDivElement>,\n            };\n\n            return (\n                <Scrollbar\n                    className={styles.scrollable}\n                    ref={scrollbarRef}\n                    horizontalAutoStretch={optionsListWidth === 'content'}\n                    scrollableNodeProps={scrollableNodeProps}\n                    contentNodeProps={{ ref: listRef }}\n                >\n                    {renderListItems()}\n                </Scrollbar>\n            );\n        };\n\n        const renderWithNativeScrollbar = () => (\n            <div className={styles.scrollable} ref={mergeRefs([listRef, ref])} onScroll={onScroll}>\n                {renderListItems()}\n            </div>\n        );\n\n        return (\n            <div\n                {...(nativeScrollbar && { 'data-test-id': dataTestId })}\n                className={cn(styles.optionsList, styles[size], className)}\n            >\n                {header && <div className={styles.optionsListHeader}>{header}</div>}\n\n                {nativeScrollbar ? renderWithNativeScrollbar() : renderWithCustomScrollbar()}\n\n                {showFooter && footer && (\n                    <div\n                        className={cn(styles.optionsListFooter, {\n                            [styles.withBorder]:\n                                visibleOptions && flatOptions.length > visibleOptions,\n                        })}\n                    >\n                        {footer}\n                    </div>\n                )}\n            </div>\n        );\n    },\n);\n","export const DEFAULT_VISIBLE_OPTIONS = 5;\n","import { cloneElement, isValidElement, ReactNode, RefObject, useEffect, useRef } from 'react';\n\nimport { BaseSelectProps, GroupShape, OptionShape } from './typings';\n\nexport const isGroup = (item: OptionShape | GroupShape): item is GroupShape =>\n    Object.prototype.hasOwnProperty.call(item, 'options');\n\nexport const isOptionShape = (item: OptionShape | string | null): item is OptionShape =>\n    !!item && Object.prototype.hasOwnProperty.call(item, 'key');\n\nexport const joinOptions = ({\n    selected,\n    selectedMultiple,\n}: {\n    selected?: OptionShape;\n    selectedMultiple?: OptionShape[];\n}) => {\n    const options = selectedMultiple || (selected ? [selected] : []);\n\n    if (!options.length) return null;\n\n    return options.reduce((acc: Array<ReactNode | string>, option: OptionShape, index: number) => {\n        if (isValidElement(option.content)) {\n            acc.push(cloneElement(option.content, { key: option.key }));\n        } else {\n            acc.push(option.content);\n        }\n\n        if (index < options.length - 1) acc.push(', ');\n\n        return acc;\n    }, []);\n};\n\n// За один проход делает список пунктов меню плоским и находит выбранные пункты по ключу\nexport function processOptions(\n    options: BaseSelectProps['options'],\n    selected: BaseSelectProps['selected'] = [],\n) {\n    const flatOptions: OptionShape[] = [];\n\n    const selectedArray = Array.isArray(selected) ? selected : [selected];\n    const selectedOptions = selectedArray.filter(isOptionShape);\n    const selectedKeys = selectedArray.filter(\n        (option): option is string => typeof option === 'string',\n    );\n\n    const isSelected = (option: OptionShape) => selectedKeys.includes(option.key);\n\n    const process = (option: OptionShape) => {\n        flatOptions.push(option);\n\n        if (isSelected(option)) {\n            selectedOptions.push(option);\n        }\n    };\n\n    options.forEach((option) => {\n        if (isGroup(option)) {\n            option.options.forEach(process);\n        } else {\n            process(option);\n        }\n    });\n\n    return { flatOptions, selectedOptions };\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ntype useVisibleOptionsArgs = {\n    /**\n     * Количество видимых пунктов\n     */\n    visibleOptions: number;\n\n    /**\n     * Реф на контейнер с пунтами меню\n     */\n    listRef: RefObject<HTMLElement>;\n\n    /**\n     * Реф на контейнер, которому нужно установить высоту\n     */\n    styleTargetRef?: RefObject<HTMLElement>;\n\n    /**\n     * Флаг открытия меню\n     */\n    open?: boolean;\n\n    /**\n     * Позволяет вызвать пересчет высоты\n     */\n    invalidate?: unknown;\n};\n\nexport function useVisibleOptions({\n    visibleOptions,\n    listRef,\n    styleTargetRef = listRef,\n    open,\n    invalidate,\n}: useVisibleOptionsArgs) {\n    useEffect(() => {\n        const list = listRef.current;\n        const styleTarget = styleTargetRef.current;\n\n        if (open && list && styleTarget && visibleOptions > 0) {\n            const childCount = list.children.length;\n            const optionsNodes = ([] as HTMLElement[]).slice.call(\n                list.children,\n                0,\n                visibleOptions + 1,\n            );\n\n            let height = optionsNodes\n                .slice(0, visibleOptions)\n                .reduce((acc, child) => acc + child.clientHeight, 0);\n\n            if (visibleOptions < childCount) {\n                const lastVisibleOptionHeight = optionsNodes[optionsNodes.length - 1].clientHeight;\n\n                // Если кол-во опций больше visibleOptions на 1, то показываем все опции, иначе добавляем половинку\n                height += Math.round(\n                    childCount - visibleOptions === 1\n                        ? lastVisibleOptionHeight\n                        : lastVisibleOptionHeight / 2,\n                );\n            }\n\n            styleTarget.style.height = `${height}px`;\n        }\n    }, [listRef, open, styleTargetRef, visibleOptions, invalidate]);\n}\n\n// TODO: перенести\nexport function usePrevious<T>(value: T) {\n    const ref = useRef<T>();\n\n    useEffect(() => {\n        ref.current = value;\n    }, [value]);\n\n    return ref.current;\n}\n\n// TODO: перенести\nexport const lastIndexOf = <T>(array: T[], predicate: (item: T) => boolean) => {\n    for (let i = array.length - 1; i >= 0; i--) {\n        if (predicate(array[i])) return i;\n    }\n\n    return -1;\n};\n","export const getDataTestId = (dataTestId?: string, element?: string) => {\n    const elementPart = element ? `-${element.toLowerCase()}` : '';\n\n    return dataTestId ? `${dataTestId}${elementPart}` : undefined;\n};\n"],"names":["Select","forwardRef","_ref","ref","_ref$Arrow","Arrow","DefaultArrow","_ref$Field","Field","DefaultField","_ref$OptionsList","OptionsList","DefaultOptionsList","_ref$Optgroup","Optgroup","DefaultOptgroup","_ref$Option","Option","DefaultOption","_ref$fieldProps","fieldProps","restProps","_objectWithoutProperties","_excluded","_jsx","BaseSelect","_objectSpread","FormControlComponent","FormControlDesktop","open","className","ChevronDownMIcon","cn","styles","_defineProperty","option","value","key","disabled","children","content","Group","_ref2","label","options","map","NativeSelect","_ref3","multiple","name","onChange","handleClick","useCallback","event","stopPropagation","onClick","isGroup","_createElement","dataTestId","fieldClassName","optionsListClassName","optionClassName","popperClassName","_ref$autocomplete","autocomplete","_ref$multiple","_ref$allowUnselect","allowUnselect","_ref$disabled","_ref$closeOnSelect","closeOnSelect","_ref$circularNavigati","circularNavigation","_ref$nativeSelect","nativeSelect","_ref$defaultOpen","defaultOpen","openProp","_ref$popoverPosition","popoverPosition","_ref$preventFlip","preventFlip","_ref$optionsListWidth","optionsListWidth","id","selected","_ref$size","size","_ref$optionsSize","optionsSize","error","hint","block","labelView","placeholder","_ref$optionsListProps","optionsListProps","_ref$optionProps","optionProps","valueRenderer","onOpen","onFocus","onBlur","onScroll","updatePopover","zIndexPopover","_ref$showEmptyOptions","showEmptyOptionsList","visibleOptions","rootRef","useRef","fieldRef","listRef","initiatorRef","itemToString","_useMemo","useMemo","processOptions","flatOptions","selectedOptions","useMultipleSelectionProps","onSelectedItemsChange","changes","_changes$selectedItem","selectedItems","selectedMultiple","length","initiator","current","stateReducer","state","actionAndChanges","type","useMultipleSelection","undefined","_useMultipleSelection","addSelectedItem","setSelectedItems","removeSelectedItem","getDropdownProps","_useCombobox","useCombobox","isOpen","items","defaultHighlightedIndex","onIsOpenChange","setTimeout","selectedItem","alreadySelected","includes","allowRemove","highlightedIndex","getMenuProps","getInputProps","getItemProps","getComboboxProps","getLabelProps","toggleMenu","openMenu","menuProps","suppressRefError","inputProps","mergeRefs","handleNativeSelectChange","_toConsumableArray","target","reduce","acc","index","concat","getOptionProps","innerProps","item","onMouseDown","preventDefault","highlighted","getDataTestId","useEffect","calcOptionsListWidth","widthAttr","optionsListMinWidth","getBoundingClientRect","width","setAttribute","style","observer","window","ResizeObserver","ResizeObserverPolyfill","observe","disconnect","useLayoutEffect_SAFE_FOR_SSR","renderValue","renderNativeSelect","needRenderOptionsList","_jsxs","onKeyDown","handleFieldKeyDown","tagName","tabIndex","handleFieldBlur","_listRef$current","contains","relatedTarget","document","activeElement","handleFieldFocus","handleFieldClick","Popover","withTransition","anchorElement","position","update","zIndex","_cn","_ref$labelView","_ref$selectedMultiple","rightAddons","_ref$valueRenderer","joinOptions","_useState","useState","_useState2","_slicedToArray","focused","setFocused","wrapperRef","_useFocus","useFocus","focusVisible","handleFocus","handleBlur","filled","Boolean","showLabel","React","Checkmark","_ref$position","single","checkmarkClassNames","handleCheckboxClick","Badge","view","iconColor","CheckmarkCircleMIcon","CheckmarkMIcon","Checkbox","checked","mobile","_ref$Checkmark","DefaultMobileCheckmark","DefaultCheckMark","_option$showCheckMark","showCheckMark","isValidElement","optionGroupClassName","_ref$options","emptyPlaceholder","_ref$visibleOptions","DEFAULT_VISIBLE_OPTIONS","header","footer","_ref$showFooter","showFooter","nativeScrollbarProp","nativeScrollbar","_ref$flatOptions","_useMedia","useMedia","renderOption","scrollbarRef","counter","createCounter","count","useVisibleOptions","styleTargetRef","invalidate","renderListItems","renderGroup","group","renderWithNativeScrollbar","renderWithCustomScrollbar","scrollableNodeProps","Scrollbar","horizontalAutoStretch","contentNodeProps","Object","prototype","hasOwnProperty","call","isOptionShape","push","cloneElement","arguments","selectedArray","Array","isArray","filter","selectedKeys","process","isSelected","forEach","_ref2$styleTargetRef","list","styleTarget","childCount","optionsNodes","slice","height","child","clientHeight","lastVisibleOptionHeight","Math","round","usePrevious","lastIndexOf","array","predicate","i","element","elementPart","toLowerCase"],"sourceRoot":""}