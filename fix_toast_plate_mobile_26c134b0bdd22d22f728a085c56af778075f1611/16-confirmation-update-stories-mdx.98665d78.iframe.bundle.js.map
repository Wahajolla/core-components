{"version":3,"file":"16-confirmation-update-stories-mdx.98665d78.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./node_modules/@mdx-js/react/lib/index.js","webpack://@alfalab/core-components/./node_modules/@storybook/addon-docs/dist/chunk-PCJTTTQV.mjs","webpack://@alfalab/core-components/./docs/16.confirmation-update.stories.mdx"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","import React, { Component } from 'react';\nimport { renderElement, unmountElement } from '@storybook/react-dom-shim';\nimport { CodeOrSourceMdx, AnchorMdx, HeadersMdx, Docs } from '@storybook/blocks';\n\nvar defaultComponents={code:CodeOrSourceMdx,a:AnchorMdx,...HeadersMdx},ErrorBoundary=class extends Component{constructor(){super(...arguments);this.state={hasError:!1};}static getDerivedStateFromError(){return {hasError:!0}}componentDidCatch(err){let{showException}=this.props;showException(err);}render(){let{hasError}=this.state,{children}=this.props;return hasError?null:children}},DocsRenderer=class{constructor(){this.render=async(context,docsParameter,element)=>{let components={...defaultComponents,...docsParameter?.components};return new Promise((resolve,reject)=>{import('@mdx-js/react').then(({MDXProvider})=>renderElement(React.createElement(ErrorBoundary,{showException:reject,key:Math.random()},React.createElement(MDXProvider,{components},React.createElement(Docs,{context,docsParameter}))),element)).then(resolve);})},this.unmount=element=>{unmountElement(element);};}};\n\nexport { DocsRenderer, defaultComponents };\n","\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"@storybook/addon-docs/mdx-react-shim\";\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h4: \"h4\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Meta, {\n      title: \"For users/\\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 Confirmation\",\n      parameters: {\n        previewTabs: {\n          canvas: {\n            hidden: true\n          }\n        }\n      },\n      id: \"Instructions/Confirmation-update\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h4, {\n      id: \"\\u0438\\u043D\\u0441\\u0442\\u0440\\u0443\\u043A\\u0446\\u0438\\u044F-\\u043F\\u043E-\\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u044E-confirmation-\\u0434\\u043E-10-\\u0432\\u0435\\u0440\\u0441\\u0438\\u0438-\\u043D\\u0430-\\u0430\\u043A\\u0442\\u0443\\u0430\\u043B\\u044C\\u043D\\u0443\\u044E\",\n      children: \"Инструкция по обновлению Confirmation до 10 версии на актуальную.\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"Для понимания различий компонентов приведена сравнительная таблица пропсов \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"Старого\"\n      }), \" компонента \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"Confirmation\"\n      }), \" (до 10 версии), и \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"Нового\"\n      }), \" (выше 10 версии, root-пакет 24.0.0).\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(Markdown, {\n      children: `\n| Старый                                                           |                                                                                                                                                                                                                  | Новый                                                                             |                                                                                                                                      |\n| ---------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| <b>Название</b>                                                  | <b>Описание</b>                                                                                                                                                                                                  | <b>Название</b>                                                                   | <b>Описание</b>                                                                                                                      |\n| code <br /> \\`string\\`                                           | Значение поля ввода                                                                                                                                                                                              | ➖                                                                                 | -                                                                                                                                    |\n| codeChecking <br /> \\`boolean\\`                                  | Флаг состояния обработки введенного кода                                                                                                                                                                         | \\`state = CODE_CHECKING\\`                                                         | Состояние проверки кода                                                                                                              |\n| codeSending <br /> \\`boolean\\`                                   | Флаг состояния отправки кода.                                                                                                                                                                                    | \\`state = CODE_SENDING\\`                                                          | Состояние повторной отправки кода                                                                                                    |\n| error <br /> \\`boolean\\`                                         | Состояние ошибки подписания                                                                                                                                                                                      | \\`state = 'CODE_ERROR'\\` <br/> \\`string\\`                                         | Состояние ошибки, когда ввели неверный код                                                                                           |\n| errorOverlimit <br /> \\`boolean\\`                                | Состояние ошибки лимитов - превышено кол-во попыток ввода или запросов кода                                                                                                                                      | \\`screen = 'TEMP_BLOCK'\\` <br/> \\`string\\`                                        | Экран временной блокировки                                                                                                           |\n| errorOverlimitIsFatal <br /> \\`boolean\\`                         | Состояние критической ошибки лимитов - превышены все лимиты и попытки, пользователя блокируют                                                                                                                    | \\`screen = 'FATAL_ERROR'\\` <br/> \\`string\\`                                       | Экран критической ошибки                                                                                                             |\n| errorText <br /> \\`string\\`                                      | Текст ошибки подписания                                                                                                                                                                                          | texts.codeError <br/> \\`string\\`                                                  | Ошибка проверки кода                                                                                                                 |\n| additionalContent <br /> \\`React.Node\\`                          | Дополнительный контент                                                                                                                                                                                           | ➖                                                                                 | -                                                                                                                                    |\n| errorIsFatal <br /> \\`boolean\\`                                  | Флаг критичности ошибки подписания. <br/> Если true - ошибка подписания рисуется на экране без поля ввода,<br/> но с кнопкой \"Запросить код\". <br/> Если false - ошибка подписания рисуется под полем ввода кода | \\`screen = 'FATAL_ERROR'\\` <br/> \\`string\\`                                       | Экран критической ошибки                                                                                                             |\n| className <br /> \\`string\\`                                      | Дополнительный класс                                                                                                                                                                                             | className <br/> \\`string\\`                                                        | Дополнительный класс для стилизации общей обёртки                                                                                    |\n| phone <br /> \\`string\\`                                          | Номер телефона, на который отправляется сообщение                                                                                                                                                                | phone <br/> \\`string\\`                                                            | Номер телефона, на который отправлен код                                                                                             |\n| hasPhoneMask <br /> \\`boolean\\`                                  | Управление необходимостью маскировать номер телефона                                                                                                                                                             | ➖                                                                                 | Настраивается через пропс \\`phone\\`                                                                                                  |\n| requiredCharAmount <br /> \\`number\\`                             | Количество символов, которое можно ввести <br/> в поле ввода подписания до того, как произойдет автоотправка                                                                                                     | requiredCharAmount <br/> \\`number\\`                                               | Количество символов, которое можно ввести <br/> в поле ввода подписания до того, как произойдет автоотправка                         |\n| hasSmsCountdown <br /> \\`boolean\\`                               | Управление отображением таймера с кнопкой \"Запросить код\"                                                                                                                                                        | ➖                                                                                 |                                                                                                                                      |\n| countdownDuration <br /> \\`number\\`                              | Длительность обратного отсчета<br/> на кнопке повторного запроса сообщения, в милисекундах                                                                                                                       | countdownDuration <br/> \\`number\\`                                                | Длительность обратного отсчета на кнопке повторного запроса сообщения, в милисекундах                                                |\n| signTitle <br /> \\`React.Node\\`                                  | Заголовок экрана подписания                                                                                                                                                                                      | texts.title <br/> \\`string\\`                                                      | Текст заголовока начального экрана \\`INITIAL\\`                                                                                       |\n| overlimitTitle <br /> \\`string\\`                                 | Заголовок экрана ошибки лимитов                                                                                                                                                                                  | ➖                                                                                 | -                                                                                                                                    |\n| overlimitText <br /> \\`string\\`                                  | Текстовое описание блокировки формы при превышении лимитов                                                                                                                                                       | texts.fatalErrorDescription                                                       | Текст описания на экране критической ошибки \\`FATAL_ERROR\\`                                                                          |\n| overlimitCountdownDuration <br /> \\`number\\`                     | Длительность блокировки при превышении лимитов (ms)                                                                                                                                                              | tempBlockDuration <br/> \\`number\\`                                                | Продолжительность блокировки формы (ms)                                                                                              |\n| errorTitle <br /> \\`string\\`                                     | Заголовок экрана блокирующей ошибки                                                                                                                                                                              | texts.fatalErrorTitle <br/> \\`ReactNode\\`                                         | Заголовок экрана \\`FATAL_ERROR\\`                                                                                                     |\n| dataTestId <br /> \\`string\\`                                     | Идентификатор для систем автоматизированного тестирования                                                                                                                                                        | dataTestId <br/> \\`string\\`                                                       | Идентификатор для систем автоматизированного тестирования                                                                            |\n| codeCheckingText <br /> \\`string\\`                               | Текст лоадера при проверке кода                                                                                                                                                                                  | texts.codeChecking <br/> \\`string\\`                                               | код проверяется                                                                                                                      |\n| codeSendingText <br /> \\`string\\`                                | Текст лоадера при отправке кода                                                                                                                                                                                  | texts.codeSending <br/> \\`string\\`                                                | код отправляется                                                                                                                     |\n| buttonErrorText <br /> \\`string\\`                                | Текст кнопки при блокирующей ошибке                                                                                                                                                                              | texts.fatalErrorButton <br/> \\`string\\`                                           | Текст кнопки на экране \\`FATAL_ERROR\\`                                                                                               |\n| buttonReturnText <br /> \\`string\\`                               | Текст кнопки \"Вернуться назад\" на экране помощи                                                                                                                                                                  | texts.hintButton <br/> \\`string\\`                                                 | Текст кнопки на экране \\`HINT\\` ('Вернуться к вводу кода')                                                                           |\n| buttonRetryText <br /> \\`string\\`                                | Текст кнопки \"Запросить новый код\"                                                                                                                                                                               | texts.buttonRetry <br/> \\`string\\`                                                | Текст кнопки повторной отправки кода                                                                                                 |\n| alignContent <br /> \\`left \\ center\\`                            | Позиционирование контента                                                                                                                                                                                        | alignContent <br/> \\`left \\ center\\`                                              | Позиционирование контента                                                                                                            |\n| noAttemptsLeftMessagegnContent <br /> \\`string\\`                 | Сообщение, если не осталось попыток ввода кода.<br/> Кнопка повторной отправки смс при этом скрывается.                                                                                                          | text.noAttemptsLeft                                                               | Текст, когда не осталось попыток запроса кода                                                                                        |\n| countdownContent <br /> \\`React.Node\\`                           | Кастомный контент для компонента Countdown                                                                                                                                                                       | texts.countdown <br/> \\`string\\`                                                  | Текст таймера \"запросить повторно можно через\"                                                                                       |\n| onInputFinished <br /> \\`({ code }: { code: string; }) => void\\` | Обработчик события завершения ввода кода подписания                                                                                                                                                              | onInputFinished <br/> \\`(code: string) => void\\`                                  | Обработчик события завершения ввода кода подписания                                                                                  |\n| onInputChange <br /> \\`({ code }: { code: string; }) => void\\`   | Обработчик события изменения значения поля ввода кода подписания                                                                                                                                                 | ➖                                                                                 | -                                                                                                                                    |\n| onSmsRetryClick <br /> \\`() => void\\`                            | Обработчик события нажатия на кнопку \"Запросить код\"                                                                                                                                                             | onSmsRetryClick <br/> \\`(code: string) => void\\`                                  | Обработчик события нажатия на кнопку \"Запросить код\"                                                                                 |\n| onOverlimitSmsRetryClick <br /> \\`() => void\\`                   | Обработчик события нажатия на кнопку \"Запросить код\" в блоке превышение лимитов                                                                                                                                  | ➖                                                                                 | -                                                                                                                                    |\n| onCountdownFinished <br /> \\`() => void\\`                        | Обработчик события завершения обратного отсчета для повторного запроса сообщения                                                                                                                                 | onTempBlockFinished <br/> \\`(code: string) => void\\`                              | Временная блокировка формы закончилась                                                                                               |\n| onOverlimitCountdownFinished <br /> \\`() => void\\`               | Обработчик события завершения обратного отсчета для блокировки формы                                                                                                                                             | ➖                                                                                 | -                                                                                                                                    |\n| onSmsHintLinkClick <br /> \\`() => void\\`                         | Обработчик события нажатия на ссылку \"не приходит сообщение?\"                                                                                                                                                    | ➖                                                                                 | -                                                                                                                                    |\n| onActionWithFatalError <br /> \\`() => void\\`                     | Обработчик события нажатия на кнопку buttonErrorText (по дефолту \"Понятно\"), <br/> которая появляется при критической ошибке.<br/> Если не передан, то вызывается onSmsRetryClick                                | onFatalErrorOkButtonClick <br/> \\`(code: string) => void\\`                        | Клик по кнопке \"Понятно\" на экране фатальной ошибки                                                                                  |\n|                                                                  |                                                                                                                                                                                                                  | screen <br/> \\`'INITIAL', 'HINT', 'FATAL_ERROR', 'TEMP_BLOCK', key of screenMap\\` | Экран компонента (Начальное состояние, экран \"Не приходит смс?\",<br/> экран критической ошибки, экран временной блокировки)          |\n|                                                                  |                                                                                                                                                                                                                  | state <br/> \\`ConfirmationState \\ string\\`                                        | Состояние компонента (Начальное состояние,<br/> проверка кода,<br/> повторная отправка кода,<br /> ошибка, когда ввели неверный код) |\n|                                                                  |                                                                                                                                                                                                                  | texts                                                                             | Объект с кастомными текстами для всех экранов                                                                                        |\n|                                                                  |                                                                                                                                                                                                                  | onChangeState <br/> \\`(state: string) => void\\`                                   | Функция обновления состояния компонента                                                                                              |\n|                                                                  |                                                                                                                                                                                                                  | onChangeScreen <br/> \\`(state: string) => void\\`                                  | Функция обновления экрана компонента                                                                                                 |\n|                                                                  |                                                                                                                                                                                                                  | getScreensMap <br/> \\`(defaulScreensMap: ScreensMap) => ScreensMap\\`              | Возввращает объект, где ключ - название экрана (screen), значение - компонент для экрана                                             |\n|                                                                  |                                                                                                                                                                                                                  | texts.codeSended <br/> \\`string\\`                                                 | Текст после отправки кода (код отправлен)                                                                                            |\n|                                                                  |                                                                                                                                                                                                                  | texts.linkToHint <br/> \\`string\\`                                                 | Текст ссылки на экран \\`HINT\\` (\"Не приходит смс?\")                                                                                  |\n|                                                                  |                                                                                                                                                                                                                  | texts.tempBlockTitle <br/> \\`ReactNode\\`                                          | Текст заголовка на экране \\`TEMP_BLOCK\\`                                                                                             |\n|                                                                  |                                                                                                                                                                                                                  | texts.tempBlockDescription <br/> \\`ReactNode\\`                                    | Текст описания на экране временной блокировки \\`TEMP_BLOCK\\`                                                                         |\n|                                                                  |                                                                                                                                                                                                                  | blockSmsRetry <br/> \\`boolean\\`                                                   | Скрытие кнопки повторного запроса sms когда, Не осталось попыток ввода кода                                                          |\n`\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"В компоненте полностью переосмыслен подход к состоянию.\\nТеперь нет необходимости прокидывать множество пропсов для получения желаемого вида компонента.\\nНужно использовать экраны \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"screen\"\n      }), \" и состояние \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"state\"\n      }), \". Можно использовать как заложенные в компонент экраны, так и кастомные.\\nЗаложенные в компонент экраны \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"screen\"\n      }), \":\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"Экран начального состояния \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"INITIAL\"\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"Экран \\\"Не приходит смс?\\\" \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"HINT\"\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"Экран критической ошибки \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"FATAL_ERROR\"\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"Экран временной блокировки \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"TEMP_BLOCK\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"Заложенные в компонент состояния \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"state\"\n      }), \":\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"начальное состояние \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"INITIAL\"\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"проверка кода \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"CODE_CHECKING\"\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"повторная отправка кода \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"CODE_SENDING\"\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"ошибка, когда ввели неверный код \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"CODE_ERROR\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"В новой версии есть как новые пропсы, так и аналогичные старым.\\nРассмотрим те, которых нет в новой версии и чем их можно заменить.\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [/*#__PURE__*/_jsx(_components.code, {\n          children: \"code\"\n        }), \" В старой версии стейт поля ввода находился снаружи компонента, сейчас эта логика находится внутри.\\nУправлять значениями поля сейчас нет возможности.\"]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [/*#__PURE__*/_jsx(_components.code, {\n          children: \"additionalContent\"\n        }), \" - Для унификации в существующие экраны нельзя добавлять дополнительный контент.\"]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [/*#__PURE__*/_jsx(_components.code, {\n          children: \"hasPhoneMask\"\n        }), \" - В текущей версии маскировка номера телефона производится снаружи компонента, а в поле \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"phone\"\n        }), \" прокидывается уже замаскированный номер телефона вида \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"+7 ··· ··· 07-24\"\n        }), \";\"]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [/*#__PURE__*/_jsx(_components.code, {\n          children: \"hasSmsCountdown\"\n        }), \" - Управление отображением кнопки осуществляется через пропс \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"blockSmsRetry\"\n        }), \".\"]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [/*#__PURE__*/_jsx(_components.code, {\n          children: \"countdownContent\"\n        }), \" - Убрали возможность управления контентом для унификации во всех продуктах.\"]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [/*#__PURE__*/_jsx(_components.code, {\n          children: \"onInputChange\"\n        }), \" - Убрали, т.к. нет необходимости проверять промежуточные зачения поля ввода. Финальное значение нужно получать через \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"onInputFinished\"\n        }), \".\"]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [/*#__PURE__*/_jsx(_components.code, {\n          children: \"onOverlimitSmsRetryClick\"\n        }), \" - Убран, на экране критической ошибки нет контролов.\"]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [/*#__PURE__*/_jsx(_components.code, {\n          children: \"onOverlimitCountdownFinished\"\n        }), \" - Необходимо обрабатывать собственной логикой, при завершении таймера, когда \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"timeLeft === 0\"\n        })]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [/*#__PURE__*/_jsx(_components.code, {\n          children: \"onSmsHintLinkClick\"\n        }), \" - Убран, клик по ссылке всегда меняет экран на \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"HINT\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h4, {\n      id: \"\\u043A\\u0430\\u0441\\u0442\\u043E\\u043C\\u043D\\u044B\\u0435-\\u044D\\u043A\\u0440\\u0430\\u043D\\u044B\",\n      children: \"Кастомные экраны\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"Если вам недостаточно встроенных экранов, копонент позволяет использовать кастомные экраны.\\nДля этого вам может понадобиться \\\"ConfirmationContext\\\" из которого можно получить:\\n\", /*#__PURE__*/_jsx(_components.code, {\n        children: \"alignContent, texts, state, screen, requiredCharAmount, onInputFinished, countdownDuration, onChangeState, onSmsRetryClick, onChangeScreen, onFatalErrorOkButtonClick, tempBlockDuration, phone, blockSmsRetry, onTempBlockFinished, timeLeft\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Пример простого кастомного экрана успешной отправки заявки;\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      live: true,\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"// import { Confirmation, ConfirmationContext } from '@alfalab/core-components-confirmation';\\n\\nrender(() => {\\n    const CodeSuccesScreen = () => {\\n        const { texts, onChangeScreen, onChangeState } = React.useContext(ConfirmationContext);\\n        return (\\n            <Space align='center' size={24}>\\n                <img src='./images/success_code.svg' alt='success' />\\n                <Space align='center'>\\n                    <Typography.Title color='primary' view='small'>\\n                        {texts.codeSuccessTitle}\\n                    </Typography.Title>\\n                    <Typography.Text view='primary-medium'>\\n                        {texts.codeSuccessDescription}\\n                    </Typography.Text>\\n                </Space>\\n                <Button\\n                    size='s'\\n                    view='tertiary'\\n                    onClick={() => {\\n                        onChangeScreen('INITIAL');\\n                        onChangeState('INITIAL');\\n                    }}\\n                >\\n                    {texts.codeSuccessButtonTitle}\\n                </Button>\\n            </Space>\\n        );\\n    };\\n\\n    const { confirmationState, confirmationScreen, setConfirmationState, setConfirmationScreen } =\\n        useConfirmation();\\n\\n    const handleInputFinished = () => {\\n        setConfirmationScreen('CODE_SUCCESS');\\n    };\\n\\n    const handleChangeScreen = (screen) => {\\n        setConfirmationScreen(screen);\\n    };\\n\\n    const getScreensMap = (screenMap) => ({ ...screenMap, CODE_SUCCESS: CodeSuccesScreen });\\n\\n    return (\\n        <Confirmation\\n            screen={confirmationScreen}\\n            state={confirmationState}\\n            alignContent='center'\\n            countdownDuration={20000}\\n            onChangeState={setConfirmationState}\\n            onChangeScreen={handleChangeScreen}\\n            onInputFinished={handleInputFinished}\\n            getScreensMap={getScreensMap}\\n            phone='+7 ··· ··· 07-24'\\n            texts={{\\n                codeSuccessTitle: 'Заявка на подключение отправлена',\\n                codeSuccessDescription: 'Услуга подключится в течение 3-х рабочих дней',\\n                codeSuccessButtonTitle: 'Перейти в список заявок',\\n            }}\\n        />\\n    );\\n});\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, {\n    ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n/* ========= */\nexport const __page = () => {\n  throw new Error(\"Docs-only story\");\n};\n__page.parameters = {\n  docsOnly: true\n};\nconst componentMeta = {\n  title: 'For users/Обновление Confirmation',\n  id: 'Instructions/Confirmation-update',\n  parameters: {\n    previewTabs: {\n      canvas: {\n        hidden: true\n      }\n    }\n  },\n  tags: ['stories-mdx'],\n  includeStories: [\"__page\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;"],"names":["MDXContext","withMDXComponents","Component","boundMDXComponent","props","allComponents","useMDXComponents","components","contextComponents","emptyObject","MDXProvider","children","disableParentContext","Provider","value","defaultComponents","code","a","ErrorBoundary","constructor","super","arguments","this","state","hasError","static","componentDidCatch","err","showException","render","DocsRenderer","async","context","docsParameter","element","Promise","resolve","reject","then","key","Math","random","unmount","_createMdxContent","_components","Object","assign","h4","p","ul","li","pre","title","parameters","previewTabs","canvas","hidden","id","live","className","__page","Error","docsOnly","componentMeta","tags","includeStories","docs","page","MDXContent","wrapper","MDXLayout"],"sourceRoot":""}