{"version":3,"file":"4831.edd9bd09.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./packages/select/src/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/arrow/index.module.css?9ca6","webpack://@alfalab/core-components/./packages/select/src/components/arrow/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/native-select/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/base-select/index.module.css?7b4b","webpack://@alfalab/core-components/./packages/select/src/components/base-select/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/field/index.module.css?c913","webpack://@alfalab/core-components/./packages/select/src/components/field/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/optgroup/index.module.css?b6c6","webpack://@alfalab/core-components/./packages/select/src/components/optgroup/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/checkmark/index.module.css?72e3","webpack://@alfalab/core-components/./packages/select/src/components/checkmark/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/checkmark-mobile/index.module.css?3860","webpack://@alfalab/core-components/./packages/select/src/components/checkmark-mobile/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/option/index.module.css?74cb","webpack://@alfalab/core-components/./packages/select/src/components/option/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/components/options-list/index.module.css?7337","webpack://@alfalab/core-components/./packages/select/src/components/options-list/Component.tsx","webpack://@alfalab/core-components/./packages/select/src/consts.ts","webpack://@alfalab/core-components/./packages/select/src/utils.ts","webpack://@alfalab/core-components/./packages/utils/getDataTestId.ts"],"sourcesContent":["import React, { forwardRef } from 'react';\n\nimport { FormControlProps } from '@alfalab/core-components-form-control/src/Component';\n\nimport { Arrow as DefaultArrow } from './components/arrow';\nimport { BaseSelect } from './components/base-select';\nimport { Field as DefaultField } from './components/field';\nimport { Optgroup as DefaultOptgroup } from './components/optgroup';\nimport { Option as DefaultOption } from './components/option';\nimport { OptionsList as DefaultOptionsList } from './components/options-list';\nimport { BaseSelectProps } from './typings';\n\nexport type SelectFieldProps = Omit<FormControlProps, 'size'> & Record<string, unknown>;\n\nexport type SelectProps = Omit<BaseSelectProps, 'fieldProps'> & {\n    /**\n     * Пропсы, которые будут прокинуты в компонент поля\n     */\n    fieldProps?: SelectFieldProps;\n};\n\nexport const Select = forwardRef<HTMLDivElement, SelectProps>(\n    (\n        {\n            Arrow = DefaultArrow,\n            Field = DefaultField,\n            OptionsList = DefaultOptionsList,\n            Optgroup = DefaultOptgroup,\n            Option = DefaultOption,\n            ...restProps\n        },\n        ref,\n    ) => (\n        <BaseSelect\n            ref={ref}\n            Option={Option}\n            Field={Field}\n            Optgroup={Optgroup}\n            OptionsList={OptionsList}\n            Arrow={Arrow}\n            {...restProps}\n        />\n    ),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"arrow\":\"arrow_Fidyu\",\"open\":\"open_JDO2N\"};","import React from 'react';\nimport cn from 'classnames';\n\nimport { ChevronDownMIcon } from '@alfalab/icons-glyph/ChevronDownMIcon';\n\nimport { ArrowProps } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport const Arrow = ({ open, className }: ArrowProps) => (\n    <ChevronDownMIcon className={cn(styles.arrow, className, { [styles.open]: open })} />\n);\n","import React, { forwardRef, SelectHTMLAttributes, useCallback } from 'react';\n\nimport { GroupShape, OptionShape } from '../../typings';\nimport { isGroup } from '../../utils';\n\nexport type NativeSelectProps = SelectHTMLAttributes<HTMLSelectElement> & {\n    /**\n     * Список вариантов выбора\n     */\n    options: Array<OptionShape | GroupShape>;\n\n    /**\n     * Значение селекта\n     */\n    value: string | string[];\n};\n\nconst Option = ({ option }: { option: OptionShape }) => (\n    <option value={option.key} disabled={option.disabled}>\n        {typeof option.content === 'string' ? option.content : option.key}\n    </option>\n);\n\nconst Group = ({ label, options }: GroupShape) => (\n    <optgroup label={label}>\n        {options.map((option) => (\n            <Option option={option} key={option.key} />\n        ))}\n    </optgroup>\n);\n\nexport const NativeSelect = forwardRef<HTMLSelectElement, NativeSelectProps>(\n    ({ className, disabled, multiple, value, name, options, onChange, ...restProps }, ref) => {\n        const handleClick = useCallback((event: React.MouseEvent<HTMLSelectElement>) => {\n            event.stopPropagation();\n        }, []);\n\n        return (\n            <select\n                className={className}\n                disabled={disabled}\n                multiple={multiple}\n                name={name}\n                value={value}\n                onChange={onChange}\n                onClick={handleClick}\n                ref={ref}\n                {...restProps}\n            >\n                {options.map((option) =>\n                    isGroup(option) ? (\n                        <Group {...option} key={option.label} />\n                    ) : (\n                        <Option option={option} key={option.key} />\n                    ),\n                )}\n            </select>\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_p63D9\",\"popoverInner\":\"popoverInner_gx5Ai\",\"optionsList\":\"optionsList_Ni45G\",\"optionsListBorder\":\"optionsListBorder_QZAA4\",\"nativeSelect\":\"nativeSelect_rLoGL\",\"block\":\"block_wKlh2\"};","/* eslint-disable no-nested-ternary */\nimport React, {\n    FocusEvent,\n    forwardRef,\n    KeyboardEvent,\n    MouseEvent,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { ResizeObserver as ResizeObserverPolyfill } from '@juggle/resize-observer';\nimport cn from 'classnames';\nimport {\n    useCombobox,\n    useMultipleSelection,\n    UseMultipleSelectionProps,\n    UseMultipleSelectionState,\n} from 'downshift';\n\nimport { Popover } from '@alfalab/core-components-popover';\nimport { useLayoutEffect_SAFE_FOR_SSR } from '@alfalab/hooks';\n\nimport { getDataTestId } from '../../../../utils';\nimport { AnyObject, BaseSelectProps, OptionShape } from '../../typings';\nimport { processOptions } from '../../utils';\nimport { NativeSelect } from '../native-select';\n\nimport styles from './index.module.css';\n\nexport const BaseSelect = forwardRef(\n    (\n        {\n            dataTestId,\n            className,\n            fieldClassName,\n            optionsListClassName,\n            optionClassName,\n            popperClassName,\n            options,\n            autocomplete = false,\n            multiple = false,\n            allowUnselect = false,\n            disabled = false,\n            closeOnSelect = !multiple,\n            circularNavigation = false,\n            nativeSelect = false,\n            defaultOpen = false,\n            open: openProp,\n            popoverPosition = 'bottom-start',\n            preventFlip = true,\n            optionsListWidth = 'content',\n            name,\n            id,\n            selected,\n            size = 's',\n            optionsSize = size,\n            error,\n            hint,\n            block,\n            label,\n            labelView,\n            placeholder,\n            fieldProps = {},\n            optionsListProps = {},\n            optionProps = {},\n            valueRenderer,\n            onChange,\n            onOpen,\n            onFocus,\n            onBlur,\n            onScroll,\n            Arrow,\n            Field = () => null,\n            OptionsList = () => null,\n            Optgroup = () => null,\n            Option = () => null,\n            updatePopover,\n            zIndexPopover,\n            showEmptyOptionsList = false,\n            visibleOptions,\n        }: BaseSelectProps,\n        ref,\n    ) => {\n        const rootRef = useRef<HTMLLabelElement>(null);\n        const fieldRef = useRef<HTMLInputElement>(null);\n        const listRef = useRef<HTMLDivElement>(null);\n        const initiatorRef = useRef<OptionShape | null>(null);\n\n        const itemToString = (option: OptionShape) => (option ? option.key : '');\n\n        const { flatOptions, selectedOptions } = useMemo(\n            () => processOptions(options, selected),\n            [options, selected],\n        );\n\n        const useMultipleSelectionProps: UseMultipleSelectionProps<OptionShape> = {\n            itemToString,\n            onSelectedItemsChange: (changes) => {\n                if (onChange) {\n                    const { selectedItems = [] } = changes;\n\n                    onChange({\n                        selectedMultiple: selectedItems,\n                        selected: selectedItems.length ? selectedItems[0] : null,\n                        initiator: initiatorRef.current,\n                        name,\n                    });\n\n                    initiatorRef.current = null;\n                }\n            },\n            stateReducer: (state, actionAndChanges) => {\n                const { type, changes } = actionAndChanges;\n\n                if (\n                    !allowUnselect &&\n                    type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace\n                ) {\n                    return state;\n                }\n\n                return changes as UseMultipleSelectionState<OptionShape>;\n            },\n        };\n\n        if (selected !== undefined) {\n            useMultipleSelectionProps.selectedItems = selectedOptions;\n        }\n\n        const {\n            selectedItems,\n            addSelectedItem,\n            setSelectedItems,\n            removeSelectedItem,\n            getDropdownProps,\n        } = useMultipleSelection(useMultipleSelectionProps);\n\n        const {\n            isOpen: open,\n            getMenuProps,\n            getInputProps,\n            getItemProps,\n            getComboboxProps,\n            getLabelProps,\n            highlightedIndex,\n            toggleMenu,\n            openMenu,\n        } = useCombobox<OptionShape>({\n            id,\n            isOpen: openProp,\n            circularNavigation,\n            items: flatOptions,\n            itemToString,\n            defaultHighlightedIndex: selectedItems.length === 0 ? -1 : undefined,\n            onIsOpenChange: (changes) => {\n                if (onOpen) {\n                    /**\n                     *  Вызываем обработчик асинхронно.\n                     *\n                     * Иначе при клике вне открытого селекта сначала сработает onOpen, который закроет селект,\n                     * А затем сработает onClick кнопки открытия\\закрытия с open=false и в итоге селект откроется снова.\n                     */\n                    setTimeout(() => {\n                        onOpen({\n                            open: changes.isOpen,\n                            name,\n                        });\n                    }, 0);\n                }\n            },\n            stateReducer: (state, actionAndChanges) => {\n                const { type, changes } = actionAndChanges;\n                const { selectedItem } = changes;\n\n                switch (type) {\n                    case useCombobox.stateChangeTypes.InputKeyDownEnter:\n                    case useCombobox.stateChangeTypes.ItemClick:\n                        initiatorRef.current = selectedItem;\n\n                        if (selectedItem && !selectedItem.disabled) {\n                            const alreadySelected = selectedItems.includes(selectedItem);\n                            const allowRemove =\n                                allowUnselect || (multiple && selectedItems.length > 1);\n\n                            if (alreadySelected && allowRemove) {\n                                removeSelectedItem(selectedItem);\n                            }\n\n                            if (!alreadySelected) {\n                                if (multiple) {\n                                    addSelectedItem(selectedItem);\n                                } else {\n                                    setSelectedItems([selectedItem]);\n                                }\n                            }\n                        }\n\n                        return {\n                            ...changes,\n                            isOpen: !closeOnSelect,\n                            // при closeOnSelect === false - сохраняем подсвеченный индекс\n                            highlightedIndex:\n                                state.isOpen && !closeOnSelect\n                                    ? state.highlightedIndex\n                                    : changes.highlightedIndex,\n                        };\n                    default:\n                        return changes;\n                }\n            },\n        });\n\n        const menuProps = (getMenuProps as (options: object, additional: object) => AnyObject)(\n            { ref: listRef },\n            { suppressRefError: true },\n        );\n        const inputProps = getInputProps(getDropdownProps({ ref: mergeRefs([ref, fieldRef]) }));\n\n        const handleFieldFocus = (event: FocusEvent<HTMLDivElement | HTMLInputElement>) => {\n            if (onFocus) onFocus(event);\n\n            if (autocomplete && !open) {\n                openMenu();\n            }\n        };\n\n        const handleFieldBlur = (event: FocusEvent<HTMLDivElement | HTMLInputElement>) => {\n            const isNextFocusInsideList = listRef.current?.contains(\n                (event.relatedTarget || document.activeElement) as HTMLElement,\n            );\n\n            if (!isNextFocusInsideList) {\n                if (onBlur) onBlur(event);\n\n                inputProps.onBlur(event);\n            }\n        };\n\n        const handleFieldKeyDown = (event: KeyboardEvent<HTMLDivElement | HTMLInputElement>) => {\n            inputProps.onKeyDown(event);\n            if (autocomplete && !open && (event.key.length === 1 || event.key === 'Backspace')) {\n                // Для автокомплита - открываем меню при начале ввода\n                openMenu();\n            }\n\n            if (\n                [' ', 'Enter'].includes(event.key) &&\n                !autocomplete &&\n                !nativeSelect &&\n                (event.target as HTMLElement).tagName !== 'INPUT' &&\n                (event.target as HTMLElement).tagName !== 'BUTTON'\n            ) {\n                // Открываем\\закрываем меню по нажатию enter или пробела\n                event.preventDefault();\n                if (!open || highlightedIndex === -1) toggleMenu();\n            }\n        };\n\n        const handleFieldClick = (event: MouseEvent) => {\n            if (!autocomplete || (event.target as HTMLElement).tagName !== 'INPUT') {\n                toggleMenu();\n            } else {\n                openMenu();\n            }\n        };\n\n        const handleNativeSelectChange = useCallback(\n            (event: React.ChangeEvent<HTMLSelectElement>) => {\n                setSelectedItems(\n                    // eslint-disable-next-line\n                    [...(event.target.options as any)].reduce(\n                        (acc, option, index) =>\n                            option.selected ? acc.concat(flatOptions[index]) : acc,\n                        [],\n                    ),\n                );\n            },\n            [flatOptions, setSelectedItems],\n        );\n\n        const getOptionProps = useCallback(\n            (option: OptionShape, index: number) => ({\n                ...(optionProps as object),\n                className: optionClassName,\n                innerProps: getItemProps({\n                    index,\n                    item: option,\n                    disabled: option.disabled,\n                    onMouseDown: (event: MouseEvent) => event.preventDefault(),\n                }),\n                multiple,\n                index,\n                option,\n                size: optionsSize,\n                disabled: option.disabled,\n                highlighted: index === highlightedIndex,\n                selected: selectedItems.includes(option),\n                dataTestId: getDataTestId(dataTestId, 'option'),\n            }),\n            [\n                dataTestId,\n                getItemProps,\n                highlightedIndex,\n                multiple,\n                optionClassName,\n                optionProps,\n                optionsSize,\n                selectedItems,\n            ],\n        );\n\n        useEffect(() => {\n            if (defaultOpen) openMenu();\n        }, [defaultOpen, openMenu]);\n\n        useEffect(() => {\n            if (openProp) {\n                openMenu();\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        const calcOptionsListWidth = useCallback(() => {\n            if (listRef.current) {\n                const widthAttr = optionsListWidth === 'field' ? 'width' : 'minWidth';\n\n                const optionsListMinWidth = rootRef.current\n                    ? rootRef.current.getBoundingClientRect().width\n                    : 0;\n\n                listRef.current.setAttribute('style', '');\n                listRef.current.style[widthAttr] = `${optionsListMinWidth}px`;\n            }\n        }, [optionsListWidth]);\n\n        useEffect(() => {\n            const ResizeObserver = window.ResizeObserver || ResizeObserverPolyfill;\n            const observer = new ResizeObserver(calcOptionsListWidth);\n\n            if (rootRef.current) {\n                observer.observe(rootRef.current);\n            }\n\n            return () => {\n                observer.disconnect();\n            };\n        }, [calcOptionsListWidth, open, optionsListWidth]);\n\n        useLayoutEffect_SAFE_FOR_SSR(calcOptionsListWidth, [\n            open,\n            optionsListWidth,\n            options,\n            selectedItems,\n        ]);\n\n        const renderValue = useCallback(\n            () =>\n                selectedItems.map((option) => (\n                    <input type='hidden' name={name} value={option.key} key={option.key} />\n                )),\n            [selectedItems, name],\n        );\n\n        const renderNativeSelect = useCallback(() => {\n            const value = multiple\n                ? selectedItems.map((option) => option.key)\n                : (selectedItems[0] || {}).key;\n\n            return (\n                <NativeSelect\n                    {...menuProps}\n                    className={styles.nativeSelect}\n                    disabled={disabled}\n                    multiple={multiple}\n                    name={name}\n                    value={value}\n                    onChange={handleNativeSelectChange}\n                    options={options}\n                />\n            );\n        }, [multiple, selectedItems, disabled, name, handleNativeSelectChange, options, menuProps]);\n\n        const needRenderOptionsList = flatOptions.length > 0 || showEmptyOptionsList;\n\n        return (\n            <div\n                {...getComboboxProps({\n                    ref: rootRef,\n                    ...(disabled && { 'aria-disabled': true }),\n                    className: cn(styles.component, { [styles.block]: block }, className),\n                })}\n                onKeyDown={disabled ? undefined : handleFieldKeyDown}\n                tabIndex={-1}\n                data-test-id={getDataTestId(dataTestId)}\n            >\n                {nativeSelect && renderNativeSelect()}\n\n                <Field\n                    selectedMultiple={selectedItems}\n                    selected={selectedItems[0]}\n                    setSelectedItems={setSelectedItems}\n                    toggleMenu={toggleMenu}\n                    multiple={multiple}\n                    open={open}\n                    disabled={disabled}\n                    size={size}\n                    placeholder={placeholder}\n                    label={label && <span {...getLabelProps()}>{label}</span>}\n                    labelView={labelView}\n                    Arrow={Arrow && <Arrow open={open} />}\n                    error={error}\n                    hint={hint}\n                    valueRenderer={valueRenderer}\n                    className={fieldClassName}\n                    innerProps={{\n                        onBlur: handleFieldBlur,\n                        onFocus: disabled ? undefined : handleFieldFocus,\n                        onClick: disabled ? undefined : handleFieldClick,\n                        tabIndex: disabled ? undefined : nativeSelect ? -1 : 0,\n                        ref: mergeRefs([inputProps.ref]),\n                        id: inputProps.id,\n                        'aria-labelledby': inputProps['aria-labelledby'],\n                        'aria-controls': inputProps['aria-controls'],\n                        'aria-autocomplete': autocomplete\n                            ? inputProps['aria-autocomplete']\n                            : undefined,\n                    }}\n                    dataTestId={getDataTestId(dataTestId, 'field')}\n                    {...(fieldProps as AnyObject)}\n                />\n\n                {name && !nativeSelect && renderValue()}\n\n                {!nativeSelect && (\n                    <Popover\n                        open={open}\n                        withTransition={false}\n                        anchorElement={fieldRef.current as HTMLElement}\n                        position={popoverPosition}\n                        preventFlip={preventFlip}\n                        popperClassName={cn(styles.popoverInner, popperClassName)}\n                        update={updatePopover}\n                        zIndex={zIndexPopover}\n                    >\n                        {needRenderOptionsList && (\n                            <div\n                                {...menuProps}\n                                className={cn(optionsListClassName, styles.optionsList)}\n                            >\n                                <OptionsList\n                                    {...(optionsListProps as AnyObject)}\n                                    optionsListWidth={optionsListWidth}\n                                    flatOptions={flatOptions}\n                                    highlightedIndex={highlightedIndex}\n                                    open={open}\n                                    size={size}\n                                    options={options}\n                                    Optgroup={Optgroup}\n                                    Option={Option}\n                                    selectedItems={selectedItems}\n                                    setSelectedItems={setSelectedItems}\n                                    toggleMenu={toggleMenu}\n                                    getOptionProps={getOptionProps}\n                                    visibleOptions={visibleOptions}\n                                    onScroll={onScroll}\n                                    dataTestId={getDataTestId(dataTestId, 'options-list')}\n                                />\n                                <div className={styles.optionsListBorder} />\n                            </div>\n                        )}\n                    </Popover>\n                )}\n            </div>\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_zOUqa\",\"field\":\"field_dLiU8\",\"disabled\":\"disabled_V9ICB\",\"arrow\":\"arrow_J35rX\",\"placeholder\":\"placeholder_ipIF4\",\"contentWrapper\":\"contentWrapper_zxzjS\",\"value\":\"value_WHuoX\",\"focusVisible\":\"focusVisible_otvIz\"};","import React, { useCallback, useRef, useState } from 'react';\nimport cn from 'classnames';\n\nimport { FormControl, FormControlProps } from '@alfalab/core-components-form-control';\nimport { useFocus } from '@alfalab/hooks';\n\nimport { FieldProps as BaseFieldProps } from '../../typings';\nimport { joinOptions } from '../../utils';\n\nimport styles from './index.module.css';\n\nexport const Field = ({\n    size = 'm',\n    open,\n    multiple,\n    error,\n    hint,\n    disabled,\n    label,\n    labelView = 'inner',\n    placeholder,\n    selectedMultiple = [],\n    selected,\n    rightAddons,\n    valueRenderer = joinOptions,\n    setSelectedItems,\n    toggleMenu,\n    Arrow,\n    innerProps,\n    dataTestId,\n    fieldClassName,\n    ...restProps\n}: BaseFieldProps & FormControlProps) => {\n    const [focused, setFocused] = useState(false);\n\n    const wrapperRef = useRef<HTMLDivElement>(null);\n\n    const [focusVisible] = useFocus(wrapperRef, 'keyboard');\n\n    const handleFocus = useCallback(() => setFocused(true), []);\n    const handleBlur = useCallback(() => setFocused(false), []);\n\n    const value = valueRenderer({ selected, selectedMultiple });\n\n    const filled = Boolean(value);\n    const showLabel = !!label && (filled || !placeholder || labelView === 'outer');\n\n    return (\n        <div\n            className={styles.component}\n            ref={wrapperRef}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n        >\n            <FormControl\n                fieldClassName={cn(styles.field, fieldClassName, {\n                    [styles.disabled]: disabled,\n                    [styles.focusVisible]: focusVisible,\n                })}\n                block={true}\n                size={size}\n                focused={open || focused}\n                disabled={disabled}\n                filled={filled}\n                label={showLabel && label}\n                labelView={labelView}\n                error={error}\n                hint={hint}\n                rightAddons={\n                    (Arrow || rightAddons) && (\n                        <React.Fragment>\n                            {rightAddons}\n                            {/* TODO: стоит переделать, но это будет мажорка */}\n                            {Arrow ? React.cloneElement(Arrow, { className: styles.arrow }) : null}\n                        </React.Fragment>\n                    )\n                }\n                data-test-id={dataTestId}\n                {...restProps}\n                {...innerProps}\n            >\n                <div className={styles.contentWrapper}>\n                    {placeholder && !filled && (\n                        <span className={styles.placeholder}>{placeholder}</span>\n                    )}\n                    {filled && <div className={styles.value}>{value}</div>}\n                </div>\n            </FormControl>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"optgroup\":\"optgroup_q8FGV\",\"label\":\"label_YEkB6\",\"l\":\"l_ns03o\",\"xl\":\"xl_Cgp4G\"};","import React from 'react';\nimport cn from 'classnames';\n\nimport { OptgroupProps } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport const Optgroup = ({ children, className, label, size = 's' }: OptgroupProps) => (\n    <React.Fragment>\n        <div className={cn(styles.optgroup, className, styles[size])}>\n            <span className={styles.label}>{label}</span>\n        </div>\n        {children}\n    </React.Fragment>\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkmark\":\"checkmark_CSCCc\",\"after\":\"after_aCWWU\",\"single\":\"single_XrElb\",\"selected\":\"selected_gJ5q_\",\"before\":\"before_A2aV6\",\"multiple\":\"multiple_enpsV\",\"colorIcon\":\"colorIcon_pQ3if\"};","import React, { useCallback } from 'react';\nimport cn from 'classnames';\n\nimport { Badge } from '@alfalab/core-components-badge';\nimport { Checkbox, CheckboxProps } from '@alfalab/core-components-checkbox';\nimport { CheckmarkCircleMIcon } from '@alfalab/icons-glyph/CheckmarkCircleMIcon';\nimport CheckmarkMIcon from '@alfalab/icons-glyph/CheckmarkMIcon';\n\nimport { CheckmarkProps } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport const Checkmark = ({\n    selected,\n    disabled = false,\n    className,\n    multiple,\n    position = 'before',\n}: CheckmarkProps) => {\n    const single = !multiple;\n\n    const checkmarkClassNames = cn(styles.checkmark, className, styles[position], {\n        [styles.multiple]: !single,\n        [styles.single]: single,\n        [styles.selected]: selected,\n    });\n\n    const handleCheckboxClick = useCallback<Required<CheckboxProps>['onClick']>(\n        (event) => event.stopPropagation(),\n        [],\n    );\n\n    return single ? (\n        <div className={checkmarkClassNames}>\n            {position === 'before' ? (\n                <Badge\n                    className={styles.after}\n                    view='icon'\n                    size='m'\n                    iconColor='positive'\n                    content={<CheckmarkCircleMIcon className={styles.colorIcon} />}\n                />\n            ) : (\n                <CheckmarkMIcon className={cn(styles.displayIcon)} />\n            )}\n        </div>\n    ) : (\n        <Checkbox\n            checked={selected}\n            disabled={disabled}\n            className={checkmarkClassNames}\n            size='m'\n            onClick={handleCheckboxClick}\n        />\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"checkmark\":\"checkmark_rWzcg\",\"selected\":\"selected_wACln\",\"displayIcon\":\"displayIcon_GEtCs\",\"displayBadge\":\"displayBadge_ei_LP\"};","import React from 'react';\nimport cn from 'classnames';\n\nimport { CheckmarkMIcon } from '@alfalab/icons-glyph/CheckmarkMIcon';\n\nimport { CheckmarkProps } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport const Checkmark = ({ selected, className }: CheckmarkProps) => (\n    <div\n        className={cn(styles.checkmark, className, {\n            [styles.selected]: selected,\n        })}\n    >\n        <CheckmarkMIcon className={styles.displayIcon} />\n    </div>\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"option\":\"option_gwrUy\",\"disabled\":\"disabled__Fu13\",\"s\":\"s_utmIH\",\"m\":\"m_Dt3qv\",\"l\":\"l_rPQbN\",\"xl\":\"xl_m_KYY\",\"selected\":\"selected_hRgWF\",\"highlighted\":\"highlighted_kJT1g\",\"content\":\"content_ExbhC\",\"textContent\":\"textContent_IMZ6e\"};","import React, { FC, isValidElement } from 'react';\nimport cn from 'classnames';\n\nimport { OptionProps } from '../../typings';\nimport { Checkmark as DefaultCheckMark } from '../checkmark';\nimport { Checkmark as DefaultMobileCheckmark } from '../checkmark-mobile';\n\nimport styles from './index.module.css';\n\nexport const Option: FC<OptionProps> = ({\n    size = 's',\n    className,\n    option,\n    children,\n    selected,\n    highlighted,\n    disabled,\n    multiple,\n    mobile,\n    Checkmark = mobile ? DefaultMobileCheckmark : DefaultCheckMark,\n    innerProps,\n    dataTestId,\n}) => {\n    const content = children || option.content || option.key;\n    const { showCheckMark = true } = option;\n\n    return (\n        <div\n            {...innerProps}\n            className={cn(styles.option, styles[size], className, {\n                [styles.highlighted]: !mobile && highlighted,\n                [styles.selected]: selected,\n                [styles.disabled]: disabled,\n            })}\n            data-test-id={dataTestId}\n        >\n            {Checkmark && showCheckMark && (\n                <Checkmark\n                    disabled={disabled}\n                    selected={selected}\n                    multiple={multiple}\n                    position='before'\n                />\n            )}\n\n            <div\n                className={cn(styles.content, {\n                    [styles.textContent]: !isValidElement(content),\n                })}\n            >\n                {content}\n            </div>\n\n            {/** Workaround чтобы для клика показывать отметку справа и всегда в виде иконки */}\n            {Checkmark && showCheckMark && (\n                <Checkmark\n                    disabled={disabled}\n                    selected={selected}\n                    multiple={multiple}\n                    position='after'\n                />\n            )}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"optionsList\":\"optionsList_dWWP1\",\"optionsListHeader\":\"optionsListHeader_l6dzu\",\"optionsListFooter\":\"optionsListFooter_RLFvC\",\"withBorder\":\"withBorder_B_X9i\",\"scrollable\":\"scrollable_gc3Nx\",\"emptyPlaceholder\":\"emptyPlaceholder_rowx2\",\"l\":\"l_uu6sb\",\"xl\":\"xl_hSRK3\"};","import React, { forwardRef, useRef } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport cn from 'classnames';\n\nimport { Scrollbar } from '@alfalab/core-components-scrollbar';\nimport { useMedia } from '@alfalab/hooks';\n\nimport { DEFAULT_VISIBLE_OPTIONS } from '../../consts';\nimport { GroupShape, OptionShape, OptionsListProps } from '../../typings';\nimport { isGroup, useVisibleOptions } from '../../utils';\nimport { Optgroup as DefaultOptgroup } from '../optgroup';\n\nimport styles from './index.module.css';\n\nconst createCounter = () => {\n    let count = 0;\n\n    // eslint-disable-next-line no-plusplus\n    return () => count++;\n};\n\nexport const OptionsList = forwardRef<HTMLDivElement, OptionsListProps>(\n    (\n        {\n            size = 's',\n            className,\n            optionGroupClassName,\n            Option,\n            getOptionProps,\n            options = [],\n            Optgroup = DefaultOptgroup,\n            dataTestId,\n            emptyPlaceholder,\n            visibleOptions = DEFAULT_VISIBLE_OPTIONS,\n            onScroll,\n            open,\n            header,\n            footer,\n            showFooter = true,\n            optionsListWidth,\n            nativeScrollbar: nativeScrollbarProp,\n            flatOptions = [],\n        },\n        ref,\n    ) => {\n        let [nativeScrollbar] = useMedia<boolean>([[true, '(max-width: 1023px)']], false);\n\n        nativeScrollbar = Boolean(nativeScrollbarProp ?? nativeScrollbar);\n\n        const renderOption = (option: OptionShape, index: number) => (\n            <Option key={option.key} {...getOptionProps(option, index)} />\n        );\n\n        const listRef = useRef<HTMLDivElement>(null);\n        const scrollbarRef = useRef<HTMLDivElement>(null);\n        const counter = createCounter();\n        const renderGroup = (group: GroupShape) => (\n            <Optgroup\n                className={optionGroupClassName}\n                label={group.label}\n                key={group.label}\n                size={size}\n            >\n                {group.options.map((option) => renderOption(option, counter()))}\n            </Optgroup>\n        );\n\n        useVisibleOptions({\n            ...(!nativeScrollbar && { styleTargetRef: scrollbarRef }),\n            visibleOptions,\n            listRef,\n            open,\n            invalidate: options,\n        });\n\n        if (options.length === 0 && !emptyPlaceholder) {\n            return null;\n        }\n\n        const renderListItems = () => (\n            <React.Fragment>\n                {options.map((option) =>\n                    isGroup(option) ? renderGroup(option) : renderOption(option, counter()),\n                )}\n\n                {emptyPlaceholder && options.length === 0 && (\n                    <div className={styles.emptyPlaceholder}>{emptyPlaceholder}</div>\n                )}\n            </React.Fragment>\n        );\n\n        const renderWithCustomScrollbar = () => {\n            const scrollableNodeProps = {\n                onScroll,\n                'data-test-id': dataTestId,\n                ref: ref as React.RefObject<HTMLDivElement>,\n            };\n\n            return (\n                <Scrollbar\n                    className={styles.scrollable}\n                    ref={scrollbarRef}\n                    horizontalAutoStretch={optionsListWidth === 'content'}\n                    scrollableNodeProps={scrollableNodeProps}\n                    contentNodeProps={{ ref: listRef }}\n                >\n                    {renderListItems()}\n                </Scrollbar>\n            );\n        };\n\n        const renderWithNativeScrollbar = () => (\n            <div className={styles.scrollable} ref={mergeRefs([listRef, ref])} onScroll={onScroll}>\n                {renderListItems()}\n            </div>\n        );\n\n        return (\n            <div\n                {...(nativeScrollbar && { 'data-test-id': dataTestId })}\n                className={cn(styles.optionsList, styles[size], className)}\n            >\n                {header && <div className={styles.optionsListHeader}>{header}</div>}\n\n                {nativeScrollbar ? renderWithNativeScrollbar() : renderWithCustomScrollbar()}\n\n                {showFooter && footer && (\n                    <div\n                        className={cn(styles.optionsListFooter, {\n                            [styles.withBorder]:\n                                visibleOptions && flatOptions.length > visibleOptions,\n                        })}\n                    >\n                        {footer}\n                    </div>\n                )}\n            </div>\n        );\n    },\n);\n","export const DEFAULT_VISIBLE_OPTIONS = 5;\n","import { cloneElement, isValidElement, ReactNode, RefObject, useEffect, useRef } from 'react';\n\nimport { BaseSelectProps, GroupShape, OptionShape } from './typings';\n\nexport const isGroup = (item: OptionShape | GroupShape): item is GroupShape =>\n    Object.prototype.hasOwnProperty.call(item, 'options');\n\nexport const isOptionShape = (item: OptionShape | string | null): item is OptionShape =>\n    !!item && Object.prototype.hasOwnProperty.call(item, 'key');\n\nexport const joinOptions = ({\n    selected,\n    selectedMultiple,\n}: {\n    selected?: OptionShape;\n    selectedMultiple?: OptionShape[];\n}) => {\n    const options = selectedMultiple || (selected ? [selected] : []);\n\n    if (!options.length) return null;\n\n    return options.reduce((acc: Array<ReactNode | string>, option: OptionShape, index: number) => {\n        if (isValidElement(option.content)) {\n            acc.push(cloneElement(option.content, { key: option.key }));\n        } else {\n            acc.push(option.content);\n        }\n\n        if (index < options.length - 1) acc.push(', ');\n\n        return acc;\n    }, []);\n};\n\n// За один проход делает список пунктов меню плоским и находит выбранные пункты по ключу\nexport function processOptions(\n    options: BaseSelectProps['options'],\n    selected: BaseSelectProps['selected'] = [],\n) {\n    const flatOptions: OptionShape[] = [];\n\n    const selectedArray = Array.isArray(selected) ? selected : [selected];\n    const selectedOptions = selectedArray.filter(isOptionShape);\n    const selectedKeys = selectedArray.filter(\n        (option): option is string => typeof option === 'string',\n    );\n\n    const isSelected = (option: OptionShape) => selectedKeys.includes(option.key);\n\n    const process = (option: OptionShape) => {\n        flatOptions.push(option);\n\n        if (isSelected(option)) {\n            selectedOptions.push(option);\n        }\n    };\n\n    options.forEach((option) => {\n        if (isGroup(option)) {\n            option.options.forEach(process);\n        } else {\n            process(option);\n        }\n    });\n\n    return { flatOptions, selectedOptions };\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ntype useVisibleOptionsArgs = {\n    /**\n     * Количество видимых пунктов\n     */\n    visibleOptions: number;\n\n    /**\n     * Реф на контейнер с пунтами меню\n     */\n    listRef: RefObject<HTMLElement>;\n\n    /**\n     * Реф на контейнер, которому нужно установить высоту\n     */\n    styleTargetRef?: RefObject<HTMLElement>;\n\n    /**\n     * Флаг открытия меню\n     */\n    open?: boolean;\n\n    /**\n     * Позволяет вызвать пересчет высоты\n     */\n    invalidate?: unknown;\n};\n\nexport function useVisibleOptions({\n    visibleOptions,\n    listRef,\n    styleTargetRef = listRef,\n    open,\n    invalidate,\n}: useVisibleOptionsArgs) {\n    useEffect(() => {\n        const list = listRef.current;\n        const styleTarget = styleTargetRef.current;\n\n        if (open && list && styleTarget && visibleOptions > 0) {\n            const childCount = list.children.length;\n            const optionsNodes = ([] as HTMLElement[]).slice.call(\n                list.children,\n                0,\n                visibleOptions + 1,\n            );\n\n            let height = optionsNodes\n                .slice(0, visibleOptions)\n                .reduce((acc, child) => acc + child.clientHeight, 0);\n\n            if (visibleOptions < childCount) {\n                const lastVisibleOptionHeight = optionsNodes[optionsNodes.length - 1].clientHeight;\n\n                // Если кол-во опций больше visibleOptions на 1, то показываем все опции, иначе добавляем половинку\n                height += Math.round(\n                    childCount - visibleOptions === 1\n                        ? lastVisibleOptionHeight\n                        : lastVisibleOptionHeight / 2,\n                );\n            }\n\n            styleTarget.style.height = `${height}px`;\n        }\n    }, [listRef, open, styleTargetRef, visibleOptions, invalidate]);\n}\n\n// TODO: перенести\nexport function usePrevious<T>(value: T) {\n    const ref = useRef<T>();\n\n    useEffect(() => {\n        ref.current = value;\n    }, [value]);\n\n    return ref.current;\n}\n\n// TODO: перенести\nexport const lastIndexOf = <T>(array: T[], predicate: (item: T) => boolean) => {\n    for (let i = array.length - 1; i >= 0; i--) {\n        if (predicate(array[i])) return i;\n    }\n\n    return -1;\n};\n","export const getDataTestId = (dataTestId?: string, element?: string) => {\n    const elementPart = element ? `-${element.toLowerCase()}` : '';\n\n    return dataTestId ? `${dataTestId}${elementPart}` : undefined;\n};\n"],"names":["Select","forwardRef","_ref","ref","_ref$Arrow","Arrow","DefaultArrow","_ref$Field","Field","DefaultField","_ref$OptionsList","OptionsList","DefaultOptionsList","_ref$Optgroup","Optgroup","DefaultOptgroup","_ref$Option","Option","DefaultOption","restProps","_objectWithoutProperties","_excluded","_jsx","BaseSelect","_objectSpread","open","className","ChevronDownMIcon","cn","styles","_defineProperty","option","value","key","disabled","children","content","Group","_ref2","label","options","map","NativeSelect","_ref3","multiple","name","onChange","handleClick","useCallback","event","stopPropagation","onClick","isGroup","_createElement","dataTestId","fieldClassName","optionsListClassName","optionClassName","popperClassName","_ref$autocomplete","autocomplete","_ref$multiple","_ref$allowUnselect","allowUnselect","_ref$disabled","_ref$closeOnSelect","closeOnSelect","_ref$circularNavigati","circularNavigation","_ref$nativeSelect","nativeSelect","_ref$defaultOpen","defaultOpen","openProp","_ref$popoverPosition","popoverPosition","_ref$preventFlip","preventFlip","_ref$optionsListWidth","optionsListWidth","id","selected","_ref$size","size","_ref$optionsSize","optionsSize","error","hint","block","labelView","placeholder","_ref$fieldProps","fieldProps","_ref$optionsListProps","optionsListProps","_ref$optionProps","optionProps","valueRenderer","onOpen","onFocus","onBlur","onScroll","updatePopover","zIndexPopover","_ref$showEmptyOptions","showEmptyOptionsList","visibleOptions","rootRef","useRef","fieldRef","listRef","initiatorRef","itemToString","_useMemo","useMemo","processOptions","flatOptions","selectedOptions","useMultipleSelectionProps","onSelectedItemsChange","changes","_changes$selectedItem","selectedItems","selectedMultiple","length","initiator","current","stateReducer","state","actionAndChanges","type","useMultipleSelection","undefined","_useMultipleSelection","addSelectedItem","setSelectedItems","removeSelectedItem","getDropdownProps","_useCombobox","useCombobox","isOpen","items","defaultHighlightedIndex","onIsOpenChange","setTimeout","selectedItem","alreadySelected","includes","allowRemove","highlightedIndex","getMenuProps","getInputProps","getItemProps","getComboboxProps","getLabelProps","toggleMenu","openMenu","menuProps","suppressRefError","inputProps","mergeRefs","handleNativeSelectChange","_toConsumableArray","target","reduce","acc","index","concat","getOptionProps","innerProps","item","onMouseDown","preventDefault","highlighted","getDataTestId","useEffect","calcOptionsListWidth","widthAttr","optionsListMinWidth","getBoundingClientRect","width","setAttribute","style","observer","window","ResizeObserver","ResizeObserverPolyfill","observe","disconnect","useLayoutEffect_SAFE_FOR_SSR","renderValue","renderNativeSelect","needRenderOptionsList","_jsxs","onKeyDown","handleFieldKeyDown","tagName","tabIndex","handleFieldBlur","_listRef$current","contains","relatedTarget","document","activeElement","handleFieldFocus","handleFieldClick","Popover","withTransition","anchorElement","position","update","zIndex","_cn","_ref$labelView","_ref$selectedMultiple","rightAddons","_ref$valueRenderer","joinOptions","_useState","useState","_useState2","_slicedToArray","focused","setFocused","wrapperRef","_useFocus","useFocus","focusVisible","handleFocus","handleBlur","filled","Boolean","showLabel","FormControl","React","Checkmark","_ref$position","single","checkmarkClassNames","handleCheckboxClick","Badge","view","iconColor","CheckmarkCircleMIcon","CheckmarkMIcon","Checkbox","checked","mobile","_ref$Checkmark","DefaultMobileCheckmark","DefaultCheckMark","_option$showCheckMark","showCheckMark","isValidElement","optionGroupClassName","_ref$options","emptyPlaceholder","_ref$visibleOptions","DEFAULT_VISIBLE_OPTIONS","header","footer","_ref$showFooter","showFooter","nativeScrollbarProp","nativeScrollbar","_ref$flatOptions","_useMedia","useMedia","renderOption","scrollbarRef","counter","createCounter","count","useVisibleOptions","styleTargetRef","invalidate","renderListItems","renderGroup","group","renderWithNativeScrollbar","renderWithCustomScrollbar","scrollableNodeProps","Scrollbar","horizontalAutoStretch","contentNodeProps","Object","prototype","hasOwnProperty","call","isOptionShape","push","cloneElement","arguments","selectedArray","Array","isArray","filter","selectedKeys","process","isSelected","forEach","_ref2$styleTargetRef","list","styleTarget","childCount","optionsNodes","slice","height","child","clientHeight","lastVisibleOptionHeight","Math","round","usePrevious","lastIndexOf","array","predicate","i","element","elementPart","toLowerCase"],"sourceRoot":""}