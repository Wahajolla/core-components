{"version":3,"file":"7041.e9a591a5.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./packages/calendar/src/components/header/index.module.css?7a88","webpack://@alfalab/core-components/./packages/calendar/src/components/header/Component.tsx","webpack://@alfalab/core-components/./packages/calendar/src/components/select-button/index.module.css?dd7e","webpack://@alfalab/core-components/./packages/calendar/src/components/select-button/Component.tsx","webpack://@alfalab/core-components/./packages/calendar/src/components/month-year-header/index.module.css?9bb5","webpack://@alfalab/core-components/./packages/calendar/src/components/month-year-header/Component.tsx","webpack://@alfalab/core-components/./packages/calendar/src/components/months-table/index.module.css?4d1b","webpack://@alfalab/core-components/./packages/calendar/src/components/months-table/Component.tsx","webpack://@alfalab/core-components/./packages/calendar/src/components/years-table/index.module.css?e6d1","webpack://@alfalab/core-components/./packages/calendar/src/components/years-table/Component.tsx","webpack://@alfalab/core-components/./packages/calendar/src/desktop.module.css?94b2","webpack://@alfalab/core-components/./packages/calendar/src/Component.desktop.tsx","webpack://@alfalab/core-components/./packages/calendar/src/components/calendar-mobile/index.module.css?75d2","webpack://@alfalab/core-components/./packages/calendar/src/components/calendar-mobile/Component.tsx","webpack://@alfalab/core-components/./packages/calendar/src/components/days-table/index.module.css?a1e4","webpack://@alfalab/core-components/./packages/calendar/src/components/days-table/Component.tsx","webpack://@alfalab/core-components/./packages/calendar/src/components/period-slider/utils.ts","webpack://@alfalab/core-components/./packages/calendar/src/components/period-slider/index.module.css?e616","webpack://@alfalab/core-components/./packages/calendar/src/components/period-slider/Component.tsx","webpack://@alfalab/core-components/./packages/calendar/src/usePeriod.ts","webpack://@alfalab/core-components/./packages/calendar/src/Component.responsive.tsx","webpack://@alfalab/core-components/./packages/calendar/src/useCalendar.ts","webpack://@alfalab/core-components/./packages/calendar/src/utils.ts","webpack://@alfalab/core-components/./packages/screenshot-utils/screenshots-story/utils.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"header\":\"header_NrMdQ\",\"withShadow\":\"withShadow_d7QW7\"};","import React, { FC, ReactNode } from 'react';\nimport cn from 'classnames';\n\nimport { SelectorView } from '../../typings';\n\nimport styles from './index.module.css';\n\nexport type HeaderProps = {\n    /**\n     * Вид шапки — месяц и год или только месяц\n     */\n    view?: SelectorView;\n\n    /**\n     * Отображать тень? (нужна при прокрутке)\n     */\n    withShadow?: boolean;\n\n    /**\n     * Дочерние элементы.\n     */\n    children?: ReactNode;\n};\n\nexport const Header: FC<HeaderProps> = ({ view = 'full', withShadow, children }) => (\n    <div\n        className={cn(styles.header, {\n            [styles.monthOnly]: view === 'month-only',\n            [styles.withShadow]: withShadow,\n        })}\n        aria-live='polite'\n    >\n        {children}\n    </div>\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"button_O9Vap\",\"filled\":\"filled_fCwuJ\",\"outlined\":\"outlined_U_ALc\",\"selected\":\"selected_ssICg\"};","import React, { ButtonHTMLAttributes, forwardRef } from 'react';\nimport cn from 'classnames';\n\nimport { Button } from '@alfalab/core-components-button';\n\nimport styles from './index.module.css';\n\nexport type SelectButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Вид кнопки\n     */\n    view?: 'default' | 'filled' | 'outlined' | 'selected';\n};\n\nexport const SelectButton = forwardRef<HTMLButtonElement, SelectButtonProps>(\n    ({ className, children, view = 'default', ...restProps }, ref) => (\n        <Button\n            {...restProps}\n            ref={ref}\n            view='ghost'\n            size='xs'\n            className={cn(styles.button, styles[view], className)}\n        >\n            {children}\n        </Button>\n    ),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_EC2vL\",\"button\":\"button_dIA8x\",\"month\":\"month_rlIJB\",\"year\":\"year_bH27G\",\"buttonContent\":\"buttonContent_H9ohd\",\"upDownIcon\":\"upDownIcon_jFfhK\"};","import React, { FC, MouseEvent } from 'react';\nimport cn from 'classnames';\n\nimport { ChevronDownCompactSIcon } from '@alfalab/icons-glyph/ChevronDownCompactSIcon';\n\nimport { monthName } from '../../utils';\nimport { SelectButton } from '../select-button';\n\nimport styles from './index.module.css';\n\nexport type MonthYearHeaderProps = {\n    /**\n     * Активная дата\n     */\n    value?: Date;\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Обработчик нажатия на кнопку месяца\n     */\n    onMonthClick?: (event: MouseEvent<HTMLButtonElement>) => void;\n\n    /**\n     * Обработчик нажатия на кнопку года\n     */\n    onYearClick?: (event: MouseEvent<HTMLButtonElement>) => void;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    dataTestId?: string;\n};\n\nexport const MonthYearHeader: FC<MonthYearHeaderProps> = ({\n    value,\n    className,\n    onMonthClick,\n    onYearClick,\n    dataTestId,\n}) => {\n    const month = value ? monthName(value) : undefined;\n    const year = value ? value.getFullYear().toString() : undefined;\n\n    return (\n        <div\n            className={cn(styles.component, className)}\n            aria-live='polite'\n            data-test-id={dataTestId}\n        >\n            <SelectButton\n                view='filled'\n                className={cn(styles.button, styles.month)}\n                onClick={onMonthClick}\n            >\n                <span className={styles.buttonContent}>\n                    {month}\n                    <ChevronDownCompactSIcon className={styles.upDownIcon} />\n                </span>\n            </SelectButton>\n            <SelectButton\n                view='filled'\n                className={cn(styles.button, styles.year)}\n                onClick={onYearClick}\n            >\n                <span className={styles.buttonContent}>\n                    {year}\n                    <ChevronDownCompactSIcon className={styles.upDownIcon} />\n                </span>\n            </SelectButton>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"monthsTable\":\"monthsTable_e4rtu\",\"responsive\":\"responsive_fICxH\",\"button\":\"button_XNCgm\"};","import React, { FC, useCallback } from 'react';\nimport cn from 'classnames';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport isThisMonth from 'date-fns/isThisMonth';\n\nimport { Month } from '../../typings';\nimport { monthName } from '../../utils';\nimport { SelectButton, SelectButtonProps } from '../select-button';\n\nimport styles from './index.module.css';\n\nexport type MonthsTableProps = {\n    /**\n     * Массив месяцев\n     */\n    months?: Month[];\n\n    /**\n     * Выбранный месяц\n     */\n    selectedMonth?: Date;\n\n    /**\n     * Доп пропсы для переданного месяца\n     */\n    getMonthProps: (day: Month) => Record<string, unknown>;\n\n    /**\n     * Должен ли календарь подстраиваться под ширину родителя.\n     */\n    responsive?: boolean;\n};\n\nexport const MonthsTable: FC<MonthsTableProps> = ({\n    selectedMonth,\n    months = [],\n    getMonthProps,\n    responsive,\n}) => {\n    const view = useCallback(\n        (month: Month): SelectButtonProps['view'] => {\n            if (selectedMonth && isSameMonth(selectedMonth, month.date)) return 'selected';\n            if (isThisMonth(month.date)) return 'outlined';\n\n            return 'default';\n        },\n        [selectedMonth],\n    );\n\n    return (\n        <div className={cn(styles.monthsTable, { [styles.responsive]: responsive })}>\n            {months.map((month) => (\n                <SelectButton\n                    {...getMonthProps(month)}\n                    key={month.date.getTime()}\n                    className={styles.button}\n                    view={view(month)}\n                >\n                    {monthName(month.date)}\n                </SelectButton>\n            ))}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"yearsTable\":\"yearsTable_e3b2a\",\"responsive\":\"responsive_FSOrB\",\"inner\":\"inner_gf8YK\",\"button\":\"button_XxUt6\"};","import React, { FC, MouseEvent, useCallback, useLayoutEffect, useRef } from 'react';\nimport cn from 'classnames';\nimport isSameYear from 'date-fns/isSameYear';\nimport isThisYear from 'date-fns/isThisYear';\n\nimport { SelectButton, SelectButtonProps } from '../select-button';\n\nimport styles from './index.module.css';\n\nexport type YearsTableProps = {\n    /**\n     * Массив лет\n     */\n    years?: Date[];\n\n    /**\n     * Выбранный год\n     */\n    selectedYear?: Date;\n\n    /**\n     * Доп. пропсы для переданного года\n     */\n    getYearProps: (year: Date) => Record<string, unknown>;\n\n    /**\n     * Обработчик скролла\n     */\n    onScroll: (scrollTop: number) => void;\n\n    /**\n     * Должен ли календарь подстраиваться под ширину родителя.\n     */\n    responsive?: boolean;\n};\n\nexport const YearsTable: FC<YearsTableProps> = ({\n    selectedYear,\n    years = [],\n    getYearProps,\n    onScroll,\n    responsive,\n}) => {\n    const ref = useRef<HTMLDivElement>(null);\n\n    const view = useCallback(\n        (year: Date): SelectButtonProps['view'] => {\n            if (selectedYear && isSameYear(selectedYear, year)) return 'selected';\n            if (isThisYear(year)) return 'outlined';\n\n            return 'default';\n        },\n        [selectedYear],\n    );\n\n    const handleScroll = useCallback(\n        (event: MouseEvent<HTMLDivElement>) => {\n            onScroll(event.currentTarget.scrollTop);\n        },\n        [onScroll],\n    );\n\n    useLayoutEffect(() => {\n        const listNode = ref.current;\n        const selector = `.${styles.button}[tabIndex=\"0\"]`;\n        const selectedYearNode = listNode && listNode.querySelector<HTMLButtonElement>(selector);\n\n        if (listNode && selectedYearNode) {\n            const topIndent = listNode.clientHeight / 2 - selectedYearNode.clientHeight / 2;\n\n            listNode.scrollTop = selectedYearNode.offsetTop - topIndent;\n\n            onScroll(listNode.scrollTop);\n        }\n    }, [onScroll, selectedYear]);\n\n    return (\n        <div\n            className={cn(styles.yearsTable, { [styles.responsive]: responsive })}\n            onScroll={handleScroll}\n            ref={ref}\n        >\n            <div className={styles.inner}>\n                {years.map((year) => (\n                    <SelectButton\n                        {...getYearProps(year)}\n                        key={year.getFullYear()}\n                        view={view(year)}\n                        className={styles.button}\n                    >\n                        {year.getFullYear()}\n                    </SelectButton>\n                ))}\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_Zyfpm\",\"responsive\":\"responsive_s9VXw\",\"period\":\"period_EtRSg\",\"monthYear\":\"monthYear_e3f8M\",\"container\":\"container_GBql6\",\"sixWeeks\":\"sixWeeks_YRx8G\"};","import React, { forwardRef, MouseEvent, useCallback, useMemo, useState } from 'react';\nimport cn from 'classnames';\nimport endOfDay from 'date-fns/endOfDay';\nimport startOfDay from 'date-fns/startOfDay';\nimport startOfMonth from 'date-fns/startOfMonth';\n\nimport { useDidUpdateEffect } from '@alfalab/hooks';\n\nimport { DaysTable } from './components/days-table';\nimport { Header } from './components/header';\nimport { MonthYearHeader } from './components/month-year-header';\nimport { MonthsTable } from './components/months-table';\nimport { PeriodSlider } from './components/period-slider';\nimport { YearsTable } from './components/years-table';\nimport { DayAddons, SelectorView, View } from './typings';\nimport { useCalendar } from './useCalendar';\nimport { limitDate } from './utils';\n\nimport styles from './desktop.module.css';\n\nexport type CalendarDesktopProps = {\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Вид по умолчанию (выбор дней, месяцев, лет)\n     */\n    defaultView?: View;\n\n    /**\n     * Вид шапки — месяц и год или только месяц\n     */\n    selectorView?: SelectorView;\n\n    /**\n     * Выбранная дата (timestamp)\n     */\n    value?: number;\n\n    /**\n     * Открытый месяц (timestamp)\n     */\n    month?: number;\n\n    /**\n     * Месяц, открытый по умолчанию (timestamp)\n     */\n    defaultMonth?: number;\n\n    /**\n     * Минимальная дата, доступная для выбора (timestamp)\n     */\n    minDate?: number;\n\n    /**\n     * Максимальная дата, доступная для выбора (timestamp)\n     */\n    maxDate?: number;\n\n    /**\n     * Начало выделенного периода (timestamp)\n     */\n    selectedFrom?: number;\n\n    /**\n     * Конец выделенного периода (timestamp)\n     */\n    selectedTo?: number;\n\n    /**\n     * Индикатор, что выбран полный период\n     */\n    rangeComplete?: boolean;\n\n    /**\n     * Список событий\n     */\n    events?: Array<Date | number>;\n\n    /**\n     * Список отключенных для выбора дней.\n     */\n    offDays?: Array<Date | number>;\n\n    /**\n     * Список выходных\n     */\n    holidays?: Array<Date | number>;\n\n    /**\n     * Обработчик изменения месяца (или года)\n     */\n    onMonthChange?: (month: number) => void;\n\n    /**\n     * Обработчик выбора даты\n     */\n    onChange?: (date?: number) => void;\n\n    /**\n     * Обработчик нажатия на кнопку месяца\n     */\n    onMonthClick?: (event: MouseEvent<HTMLButtonElement>) => void;\n\n    /**\n     * Обработчик нажатия на кнопку года\n     */\n    onYearClick?: (event: MouseEvent<HTMLButtonElement>) => void;\n\n    /**\n     * Обработчик нажатия на период\n     */\n    onPeriodClick?: (event: MouseEvent<HTMLAnchorElement>) => void;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    dataTestId?: string;\n\n    /**\n     * Нужно ли рендерить шапку календаря\n     */\n    hasHeader?: boolean;\n\n    /**\n     * Должен ли календарь подстраиваться под ширину родителя.\n     */\n    responsive?: boolean;\n\n    /**\n     * Дополнительный контент под числом\n     */\n    dayAddons?: DayAddons[];\n\n    /**\n     * Форма ячейки дня\n     */\n    shape?: 'rounded' | 'rectangular';\n\n    /**\n     * Отображать ли текущий год, если selectorView 'month-only'\n     * @default false\n     */\n    showCurrentYearSelector?: boolean;\n};\n\nexport const CalendarDesktop = forwardRef<HTMLDivElement, CalendarDesktopProps>(\n    (\n        {\n            className,\n            defaultView = 'days',\n            selectorView = 'full',\n            value,\n            month: monthTimestamp,\n            minDate: minDateTimestamp,\n            maxDate: maxDateTimestamp,\n            defaultMonth: defaultMonthTimestamp = +new Date(),\n            selectedFrom,\n            selectedTo,\n            rangeComplete,\n            offDays,\n            events,\n            holidays,\n            onChange,\n            onMonthChange,\n            onMonthClick,\n            onYearClick,\n            onPeriodClick,\n            dataTestId,\n            hasHeader = true,\n            responsive,\n            dayAddons,\n            shape = 'rounded',\n            showCurrentYearSelector = false,\n        },\n        ref,\n    ) => {\n        const [view, setView] = useState<View>(defaultView);\n        const [scrolled, setScrolled] = useState(false);\n\n        const selected = useMemo(() => (value ? new Date(value) : undefined), [value]);\n\n        const defaultMonth = useMemo(\n            () =>\n                startOfMonth(\n                    selected ||\n                        limitDate(defaultMonthTimestamp, minDateTimestamp, maxDateTimestamp),\n                ),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [],\n        );\n\n        const month = useMemo(\n            () => (monthTimestamp ? new Date(monthTimestamp) : undefined),\n            [monthTimestamp],\n        );\n\n        const minDate = useMemo(\n            () => (minDateTimestamp ? startOfDay(minDateTimestamp) : undefined),\n            [minDateTimestamp],\n        );\n\n        const maxDate = useMemo(\n            () => (maxDateTimestamp ? endOfDay(maxDateTimestamp) : undefined),\n            [maxDateTimestamp],\n        );\n\n        const {\n            activeMonth,\n            weeks,\n            months,\n            years,\n            canSetPrevMonth,\n            canSetNextMonth,\n            setMonthByDate,\n            setPrevMonth,\n            setNextMonth,\n            highlighted,\n            getDayProps,\n            getMonthProps,\n            getYearProps,\n            getRootProps,\n        } = useCalendar({\n            month,\n            defaultMonth,\n            view,\n            minDate,\n            maxDate,\n            selected,\n            offDays,\n            events,\n            holidays,\n            dayAddons,\n            onChange,\n            onMonthChange,\n        });\n\n        const toggleView = useCallback(\n            (newView: View) => {\n                setView(view === newView ? 'days' : newView);\n            },\n            [view],\n        );\n\n        const handleScroll = useCallback((scrollTop: number) => {\n            setScrolled(scrollTop > 0);\n        }, []);\n\n        const handlePrevArrowClick = useCallback(() => {\n            // TODO: Что должны делать стрелки при view !== days?\n            setPrevMonth();\n        }, [setPrevMonth]);\n\n        const handleNextArrowClick = useCallback(() => {\n            setNextMonth();\n        }, [setNextMonth]);\n\n        const handleMonthClick = useCallback(\n            (event: React.MouseEvent<HTMLButtonElement>) => {\n                toggleView('months');\n\n                if (onMonthClick) {\n                    onMonthClick(event);\n                }\n            },\n            [onMonthClick, toggleView],\n        );\n\n        const handleYearClick = useCallback(\n            (event: React.MouseEvent<HTMLButtonElement>) => {\n                toggleView('years');\n\n                if (onYearClick) {\n                    onYearClick(event);\n                }\n            },\n            [onYearClick, toggleView],\n        );\n\n        useDidUpdateEffect(() => {\n            setView('days');\n        }, [activeMonth]);\n\n        useDidUpdateEffect(() => {\n            setScrolled(false);\n        }, [view]);\n\n        useDidUpdateEffect(() => {\n            const newMonth = value && startOfMonth(value);\n\n            if (newMonth && newMonth.getTime() !== activeMonth.getTime()) {\n                setMonthByDate(newMonth);\n            }\n        }, [value]);\n\n        return (\n            <div\n                {...getRootProps({ ref })}\n                className={cn('cc-calendar', styles.component, className, {\n                    [styles.sixWeeks]: weeks.length === 6,\n                    [styles.responsive]: responsive,\n                })}\n                data-test-id={dataTestId}\n            >\n                {hasHeader && (\n                    <Header view={selectorView} withShadow={scrolled}>\n                        {selectorView === 'month-only' ? (\n                            <PeriodSlider\n                                className={styles.period}\n                                value={activeMonth}\n                                periodType='month'\n                                prevArrowDisabled={!canSetPrevMonth}\n                                nextArrowDisabled={!canSetNextMonth}\n                                hideDisabledArrows={true}\n                                showCurrentYearSelector={showCurrentYearSelector}\n                                onPrevArrowClick={handlePrevArrowClick}\n                                onNextArrowClick={handleNextArrowClick}\n                                onPeriodClick={onPeriodClick}\n                            />\n                        ) : (\n                            <MonthYearHeader\n                                className={styles.monthYear}\n                                value={activeMonth}\n                                onMonthClick={handleMonthClick}\n                                onYearClick={handleYearClick}\n                            />\n                        )}\n                    </Header>\n                )}\n\n                <div className={cn(styles.container, styles[view])}>\n                    {view === 'days' && (\n                        <DaysTable\n                            weeks={weeks}\n                            activeMonth={activeMonth}\n                            selectedFrom={selectedFrom}\n                            selectedTo={selectedTo}\n                            getDayProps={getDayProps}\n                            highlighted={highlighted}\n                            rangeComplete={rangeComplete}\n                            responsive={responsive}\n                            shape={shape}\n                        />\n                    )}\n\n                    {view === 'months' && (\n                        <MonthsTable\n                            selectedMonth={activeMonth}\n                            months={months}\n                            getMonthProps={getMonthProps}\n                            responsive={responsive}\n                        />\n                    )}\n\n                    {view === 'years' && (\n                        <YearsTable\n                            selectedYear={activeMonth}\n                            years={years}\n                            getYearProps={getYearProps}\n                            onScroll={handleScroll}\n                            responsive={responsive}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"wrapper_tvQrj\",\"withZIndex\":\"withZIndex_K0qU1\",\"calendar\":\"calendar_UA1ux\",\"dayNames\":\"dayNames_ACwpt\",\"withHeader\":\"withHeader_AYPX8\",\"month\":\"month_jeO5O\",\"daysTable\":\"daysTable_VVzAa\",\"dayName\":\"dayName_f8CKS\"};","import React, { forwardRef, useMemo, useRef } from 'react';\nimport { Virtuoso } from 'react-virtuoso';\nimport { ResizeObserver as ResizeObserverPolyfill } from '@juggle/resize-observer';\nimport cn from 'classnames';\nimport endOfDay from 'date-fns/endOfDay';\nimport startOfDay from 'date-fns/startOfDay';\nimport startOfMonth from 'date-fns/startOfMonth';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { ModalMobile } from '@alfalab/core-components-modal/mobile';\n\nimport { limitDate, monthName, useCalendar, WEEKDAYS } from '../..';\nimport { CalendarDesktop, CalendarDesktopProps } from '../../Component.desktop';\nimport { Month } from '../../typings';\nimport {\n    addonArrayToHashTable,\n    dateArrayToHashTable,\n    generateMonths,\n    generateWeeks,\n} from '../../utils';\nimport { DaysTable } from '../days-table';\n\nimport styles from './index.module.css';\n\n// ResizeObserverPolyfill необходим для корректной работы react-virtuoso.\nif (typeof window !== 'undefined' && !window.ResizeObserver) {\n    window.ResizeObserver = ResizeObserverPolyfill;\n}\n\nexport type CalendarMobileProps = CalendarDesktopProps & {\n    /**\n     * Управление видимостью модалки\n     */\n    open: boolean;\n\n    /**\n     * Заголовок календаря\n     */\n    title?: string;\n\n    /**\n     * Обработчик закрытия модалки\n     */\n    onClose?: () => void;\n\n    /**\n     * Количество лет для генерации в обе стороны от текущего года\n     */\n    yearsAmount?: number;\n\n    /**\n     * Нужно ли рендерить шапку\n     */\n    hasHeader?: boolean;\n\n    /**\n     * Разрешить выбор из недозаполненного диапазона дат.\n     */\n    allowSelectionFromEmptyRange?: boolean;\n};\n\nconst CalendarMonthOnlyView = ({\n    value,\n    defaultView,\n    month: monthTimestamp,\n    minDate: minDateTimestamp,\n    maxDate: maxDateTimestamp,\n    defaultMonth: defaultMonthTimestamp,\n    offDays,\n    events,\n    holidays,\n    onChange,\n    selectedFrom,\n    selectedTo,\n    rangeComplete,\n    onMonthChange,\n    yearsAmount = 3,\n    dayAddons,\n    shape = 'rounded',\n}: CalendarMobileProps) => {\n    const initialMonthIndex = useMemo(() => {\n        const currentMonthIndex = new Date().getMonth();\n\n        return yearsAmount * 12 + currentMonthIndex;\n    }, [yearsAmount]);\n\n    const month = useMemo(\n        () => (monthTimestamp ? new Date(monthTimestamp) : undefined),\n        [monthTimestamp],\n    );\n\n    const minDate = useMemo(\n        () => (minDateTimestamp ? startOfDay(minDateTimestamp) : undefined),\n        [minDateTimestamp],\n    );\n\n    const maxDate = useMemo(\n        () => (maxDateTimestamp ? endOfDay(maxDateTimestamp) : undefined),\n        [maxDateTimestamp],\n    );\n\n    const selected = useMemo(() => (value ? new Date(value) : undefined), [value]);\n\n    const defaultMonth = useMemo(\n        () =>\n            startOfMonth(\n                selected ||\n                    limitDate(\n                        defaultMonthTimestamp || Date.now(),\n                        minDateTimestamp,\n                        maxDateTimestamp,\n                    ),\n            ),\n        [defaultMonthTimestamp, maxDateTimestamp, minDateTimestamp, selected],\n    );\n\n    const { activeMonth, months, highlighted, getDayProps } = useCalendar({\n        month,\n        defaultMonth,\n        view: defaultView,\n        minDate,\n        maxDate,\n        selected,\n        offDays,\n        events,\n        onChange,\n        onMonthChange,\n        dayAddons,\n    });\n\n    const activeMonths = useMemo(() => {\n        const eventsMap = dateArrayToHashTable(events || []);\n        const offDaysMap = dateArrayToHashTable(offDays || []);\n        const holidaysMap = dateArrayToHashTable(holidays || []);\n        const dayAddonsMap = addonArrayToHashTable(dayAddons || []);\n\n        const prevMonths: Month[] = [];\n        const nextMonths: Month[] = [];\n\n        const date = new Date();\n        const currentYear = date.getFullYear();\n\n        for (let i = 0; i < yearsAmount; i++) {\n            const prevYear = date.setFullYear(currentYear - (i + 1));\n            const nextYear = date.setFullYear(currentYear + (i + 1));\n\n            const prevYearMonths = generateMonths(new Date(prevYear), {});\n            const nextYearMonths = generateMonths(new Date(nextYear), {});\n\n            prevMonths.unshift(...prevYearMonths);\n            nextMonths.push(...nextYearMonths);\n        }\n\n        const generatedMonths = [...prevMonths, ...months, ...nextMonths];\n\n        return generatedMonths.map((item) => ({\n            ...item,\n            weeks: generateWeeks(item.date, {\n                minDate,\n                maxDate,\n                selected,\n                eventsMap,\n                offDaysMap,\n                holidaysMap,\n                dayAddonsMap,\n            }),\n            title: `${monthName(item.date)} ${item.date.getFullYear()}`,\n        }));\n    }, [events, offDays, holidays, dayAddons, months, yearsAmount, minDate, maxDate, selected]);\n\n    const renderMonth = (index: number) => (\n        <div className={styles.daysTable} id={`month-${index}`}>\n            <span className={styles.month}>{activeMonths[index].title}</span>\n            <DaysTable\n                weeks={activeMonths[index].weeks}\n                activeMonth={activeMonth}\n                selectedFrom={selectedFrom}\n                selectedTo={selectedTo}\n                getDayProps={getDayProps}\n                highlighted={highlighted}\n                rangeComplete={rangeComplete}\n                hasHeader={false}\n                responsive={true}\n                shape={shape}\n            />\n        </div>\n    );\n\n    return (\n        <Virtuoso\n            totalCount={activeMonths.length}\n            itemContent={renderMonth}\n            initialTopMostItemIndex={initialMonthIndex}\n            increaseViewportBy={800}\n            itemSize={(el) => el.getBoundingClientRect().height + 32}\n        />\n    );\n};\n\nexport const CalendarMobile = forwardRef<HTMLDivElement, CalendarMobileProps>(\n    (\n        {\n            hasHeader = true,\n            allowSelectionFromEmptyRange = false,\n            className,\n            defaultView = 'days',\n            selectorView = 'full',\n            value,\n            selectedFrom,\n            selectedTo,\n            onChange,\n            dataTestId,\n            open,\n            onClose,\n            title = 'Календарь',\n            yearsAmount = 3,\n            ...restProps\n        },\n        ref,\n    ) => {\n        const modalRef = useRef<HTMLDivElement>(null);\n\n        const monthOnlyView = selectorView === 'month-only';\n\n        const handleClose = () => {\n            if (onClose) onClose();\n        };\n\n        const handleClear = () => {\n            if (onChange) onChange();\n        };\n\n        const renderDayNames = () => (\n            <table className={styles.dayNames}>\n                <thead>\n                    <tr>\n                        {WEEKDAYS.map((dayName) => (\n                            <th className={styles.dayName} key={dayName}>\n                                {dayName}\n                            </th>\n                        ))}\n                    </tr>\n                </thead>\n            </table>\n        );\n\n        const renderContent = () => {\n            const commonProps = {\n                value,\n                onChange,\n                defaultView,\n                selectorView,\n                selectedFrom,\n                selectedTo,\n            };\n\n            if (monthOnlyView) {\n                return (\n                    <CalendarMonthOnlyView\n                        open={open}\n                        yearsAmount={yearsAmount}\n                        {...commonProps}\n                        {...restProps}\n                    />\n                );\n            }\n\n            return (\n                <CalendarDesktop\n                    responsive={true}\n                    className={styles.calendar}\n                    {...commonProps}\n                    {...restProps}\n                />\n            );\n        };\n\n        const renderFooter = () => {\n            if (selectedFrom || selectedTo) {\n                let selectButtonDisabled = !selectedFrom || !selectedTo;\n\n                if (allowSelectionFromEmptyRange) {\n                    selectButtonDisabled = !selectedFrom;\n                }\n\n                return (\n                    <React.Fragment>\n                        <Button\n                            view='primary'\n                            size='s'\n                            block={true}\n                            onClick={handleClose}\n                            disabled={selectButtonDisabled}\n                        >\n                            Выбрать\n                        </Button>\n                        <Button view='secondary' size='s' block={true} onClick={handleClear}>\n                            Сбросить\n                        </Button>\n                    </React.Fragment>\n                );\n            }\n\n            if (value) {\n                return (\n                    <Button view='primary' size='s' block={true} onClick={handleClose}>\n                        Выбрать\n                    </Button>\n                );\n            }\n\n            return (\n                <Button view='secondary' size='s' block={true} onClick={handleClose}>\n                    Отмена\n                </Button>\n            );\n        };\n\n        return (\n            <div className={cn(className, styles.component)} ref={ref} data-test-id={dataTestId}>\n                <ModalMobile\n                    open={open}\n                    onClose={handleClose}\n                    ref={modalRef}\n                    className={styles.modal}\n                    wrapperClassName={styles.wrapper}\n                >\n                    {hasHeader && (\n                        <ModalMobile.Header\n                            hasCloser={true}\n                            title={title}\n                            sticky={true}\n                            className={cn({ [styles.withZIndex]: selectorView === 'full' })}\n                        />\n                    )}\n                    {monthOnlyView && renderDayNames()}\n                    <ModalMobile.Content flex={true}>{renderContent()}</ModalMobile.Content>\n                    <ModalMobile.Footer\n                        sticky={true}\n                        className={cn({ [styles.withZIndex]: selectorView === 'full' })}\n                    >\n                        {renderFooter()}\n                    </ModalMobile.Footer>\n                </ModalMobile>\n            </div>\n        );\n    },\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"daysTable\":\"daysTable_ienHc\",\"responsive\":\"responsive_hox6R\",\"dayName\":\"dayName_YMtAm\",\"day\":\"day_k4E_o\",\"rounded\":\"rounded_ACnj8\",\"rectangular\":\"rectangular__Jdtd\",\"highlighted\":\"highlighted_LI5WC\",\"range\":\"range_EniRW\",\"disabled\":\"disabled_LvQBx\",\"holiday\":\"holiday_Zlu1b\",\"today\":\"today_A07Pv\",\"rangeComplete\":\"rangeComplete_HNZCQ\",\"selected\":\"selected_ybNjY\",\"dayWrapper\":\"dayWrapper_xipXu\",\"cursorPointer\":\"cursorPointer_gBFq6\",\"rangeEnd\":\"rangeEnd_E5hCP\",\"rangeStart\":\"rangeStart_Evclc\",\"transitLeft\":\"transitLeft_YRcw5\",\"transitRight\":\"transitRight_iklL3\",\"sharpTransitLeft\":\"sharpTransitLeft_MGzps\",\"sharpTransitRight\":\"sharpTransitRight_uk_MG\",\"daysEnter\":\"daysEnter_mXECn\",\"left\":\"left_PkLol\",\"daysEnterActive\":\"daysEnterActive_ErNTG\",\"daysExit\":\"daysExit_JHJJr\",\"daysExitActive\":\"daysExitActive_WCtDb\",\"right\":\"right_fezZS\",\"dayAddons\":\"dayAddons_ZK5A0\",\"dayContent\":\"dayContent_J_3Xc\",\"addons\":\"addons_rEEvG\",\"dot\":\"dot_J6CgM\",\"bottomAddon\":\"bottomAddon_iLX3Y\"};","/* eslint-disable complexity */\nimport React, { FC, RefCallback, useCallback, useRef } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport cn from 'classnames';\nimport isEqual from 'date-fns/isEqual';\nimport isLastDayOfMonth from 'date-fns/isLastDayOfMonth';\nimport isSameDay from 'date-fns/isSameDay';\nimport isToday from 'date-fns/isToday';\nimport isWithinInterval from 'date-fns/isWithinInterval';\nimport startOfMonth from 'date-fns/startOfMonth';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { usePrevious } from '@alfalab/hooks';\n\nimport { Day, DayAddons } from '../../typings';\nimport { getSelectionRange, russianWeekDay, WEEKDAYS } from '../../utils';\n\nimport styles from './index.module.css';\n\nexport type DaysTableProps = {\n    /**\n     * Массив-календарь недель\n     */\n    weeks?: Day[][];\n\n    /**\n     * Активный месяц\n     */\n    activeMonth?: Date;\n\n    /**\n     * Начало выделенного периода\n     */\n    selectedFrom?: Date | number;\n\n    /**\n     * Конец выделенного периода\n     */\n    selectedTo?: Date | number;\n\n    /**\n     * Индикатор, что выбран полный период\n     */\n    rangeComplete?: boolean;\n\n    /**\n     * Подсвеченная дата (ховер)\n     */\n    highlighted?: Date | number;\n\n    /**\n     * Доп. пропсы для переданного дня\n     */\n    getDayProps: (day: Day) => Record<string, unknown> & {\n        ref: RefCallback<HTMLTableDataCellElement>;\n        onClick: (e: React.MouseEvent<HTMLTableDataCellElement>) => void;\n    };\n\n    /**\n     * Нужно ли рендерить шапку\n     */\n    hasHeader?: boolean;\n\n    /**\n     * Должен ли календарь подстраиваться под ширину родителя.\n     */\n    responsive?: boolean;\n\n    /**\n     * Дополнительный контент под числом\n     */\n    dayAddons?: DayAddons[];\n\n    /**\n     * Форма ячейки дня\n     */\n    shape?: 'rounded' | 'rectangular';\n};\n\nexport const DaysTable: FC<DaysTableProps> = ({\n    weeks = [],\n    activeMonth = new Date(),\n    highlighted,\n    selectedFrom,\n    selectedTo,\n    rangeComplete = selectedFrom && selectedTo,\n    getDayProps,\n    hasHeader = true,\n    responsive,\n    shape = 'rounded',\n}) => {\n    const activeMonthRef = useRef(activeMonth);\n    const directionRef = useRef<'right' | 'left' | undefined>();\n\n    activeMonthRef.current = activeMonth;\n\n    const prevActiveMonth = usePrevious(activeMonth);\n\n    if (prevActiveMonth && prevActiveMonth !== activeMonth) {\n        directionRef.current = activeMonth < prevActiveMonth ? 'right' : 'left';\n    }\n\n    const selection = getSelectionRange(selectedFrom, selectedTo, highlighted);\n\n    const renderHeader = useCallback(\n        () =>\n            WEEKDAYS.map((dayName) => (\n                <th className={styles.dayName} key={dayName}>\n                    {dayName}\n                </th>\n            )),\n        [],\n    );\n\n    const renderDay = (day: Day, dayIdx: number) => {\n        if (!day) return <td key={dayIdx} />;\n        const daySelected =\n            day.selected ||\n            (selectedFrom && isSameDay(day.date, selectedFrom)) ||\n            (selectedTo && isSameDay(day.date, selectedTo));\n\n        const dayHighlighted = highlighted && isEqual(day.date, highlighted);\n        const inRange = selection && isWithinInterval(day.date, selection);\n\n        const firstDayOfMonth = day.date.getDate() === 1;\n        const lastDayOfMonth = isLastDayOfMonth(day.date);\n\n        const firstDayOfWeek = russianWeekDay(day.date) === 0;\n        const lastDayOfWeek = russianWeekDay(day.date) === 6;\n\n        const transitLeft = firstDayOfMonth && inRange && selection && day.date > selection.start;\n        const transitRight = lastDayOfMonth && inRange && selection && day.date < selection.end;\n\n        const rangeStart = selection && isSameDay(day.date, selection.start);\n        const rangeEnd = selection && isSameDay(day.date, selection.end);\n\n        const sharpTransitLeft =\n            firstDayOfWeek &&\n            firstDayOfMonth &&\n            inRange &&\n            selection &&\n            (isSameDay(day.date, selection.start) || isSameDay(day.date, selection.end));\n\n        const sharpTransitRight =\n            lastDayOfWeek &&\n            lastDayOfMonth &&\n            inRange &&\n            selection &&\n            (isSameDay(day.date, selection.start) || isSameDay(day.date, selection.end));\n\n        const dayProps = getDayProps(day);\n\n        const { onClick } = dayProps;\n\n        const handleDayClick = (e: React.MouseEvent<HTMLTableDataCellElement>) => {\n            if (!day.disabled) onClick(e);\n        };\n\n        return (\n            // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n            <td\n                {...dayProps}\n                key={day.date.getTime()}\n                className={cn(styles.dayWrapper, {\n                    [styles.range]: inRange,\n                    [styles.rangeComplete]: inRange && rangeComplete,\n                    [styles.transitLeft]: transitLeft,\n                    [styles.transitRight]: transitRight,\n                    [styles.sharpTransitLeft]: sharpTransitLeft,\n                    [styles.sharpTransitRight]: sharpTransitRight,\n                    [styles.rangeStart]: rangeStart,\n                    [styles.rangeEnd]: rangeEnd,\n                    [styles.cursorPointer]: !day.disabled,\n                })}\n                align='center'\n                ref={(node) => {\n                    /**\n                     * После анимации реф-коллбэк вызывается еще раз, и в него передается null и старый activeMonth.\n                     * Поэтому приходится хранить актуальный месяц в рефе и сравнивать с ним.\n                     */\n                    if (startOfMonth(day.date).getTime() === activeMonthRef.current.getTime()) {\n                        dayProps.ref(node as HTMLTableDataCellElement);\n                    }\n                }}\n                onClick={handleDayClick}\n            >\n                <Button\n                    type='button'\n                    view='ghost'\n                    size='xs'\n                    disabled={day.disabled}\n                    className={cn(styles.day, styles[shape], {\n                        [styles.dayAddons]: day.dayAddon,\n                        [styles.selected]: daySelected,\n                        [styles.today]: isToday(day.date),\n                        [styles.disabled]: day.disabled,\n                        [styles.holiday]: !day.disabled && day.holiday,\n                        [styles.highlighted]: dayHighlighted,\n                    })}\n                >\n                    <span className={cn(styles.dayContent, { [styles.today]: isToday(day.date) })}>\n                        {day.date.getDate()}\n                    </span>\n                    <span\n                        className={cn(styles.addons, {\n                            [styles.dot]: day.event,\n                            [styles.bottomAddon]: day.dayAddon,\n                            [styles.selected]: daySelected,\n                        })}\n                    >\n                        {day.dayAddon}\n                    </span>\n                </Button>\n            </td>\n        );\n    };\n\n    const renderWeek = (week: Day[], weekIdx: number) => (\n        <tr key={weekIdx}>{week.map(renderDay)}</tr>\n    );\n\n    return (\n        <table\n            className={cn(styles.daysTable, directionRef.current && styles[directionRef.current], {\n                [styles.responsive]: responsive,\n            })}\n        >\n            {hasHeader && (\n                <thead>\n                    <tr>{renderHeader()}</tr>\n                </thead>\n            )}\n            <TransitionGroup component={null}>\n                <CSSTransition\n                    key={activeMonth.getTime()}\n                    timeout={300}\n                    classNames={{\n                        enter: styles.daysEnter,\n                        enterActive: styles.daysEnterActive,\n                        exit: styles.daysExit,\n                        exitActive: styles.daysExitActive,\n                    }}\n                >\n                    <tbody>{weeks.map(renderWeek)}</tbody>\n                </CSSTransition>\n            </TransitionGroup>\n        </table>\n    );\n};\n","import addDays from 'date-fns/addDays';\nimport addMonths from 'date-fns/addMonths';\nimport addQuarters from 'date-fns/addQuarters';\nimport addWeeks from 'date-fns/addWeeks';\nimport addYears from 'date-fns/addYears';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport endOfQuarter from 'date-fns/endOfQuarter';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport endOfYear from 'date-fns/endOfYear';\nimport getQuarter from 'date-fns/getQuarter';\nimport getYear from 'date-fns/getYear';\nimport isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport startOfQuarter from 'date-fns/startOfQuarter';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport startOfYear from 'date-fns/startOfYear';\n\nimport { formatDate, monthName } from '../../utils';\n\nimport { PeriodType } from '.';\n\nexport const formatPeriod = (\n    valueFrom: Date,\n    valueTo: Date,\n    periodType: PeriodType,\n    showCurrentYear?: boolean,\n) => {\n    if (periodType === 'day') {\n        if (isToday(valueFrom)) return 'Сегодня';\n        if (isYesterday(valueFrom)) return 'Вчера';\n\n        return formatDate(valueFrom);\n    }\n\n    if (periodType === 'month') {\n        const monthAndYear = `${monthName(valueFrom)} ${getYear(valueFrom)}`;\n\n        if (showCurrentYear) {\n            return monthAndYear;\n        }\n        const year = getYear(valueFrom);\n\n        return year === getYear(new Date()) ? monthName(valueFrom) : monthAndYear;\n    }\n\n    if (periodType === 'quarter') {\n        return `${getQuarter(valueFrom)} квартал ${getYear(valueFrom)}`;\n    }\n\n    if (periodType === 'year') {\n        return `${getYear(valueFrom)} год`;\n    }\n\n    return `${formatDate(valueFrom)} - ${formatDate(valueTo)}`;\n};\n\nexport const getYearSelectorValue = (valueFrom: Date | undefined, showCurrentYear: boolean) => {\n    if (!valueFrom) {\n        return '';\n    }\n\n    const year = getYear(valueFrom);\n\n    if (year === getYear(new Date())) {\n        return showCurrentYear ? year : '';\n    }\n\n    return year;\n};\n\nexport const shiftValues = (\n    valueFrom: Date,\n    valueTo: Date,\n    periodType: PeriodType,\n    direction: 'prev' | 'next',\n) => {\n    let newValueFrom = valueFrom;\n    let newValueTo = valueTo;\n\n    const amount = direction === 'next' ? 1 : -1;\n\n    switch (periodType) {\n        case 'day':\n            newValueFrom = addDays(valueFrom, amount);\n            newValueTo = addDays(valueFrom, amount);\n            break;\n        case 'week':\n            newValueFrom = startOfWeek(addWeeks(valueFrom, amount), { weekStartsOn: 1 });\n            newValueTo = endOfWeek(newValueFrom, { weekStartsOn: 1 });\n            break;\n        case 'month':\n            newValueFrom = startOfMonth(addMonths(valueFrom, amount));\n            newValueTo = endOfMonth(newValueFrom);\n            break;\n        case 'quarter':\n            newValueFrom = startOfQuarter(addQuarters(valueFrom, amount));\n            newValueTo = endOfQuarter(newValueFrom);\n            break;\n        case 'year':\n            newValueFrom = startOfYear(addYears(valueFrom, amount));\n            newValueTo = endOfYear(newValueFrom);\n            break;\n        default:\n            break;\n    }\n\n    return {\n        valueFrom: newValueFrom,\n        valueTo: newValueTo,\n    };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_yOD0m\",\"period\":\"period_EGEyc\",\"clicablePeriod\":\"clicablePeriod_lfFFP\",\"empty\":\"empty_OPNF6\",\"arrow\":\"arrow_gz7uq\",\"full\":\"full_nF5ca\",\"yearSelectorButton\":\"yearSelectorButton_pYEbe\"};","import React, { FC, MouseEvent, useMemo } from 'react';\nimport cn from 'classnames';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport startOfWeek from 'date-fns/startOfWeek';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { IconButton } from '@alfalab/core-components-icon-button';\nimport { ChevronBackMIcon } from '@alfalab/icons-glyph/ChevronBackMIcon';\n\nimport { monthName } from '../../utils';\n\nimport { formatPeriod, getYearSelectorValue, shiftValues } from './utils';\n\nimport styles from './index.module.css';\n\nexport type PeriodType = 'range' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport type PeriodSliderProps = {\n    /**\n     * Активная дата или период\n     */\n    value?: Date | [Date, Date];\n\n    /**\n     * Тип периода\n     */\n    periodType?: PeriodType;\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Отключает кнопку назад\n     */\n    prevArrowDisabled?: boolean;\n\n    /**\n     * Отключает кнопку вперед\n     */\n    nextArrowDisabled?: boolean;\n\n    /**\n     * Скрывает заблокированные кнопки\n     */\n    hideDisabledArrows?: boolean;\n\n    /**\n     * Возможность выбора месяца и года, если periodType 'month'\n     */\n    isMonthAndYearSelectable?: boolean;\n\n    /**\n     * Отображать ли текущий год, если isMonthAndYearSelectable true\n     */\n    showCurrentYearSelector?: boolean;\n\n    /**\n     * Функция для форматирование выбранного периода\n     */\n    periodFormatter?: (valueFrom: Date, valueTo: Date, periodType: PeriodType) => string;\n\n    /**\n     * Обработчик нажатия кнопки переключения на назад\n     */\n    onPrevArrowClick?: (\n        event: MouseEvent<HTMLButtonElement>,\n        payload: {\n            value: Date;\n            valueFrom: Date;\n            valueTo: Date;\n            periodType: PeriodType;\n        },\n    ) => void;\n\n    /**\n     * Обработчик нажатия кнопки переключения на вперед\n     */\n    onNextArrowClick?: (\n        event: MouseEvent<HTMLButtonElement>,\n        payload: {\n            value: Date;\n            valueFrom: Date;\n            valueTo: Date;\n            periodType: PeriodType;\n        },\n    ) => void;\n\n    /**\n     * Обработчик нажатия на селектор месяца\n     */\n    onMonthClick?: (event: MouseEvent<HTMLButtonElement>) => void;\n\n    /**\n     * Обработчик нажатия на селектор года\n     */\n    onYearClick?: (event: MouseEvent<HTMLButtonElement>) => void;\n\n    /**\n     * Обработчик нажатия на период\n     */\n    onPeriodClick?: (event: MouseEvent<HTMLAnchorElement>) => void;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    dataTestId?: string;\n};\n\nexport const PeriodSlider: FC<PeriodSliderProps> = ({\n    value,\n    periodType = 'month',\n    className,\n    periodFormatter = formatPeriod,\n    prevArrowDisabled = false,\n    nextArrowDisabled = false,\n    hideDisabledArrows = false,\n    isMonthAndYearSelectable = false,\n    showCurrentYearSelector = false,\n    onPrevArrowClick = () => null,\n    onNextArrowClick = () => null,\n    onMonthClick,\n    onYearClick,\n    onPeriodClick,\n    dataTestId,\n}) => {\n    const [valueFrom, valueTo] = useMemo(() => {\n        let from: Date;\n        let to: Date;\n\n        if (!value) return [undefined, undefined];\n\n        if (Array.isArray(value)) {\n            [from, to] = value;\n        } else {\n            [from, to] = [value, value];\n\n            if (periodType === 'week') {\n                from = startOfWeek(from, { weekStartsOn: 1 });\n                to = endOfWeek(from, { weekStartsOn: 1 });\n            }\n        }\n\n        return [from, to];\n    }, [periodType, value]);\n\n    const yearSelectorValue = useMemo(\n        () => getYearSelectorValue(valueFrom, showCurrentYearSelector),\n        [showCurrentYearSelector, valueFrom],\n    );\n\n    const showArrow = (direction: 'prev' | 'next') => {\n        if (hideDisabledArrows) {\n            const disabled = direction === 'prev' ? prevArrowDisabled : nextArrowDisabled;\n\n            return !disabled && valueFrom;\n        }\n\n        return true;\n    };\n\n    const handleNextArrowClick = (event: MouseEvent<HTMLButtonElement>) => {\n        if (!valueFrom || !valueTo) return;\n\n        const newValues = shiftValues(valueFrom, valueTo, periodType, 'next');\n\n        onNextArrowClick(event, {\n            value: newValues.valueFrom,\n            valueFrom: newValues.valueFrom,\n            valueTo: newValues.valueTo,\n            periodType,\n        });\n    };\n\n    const handlePrevArrowClick = (event: MouseEvent<HTMLButtonElement>) => {\n        if (!valueFrom || !valueTo) return;\n\n        const newValues = shiftValues(valueFrom, valueTo, periodType, 'prev');\n\n        onPrevArrowClick(event, {\n            value: newValues.valueFrom,\n            valueFrom: newValues.valueFrom,\n            valueTo: newValues.valueTo,\n            periodType,\n        });\n    };\n\n    const renderHeader = () => {\n        if (!(valueFrom && valueTo)) {\n            return <span className={cn(styles.period, styles.empty)}>Укажите период</span>;\n        }\n\n        if (periodType === 'month' && isMonthAndYearSelectable) {\n            return (\n                <div>\n                    <Button className={styles.period} view='ghost' size='l' onClick={onMonthClick}>\n                        {monthName(valueFrom)}\n                    </Button>\n                    {yearSelectorValue && (\n                        <Button\n                            className={cn(styles.yearSelectorButton, styles.period)}\n                            view='ghost'\n                            size='l'\n                            onClick={onYearClick}\n                        >\n                            {yearSelectorValue}\n                        </Button>\n                    )}\n                </div>\n            );\n        }\n\n        if (onPeriodClick) {\n            return (\n                // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n                <a\n                    role='button'\n                    tabIndex={0}\n                    onClick={onPeriodClick}\n                    className={cn(styles.period, styles.clicablePeriod)}\n                >\n                    {periodFormatter(valueFrom, valueTo, periodType, showCurrentYearSelector)}\n                </a>\n            );\n        }\n\n        return (\n            <span className={styles.period}>\n                {periodFormatter(valueFrom, valueTo, periodType, showCurrentYearSelector)}\n            </span>\n        );\n    };\n\n    return (\n        <div\n            className={cn(styles.component, className)}\n            aria-live='polite'\n            data-test-id={dataTestId}\n        >\n            {showArrow('prev') && (\n                <IconButton\n                    size='xs'\n                    className={styles.arrow}\n                    icon={ChevronBackMIcon}\n                    onClick={handlePrevArrowClick}\n                    disabled={prevArrowDisabled || !valueFrom}\n                    aria-label='Предыдущий период'\n                />\n            )}\n\n            {renderHeader()}\n\n            {showArrow('next') && (\n                <IconButton\n                    size='xs'\n                    className={styles.arrow}\n                    icon={ChevronBackMIcon}\n                    onClick={handleNextArrowClick}\n                    disabled={nextArrowDisabled || !valueFrom}\n                    aria-label='Следующий период'\n                />\n            )}\n        </div>\n    );\n};\n","import { useCallback, useState } from 'react';\nimport differenceInDays from 'date-fns/differenceInDays';\n\nimport { useDidUpdateEffect } from '@alfalab/hooks';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ntype usePeriodProps = {\n    /**\n     * Обработчик изменения выделенного периода\n     */\n    onPeriodChange?: (selectedFrom?: number, selectedTo?: number) => void;\n\n    /**\n     * Начальное значение начала выделенного периода\n     */\n    initialSelectedFrom?: number;\n\n    /**\n     * Начальное значение конца выделенного периода\n     */\n    initialSelectedTo?: number;\n};\n\nexport function usePeriod({\n    onPeriodChange,\n    initialSelectedFrom,\n    initialSelectedTo,\n}: usePeriodProps = {}) {\n    const [selectedFrom, setSelectedFrom] = useState<number | undefined>(initialSelectedFrom);\n    const [selectedTo, setSelectedTo] = useState<number | undefined>(initialSelectedTo);\n\n    const resetPeriod = useCallback(() => {\n        setSelectedFrom(undefined);\n        setSelectedTo(undefined);\n    }, []);\n\n    const setStart = useCallback((date?: number) => {\n        setSelectedFrom(date);\n    }, []);\n\n    const setEnd = useCallback((date?: number) => {\n        setSelectedTo(date);\n    }, []);\n\n    const updatePeriod = useCallback(\n        (date?: number) => {\n            // сбрасываем выделение\n            if (date === undefined || (date === selectedTo && date === selectedFrom)) {\n                resetPeriod();\n\n                return;\n            }\n\n            // сбрасываем конец, если выбранная дата совпадает с ним\n            if (date === selectedTo) {\n                setSelectedTo(undefined);\n\n                return;\n            }\n\n            // сбрасываем начало, если выбранная дата совпадает с ним\n            if (date === selectedFrom) {\n                if (selectedTo) {\n                    setSelectedFrom(selectedTo);\n                    setSelectedTo(undefined);\n                } else {\n                    setSelectedTo(date);\n                }\n\n                return;\n            }\n\n            if (!selectedFrom) {\n                if (selectedTo) {\n                    setSelectedFrom(Math.min(date, selectedTo));\n                    setSelectedTo(Math.max(date, selectedTo));\n                } else {\n                    // начинаем выделение\n                    setSelectedFrom(date);\n                }\n\n                return;\n            }\n\n            // заканчиваем выделение\n            if (!selectedTo) {\n                setSelectedFrom(Math.min(date, selectedFrom));\n                setSelectedTo(Math.max(date, selectedFrom));\n\n                return;\n            }\n\n            // сдвигаем тот конец выделения, который ближе к выбранной дате\n            if (\n                Math.abs(differenceInDays(date, selectedTo)) >\n                Math.abs(differenceInDays(date, selectedFrom))\n            ) {\n                setSelectedFrom(date);\n            } else {\n                setSelectedTo(date);\n            }\n        },\n        [resetPeriod, selectedFrom, selectedTo],\n    );\n\n    useDidUpdateEffect(() => {\n        if (onPeriodChange) {\n            onPeriodChange(selectedFrom, selectedTo);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedFrom, selectedTo]);\n\n    return {\n        selectedFrom,\n        selectedTo,\n        setStart,\n        setEnd,\n        resetPeriod,\n        updatePeriod,\n    };\n}\n\nexport function usePeriodWithReset({\n    onPeriodChange,\n    initialSelectedFrom,\n    initialSelectedTo,\n}: usePeriodProps = {}) {\n    const [selectedFrom, setSelectedFrom] = useState<number | undefined>(initialSelectedFrom);\n    const [selectedTo, setSelectedTo] = useState<number | undefined>(initialSelectedTo);\n\n    const resetPeriod = useCallback(() => {\n        setSelectedFrom(undefined);\n        setSelectedTo(undefined);\n    }, []);\n\n    const setStart = useCallback((date?: number) => {\n        setSelectedFrom(date);\n    }, []);\n\n    const setEnd = useCallback((date?: number) => {\n        setSelectedTo(date);\n    }, []);\n\n    const updatePeriod = useCallback(\n        (date?: number) => {\n            // сбрасываем выделение\n            if (date === undefined) {\n                resetPeriod();\n\n                return;\n            }\n\n            if (!selectedFrom && selectedTo) {\n                setSelectedFrom(Math.min(date, selectedTo));\n                setSelectedTo(Math.max(date, selectedTo));\n\n                return;\n            }\n\n            if (!selectedFrom) {\n                // начинаем выделение\n                setSelectedFrom(date);\n\n                return;\n            }\n\n            // заканчиваем выделение\n            if (!selectedTo) {\n                setSelectedFrom(Math.min(date, selectedFrom));\n                setSelectedTo(Math.max(date, selectedFrom));\n\n                return;\n            }\n\n            // Если обе даты уже выбраны, начинаем выделение заново\n            setSelectedTo(undefined);\n            setSelectedFrom(date);\n        },\n        [resetPeriod, selectedFrom, selectedTo],\n    );\n\n    useDidUpdateEffect(() => {\n        if (onPeriodChange) {\n            onPeriodChange(selectedFrom, selectedTo);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedFrom, selectedTo]);\n\n    return {\n        selectedFrom,\n        selectedTo,\n        setStart,\n        setEnd,\n        resetPeriod,\n        updatePeriod,\n    };\n}\n","import React, { forwardRef } from 'react';\n\nimport { useMedia } from '@alfalab/hooks';\n\nimport { CalendarMobile, CalendarMobileProps } from './components/calendar-mobile';\nimport { CalendarDesktop, CalendarDesktopProps } from './Component.desktop';\n\nexport type ResponsiveCalendarProps = CalendarDesktopProps &\n    CalendarMobileProps & {\n        /**\n         * Контрольная точка, с нее начинается desktop версия\n         * @default 1024\n         */\n        breakpoint?: number;\n    };\n\nexport type CalendarMedia = 'desktop' | 'mobile';\n\nexport const CalendarResponsive = forwardRef<HTMLDivElement, ResponsiveCalendarProps>(\n    ({ breakpoint = 1024, ...restProps }, ref) => {\n        const [view] = useMedia<CalendarMedia>(\n            [\n                ['mobile', `(max-width: ${breakpoint - 1}px)`],\n                ['desktop', `(min-width: ${breakpoint}px)`],\n            ],\n            'desktop',\n        );\n\n        return view === 'desktop' ? (\n            <CalendarDesktop {...restProps} ref={ref} />\n        ) : (\n            <CalendarMobile {...restProps} ref={ref} />\n        );\n    },\n);\n","import { KeyboardEvent, MouseEvent, Ref, useCallback, useMemo, useRef, useState } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport addMonths from 'date-fns/addMonths';\nimport addYears from 'date-fns/addYears';\nimport isSameDay from 'date-fns/isSameDay';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport isSameYear from 'date-fns/isSameYear';\nimport setYear from 'date-fns/setYear';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport subYears from 'date-fns/subYears';\n\nimport { DateShift, Day, DayAddons, Month, View } from './typings';\nimport {\n    addonArrayToHashTable,\n    dateArrayToHashTable,\n    generateMonths,\n    generateWeeks,\n    generateYears,\n    limitDate,\n    modifyDateByShift,\n    MONTHS_IN_YEAR,\n    simulateTab,\n} from './utils';\n\nexport type UseCalendarProps = {\n    /**\n     * Активный вид (выбор дней, месяцев, лет)\n     */\n    view?: View;\n\n    /**\n     * Выбранный месяц (controlled)\n     */\n    month?: Date;\n\n    /**\n     * Начальный месяц\n     */\n    defaultMonth: Date;\n\n    /**\n     * Минимальная дата, доступная для выбора\n     */\n    minDate?: Date;\n\n    /**\n     * Максимальная дата, доступная для выбора\n     */\n    maxDate?: Date;\n\n    /**\n     * Выбранная дата\n     */\n    selected?: Date;\n\n    /**\n     * Список событий\n     */\n    events?: Array<Date | number>;\n\n    /**\n     * Список отключенных для выбора дней\n     */\n    offDays?: Array<Date | number>;\n\n    /**\n     * Список выходных дней\n     */\n    holidays?: Array<Date | number>;\n\n    /**\n     * Обработчик изменения месяца (или года)\n     */\n    onMonthChange?: (month: number) => void;\n\n    /**\n     * Обработчик выбора даты\n     */\n    onChange?: (date: number) => void;\n\n    /**\n     * Дополнительный контент под числом\n     */\n    dayAddons?: DayAddons[];\n};\n\nexport function useCalendar({\n    defaultMonth,\n    month,\n    minDate,\n    view = 'days',\n    maxDate,\n    selected,\n    events,\n    offDays,\n    holidays,\n    dayAddons,\n    onMonthChange,\n    onChange,\n}: UseCalendarProps) {\n    const [monthState, setMonthState] = useState(defaultMonth);\n    const [highlighted, setHighlighted] = useState<Date | number>();\n\n    const uncontrolled = month === undefined;\n\n    const activeMonth = uncontrolled ? monthState : (month as Date);\n\n    const dateRefs = useRef<HTMLElement[]>([]);\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const minMonth = useMemo(() => minDate && startOfMonth(minDate), [minDate]);\n    const maxMonth = useMemo(() => maxDate && startOfMonth(maxDate), [maxDate]);\n\n    const canSetPrevMonth = minMonth ? activeMonth > minMonth : true;\n    const canSetNextMonth = maxMonth ? activeMonth < maxMonth : true;\n\n    const eventsMap = useMemo(() => dateArrayToHashTable(events || []), [events]);\n\n    const offDaysMap = useMemo(() => dateArrayToHashTable(offDays || []), [offDays]);\n\n    const holidaysMap = useMemo(() => dateArrayToHashTable(holidays || []), [holidays]);\n\n    const dayAddonsMap = useMemo(() => addonArrayToHashTable(dayAddons || []), [dayAddons]);\n\n    const weeks = useMemo(\n        () =>\n            generateWeeks(activeMonth, {\n                minDate,\n                maxDate,\n                selected,\n                eventsMap,\n                offDaysMap,\n                holidaysMap,\n                dayAddonsMap,\n            }),\n        [maxDate, minDate, selected, dayAddonsMap, activeMonth, eventsMap, offDaysMap, holidaysMap],\n    );\n\n    const months = useMemo(\n        () => generateMonths(activeMonth, { minMonth, maxMonth }),\n        [minMonth, maxMonth, activeMonth],\n    );\n\n    const years = useMemo(\n        () =>\n            generateYears(minDate || subYears(new Date(), 100), maxDate || addYears(new Date(), 1)),\n        [minDate, maxDate],\n    );\n\n    const setMonth = useCallback(\n        (newMonth: Date) => {\n            if (uncontrolled) {\n                setMonthState(newMonth);\n            }\n\n            if (onMonthChange) {\n                onMonthChange(newMonth.getTime());\n            }\n        },\n        [onMonthChange, uncontrolled],\n    );\n\n    const setMonthByStep = useCallback(\n        (step: number) => {\n            setMonth(limitDate(addMonths(activeMonth, step), minMonth, maxMonth));\n        },\n        [setMonth, activeMonth, minMonth, maxMonth],\n    );\n\n    const setMonthByDate = useCallback(\n        (newMonth: Date) => {\n            setMonth(limitDate(newMonth, minMonth, maxMonth));\n        },\n        [maxMonth, minMonth, setMonth],\n    );\n\n    const setNextMonth = useCallback(() => {\n        setMonthByStep(1);\n    }, [setMonthByStep]);\n\n    const setPrevMonth = useCallback(() => {\n        setMonthByStep(-1);\n    }, [setMonthByStep]);\n\n    const getFocusedDate = useCallback(\n        () => dateRefs.current.find((node) => document.activeElement === node),\n        [],\n    );\n\n    const getFocusableDate = useCallback(\n        () => dateRefs.current.find((node) => node && node.tabIndex === 0),\n        [],\n    );\n\n    const focusDate = useCallback((node?: HTMLElement) => {\n        if (node) {\n            simulateTab(node);\n            node.focus();\n        }\n    }, []);\n\n    const focusFirstAvailableDate = useCallback(\n        () => focusDate(getFocusableDate()),\n        [focusDate, getFocusableDate],\n    );\n\n    const focusDay = useCallback(\n        (shift: DateShift) => {\n            const focusedNode = getFocusedDate();\n\n            if (focusedNode && focusedNode.dataset.date) {\n                const focusedDate = new Date(+focusedNode.dataset.date);\n                const newDate = modifyDateByShift(shift, focusedDate, minDate, maxDate, offDaysMap);\n\n                let monthChanged = false;\n\n                if (newDate < focusedDate && newDate.getMonth() !== focusedDate.getMonth()) {\n                    setPrevMonth();\n                    monthChanged = true;\n                }\n\n                if (newDate > focusedDate && newDate.getMonth() !== focusedDate.getMonth()) {\n                    setNextMonth();\n                    monthChanged = true;\n                }\n\n                const effect = () => focusDate(dateRefs.current[newDate.getDate() - 1]);\n\n                if (monthChanged) {\n                    setTimeout(effect, 0);\n                } else {\n                    effect();\n                }\n            } else {\n                focusFirstAvailableDate();\n            }\n        },\n        [\n            focusDate,\n            focusFirstAvailableDate,\n            getFocusedDate,\n            maxDate,\n            minDate,\n            offDaysMap,\n            setNextMonth,\n            setPrevMonth,\n        ],\n    );\n\n    const focusMonth = useCallback(\n        (offset: number) => {\n            const focusedNode = getFocusedDate();\n\n            if (focusedNode && focusedNode.dataset.date) {\n                const focusedMonth = new Date(+focusedNode.dataset.date).getMonth();\n                const newFocusedMonth = focusedMonth + offset;\n\n                if (newFocusedMonth >= 0 && newFocusedMonth < MONTHS_IN_YEAR) {\n                    focusDate(dateRefs.current[newFocusedMonth]);\n                }\n            } else {\n                focusFirstAvailableDate();\n            }\n        },\n        [focusDate, focusFirstAvailableDate, getFocusedDate],\n    );\n\n    const focusYear = useCallback(\n        (offset: number) => {\n            const focusedNode = getFocusedDate();\n\n            if (focusedNode && focusedNode.dataset.date) {\n                const focusedYear = new Date(+focusedNode.dataset.date).getFullYear();\n                const newFocusedYear = focusedYear + offset;\n                const currentYear = new Date().getFullYear();\n\n                if (newFocusedYear <= currentYear && newFocusedYear > currentYear - years.length) {\n                    focusDate(dateRefs.current[newFocusedYear]);\n                }\n            } else {\n                focusFirstAvailableDate();\n            }\n        },\n        [focusDate, focusFirstAvailableDate, getFocusedDate, years.length],\n    );\n\n    const handleMonthClick = useCallback(\n        (event: MouseEvent<HTMLButtonElement>) => {\n            const { date } = (event.currentTarget as HTMLButtonElement).dataset;\n\n            if (date) {\n                setMonthByDate(new Date(+date));\n            }\n\n            /**\n             * Возвращаем фокус внутрь компонента после переключения\n             * Но только если фокус и раньше был внутри\n             */\n            if (rootRef.current && rootRef.current.contains(document.activeElement)) {\n                rootRef.current.focus();\n            }\n        },\n        [setMonthByDate],\n    );\n\n    const handleYearClick = useCallback(\n        (event: MouseEvent<HTMLButtonElement>) => {\n            const { date } = (event.currentTarget as HTMLButtonElement).dataset;\n\n            if (date) {\n                setMonthByDate(setYear(activeMonth, new Date(+date).getFullYear()));\n            }\n\n            if (rootRef.current && rootRef.current.contains(document.activeElement)) {\n                rootRef.current.focus();\n            }\n        },\n        [activeMonth, setMonthByDate],\n    );\n\n    const handleDateRef = useCallback((node: HTMLElement, index: number) => {\n        dateRefs.current[index] = node;\n    }, []);\n\n    const handleDayMouseEnter = useCallback((event: MouseEvent<HTMLTableDataCellElement>) => {\n        const { date } = (event.currentTarget as HTMLTableDataCellElement).dataset;\n\n        setHighlighted(date ? +date : undefined);\n    }, []);\n\n    const handleDayMouseLeave = useCallback(() => {\n        setHighlighted(undefined);\n    }, []);\n\n    const handleDayClick = (event: MouseEvent<HTMLTableDataCellElement>) => {\n        const { date } = (event.currentTarget as HTMLTableDataCellElement).dataset;\n\n        if (date && onChange) {\n            onChange(+date);\n        }\n\n        handleDayMouseLeave();\n    };\n\n    const daysControls = useMemo(\n        (): { [key: string]: () => void } => ({\n            ArrowLeft: () => focusDay('prev'),\n            ArrowRight: () => focusDay('next'),\n            ArrowUp: () => focusDay('prevWeek'),\n            ArrowDown: () => focusDay('nextWeek'),\n            End: () => focusDay('endOfWeek'),\n            Home: () => focusDay('startOfWeek'),\n            PageUp: () => focusDay('prevMonth'),\n            PageDown: () => focusDay('nextMonth'),\n        }),\n        [focusDay],\n    );\n\n    const monthControls = useMemo(\n        (): { [key: string]: () => void } => ({\n            ArrowLeft: () => focusMonth(-1),\n            ArrowRight: () => focusMonth(1),\n            ArrowUp: () => focusMonth(-3),\n            ArrowDown: () => focusMonth(3),\n        }),\n        [focusMonth],\n    );\n\n    const yearsControls = useMemo(\n        (): { [key: string]: () => void } => ({\n            ArrowLeft: () => focusYear(1),\n            ArrowRight: () => focusYear(-1),\n            ArrowUp: () => focusYear(3),\n            ArrowDown: () => focusYear(-3),\n        }),\n        [focusYear],\n    );\n\n    const controlsByView = {\n        days: daysControls,\n        months: monthControls,\n        years: yearsControls,\n    };\n\n    const handleKeyDown = (event: KeyboardEvent<HTMLDivElement>) => {\n        const controls = controlsByView[view];\n\n        if (event.key in controls) {\n            controls[event.key]();\n            event.preventDefault();\n        }\n    };\n\n    let focusableDayIsSet = false;\n\n    const getDayProps = (day: Day) => {\n        const daySelected = selected && isSameDay(selected, day.date);\n        let canFocus = daySelected;\n\n        // Если день не выбран — фокус должен начинаться с первого доступного дня месяца\n        if (\n            (!selected || !isSameMonth(selected, activeMonth)) &&\n            !focusableDayIsSet &&\n            !day.disabled\n        ) {\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            focusableDayIsSet = true;\n            canFocus = true;\n        }\n\n        return {\n            'data-date': day.date.getTime(),\n            'aria-selected': daySelected,\n            ref: (node: HTMLTableDataCellElement) => {\n                handleDateRef(node, day.date.getDate() - 1);\n            },\n            tabIndex: canFocus ? 0 : -1,\n            onMouseEnter: handleDayMouseEnter,\n            onMouseLeave: handleDayMouseLeave,\n            onClick: handleDayClick,\n        };\n    };\n\n    const getMonthProps = (currMonth: Month) => {\n        const monthselected = isSameMonth(activeMonth, currMonth.date);\n\n        return {\n            'data-date': currMonth.date.getTime(),\n            'aria-selected': monthselected,\n            ref: (node: HTMLButtonElement) => {\n                handleDateRef(node, currMonth.date.getMonth());\n            },\n            tabIndex: monthselected ? 0 : -1,\n            disabled: currMonth.disabled,\n            onClick: handleMonthClick,\n        };\n    };\n\n    const getYearProps = (year: Date) => {\n        const yearSelected = isSameYear(activeMonth, year);\n\n        return {\n            'data-date': year.getTime(),\n            'aria-selected': yearSelected,\n            ref: (node: HTMLButtonElement) => {\n                handleDateRef(node, year.getFullYear());\n            },\n            tabIndex: yearSelected ? 0 : -1,\n            onClick: handleYearClick,\n        };\n    };\n\n    const getRootProps = ({ ref = null }: { ref?: Ref<HTMLDivElement> }) => ({\n        onKeyDown: handleKeyDown,\n        ref: mergeRefs([ref, rootRef]),\n        tabIndex: -1,\n    });\n\n    return {\n        activeMonth,\n        weeks,\n        months,\n        years,\n        canSetPrevMonth,\n        canSetNextMonth,\n        highlighted,\n        setPrevMonth,\n        setNextMonth,\n        setMonthByDate,\n        getDayProps,\n        getMonthProps,\n        getYearProps,\n        getRootProps,\n    };\n}\n","import { ReactNode } from 'react';\nimport addDays from 'date-fns/addDays';\nimport addMonths from 'date-fns/addMonths';\nimport eachDayOfInterval from 'date-fns/eachDayOfInterval';\nimport eachMonthOfInterval from 'date-fns/eachMonthOfInterval';\nimport eachYearOfInterval from 'date-fns/eachYearOfInterval';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport endOfYear from 'date-fns/endOfYear';\nimport format from 'date-fns/format';\nimport isAfter from 'date-fns/isAfter';\nimport isBefore from 'date-fns/isBefore';\nimport isSameDay from 'date-fns/isSameDay';\nimport lastDayOfMonth from 'date-fns/lastDayOfMonth';\nimport max from 'date-fns/max';\nimport min from 'date-fns/min';\nimport parse from 'date-fns/parse';\nimport startOfDay from 'date-fns/startOfDay';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport startOfYear from 'date-fns/startOfYear';\nimport subDays from 'date-fns/subDays';\nimport subMonths from 'date-fns/subMonths';\n\nimport { DateShift, Day, DayAddons, Month, SpecialDays, SpecialDaysAddon } from './typings';\n\nexport const DAYS_IN_WEEK = 7;\nexport const MONTHS_IN_YEAR = 12;\nexport const SUNDAY_INDEX = 6;\nexport const DATE_FORMAT = 'dd.MM.yyyy';\nexport const NATIVE_DATE_FORMAT = 'yyyy-MM-dd';\n\nexport const WEEKDAYS = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'];\nexport const MONTHS = [\n    'Январь',\n    'Февраль',\n    'Март',\n    'Апрель',\n    'Май',\n    'Июнь',\n    'Июль',\n    'Август',\n    'Сентябрь',\n    'Октябрь',\n    'Ноябрь',\n    'Декабрь',\n];\n\n/**\n * Возвращает «правильный» индекс дня недели, 0 - пн, 1 - вт и так далее.\n */\nexport function russianWeekDay(date: Date): number {\n    const sunday = 0;\n    const foreignWeekDayIndex = date.getDay();\n\n    return foreignWeekDayIndex === sunday ? DAYS_IN_WEEK - 1 : foreignWeekDayIndex - 1;\n}\n\n/**\n * Возвращает таблицу-календарь с заполненными датами для переданного месяца\n */\nexport function generateWeeks(\n    month: Date,\n    options: {\n        minDate?: Date;\n        maxDate?: Date;\n        selected?: Date;\n        eventsMap?: SpecialDays;\n        offDaysMap?: SpecialDays;\n        holidaysMap?: SpecialDays;\n        dayAddonsMap?: SpecialDaysAddon;\n    },\n) {\n    const newWeek = () => Array(DAYS_IN_WEEK).fill(null);\n\n    const start = startOfMonth(month);\n    const end = lastDayOfMonth(start);\n\n    let week = newWeek();\n\n    return eachDayOfInterval({ start, end }).reduce((weeks: Day[][], day: Date) => {\n        const weekDay = russianWeekDay(day);\n\n        week[weekDay] = buildDay(day, options);\n\n        if (weekDay === SUNDAY_INDEX || isSameDay(day, end)) {\n            weeks.push(week);\n            week = newWeek();\n        }\n\n        return weeks;\n    }, []);\n}\n\n/**\n * Возвращает массив с месяцами для переданного года\n */\nexport function generateMonths(year: Date, options: { minMonth?: Date; maxMonth?: Date }) {\n    return eachMonthOfInterval({ start: startOfYear(year), end: endOfYear(year) }).map((month) =>\n        buildMonth(month, options),\n    );\n}\n\n/**\n * Возвращает массив лет от minYear до maxYear\n */\nexport function generateYears(minYear: Date, maxYear: Date) {\n    return eachYearOfInterval({\n        start: min([startOfYear(maxYear), startOfYear(minYear)]),\n        end: max([startOfYear(maxYear), startOfYear(minYear)]),\n    }).reverse();\n}\n\n/**\n * Добавляет метаданные для переданного дня\n */\nexport function buildDay(\n    day: Date,\n    options: {\n        minDate?: Date;\n        maxDate?: Date;\n        selected?: Date;\n        eventsMap?: SpecialDays;\n        offDaysMap?: SpecialDays;\n        holidaysMap?: SpecialDays;\n        dayAddonsMap?: SpecialDaysAddon;\n    },\n): Day {\n    const {\n        minDate,\n        maxDate,\n        selected,\n        eventsMap = {},\n        offDaysMap = {},\n        holidaysMap = {},\n        dayAddonsMap = {},\n    } = options;\n    const off = offDaysMap[day.getTime()];\n    const disabled = (minDate && isBefore(day, minDate)) || (maxDate && isAfter(day, maxDate));\n\n    return {\n        date: day,\n        disabled: disabled || off,\n        event: eventsMap[day.getTime()],\n        holiday: holidaysMap[day.getTime()],\n        selected: selected && isSameDay(day, selected),\n        dayAddon: dayAddonsMap[day.getTime()],\n    };\n}\n\n/**\n * Добавляет метаданные для переданного месяца\n */\nexport function buildMonth(month: Date, options: { minMonth?: Date; maxMonth?: Date }): Month {\n    const { minMonth, maxMonth } = options;\n\n    return {\n        date: month,\n        disabled: (minMonth && isBefore(month, minMonth)) || (maxMonth && isAfter(month, maxMonth)),\n    };\n}\n\n/**\n * Ограничивает дату на отрезке [minDate, maxDate]\n */\nexport function limitDate(date: Date | number, minDate?: Date | number, maxDate?: Date | number) {\n    let limitedDate = date;\n\n    if (minDate) limitedDate = max([minDate, limitedDate]);\n    if (maxDate) limitedDate = min([maxDate, limitedDate]);\n\n    return new Date(limitedDate);\n}\n\n/**\n * Проверяет, находится ли переданная дата в указанных границах\n */\nexport function dateInLimits(\n    date?: Date | number | null,\n    minDate?: Date | number,\n    maxDate?: Date | number,\n) {\n    return date && limitDate(date, minDate, maxDate).getTime() === new Date(date).getTime();\n}\n\n/**\n * Возвращает русское название месяца с большой буквы\n */\nexport function monthName(month: Date) {\n    return MONTHS[month.getMonth()];\n}\n\n/**\n * Превращает массив в объект, у которого ключи составляются из элементов массива\n */\nexport function dateArrayToHashTable(arr: Array<Date | number>) {\n    return arr.reduce((acc: Record<number, boolean>, v) => {\n        acc[startOfDay(v).getTime()] = true;\n\n        return acc;\n    }, {});\n}\n\nexport function addonArrayToHashTable(arr: DayAddons[]) {\n    return arr.reduce((acc: Record<number, ReactNode>, v) => {\n        acc[startOfDay(v.date).getTime()] = v.addon;\n\n        return acc;\n    }, {});\n}\n\n/**\n * Возвращает корректный отрезок дат для выделения\n */\nexport function getSelectionRange(\n    from?: Date | number,\n    to?: Date | number,\n    highlighted?: Date | number,\n) {\n    if (!from && !to) return null;\n\n    const end = to || highlighted;\n    const start = from || highlighted;\n\n    if (start && end && start !== end) {\n        return {\n            start: min([start, end]),\n            end: max([start, end]),\n        };\n    }\n\n    return null;\n}\n\n// Меняет дату одним из способов с учетом границ и выходных дней\nexport function modifyDateByShift(\n    shift: DateShift,\n    date: Date,\n    minDate?: Date,\n    maxDate?: Date,\n    offDaysMap: Record<number, boolean> = {},\n) {\n    const modifiers: Record<DateShift, () => Date> = {\n        prev: () => subDays(date, 1),\n        prevWeek: () => subDays(date, 7),\n        prevMonth: () => subMonths(date, 1),\n        next: () => addDays(date, 1),\n        nextWeek: () => addDays(date, 7),\n        nextMonth: () => addMonths(date, 1),\n        startOfWeek: () => startOfWeek(date, { weekStartsOn: 1 }),\n        endOfWeek: () => startOfDay(endOfWeek(date, { weekStartsOn: 1 })),\n    };\n\n    let newDate = modifiers[shift]();\n\n    while (offDaysMap[newDate.getTime()]) {\n        // Перескакиваем через выходные дни, кроме случаев с концами недели\n        let amount = newDate < date ? -1 : 1;\n\n        if (shift === 'endOfWeek') amount = -1;\n        if (shift === 'startOfWeek') amount = 1;\n        newDate = addDays(newDate, amount);\n    }\n\n    return limitDate(newDate, minDate, maxDate);\n}\n\n/**\n * Если дата была выбрана мышкой — фокусную обводку не видно\n * TODO: добавить в useFocus возможность переключать метод ввода программно\n */\nexport function simulateTab(node: HTMLElement) {\n    if (window.KeyboardEvent) {\n        const event = new window.KeyboardEvent('keydown', {\n            bubbles: true,\n            key: 'Tab',\n        });\n\n        node.dispatchEvent(event);\n    }\n}\n\nexport const formatDate = (date: Date | number, dateFormat = DATE_FORMAT) =>\n    format(date, dateFormat);\n\nexport const parseDateString = (value: string, dateFormat = DATE_FORMAT) =>\n    parse(value, dateFormat, new Date());\n","import qs from 'querystring';\n\nimport { CSSProperties } from 'react';\n\nexport const queryParams = qs.parse(document.location.search);\n\nexport const getQueryParam = (param: string, parse = false) => {\n    const value = queryParams[param] as string;\n\n    return parse ? parseValue(value) : value;\n};\n\nexport const parseKnobs = () =>\n    Object.entries(queryParams).reduce((acc, [k, v]) => {\n        if (k.startsWith('knob-')) {\n            acc[k.replace('knob-', '')] = parseValue(v as string);\n        }\n\n        return acc;\n        // eslint-disable-next-line\n    }, {} as Record<string, any>);\n\nexport function parseValue(value: string) {\n    const isBoolean = () => ['true', 'false'].includes(value);\n    const isNumeric = () => !Number.isNaN(+value) && !Number.isNaN(parseFloat(value));\n\n    if (!value) return undefined;\n\n    if (isBoolean()) return value === 'true';\n\n    if (isNumeric()) return parseFloat(value);\n\n    try {\n        return JSON.parse(value);\n    } catch (e) {\n        return value;\n    }\n}\n\nexport function stylesStringToObj(str = ''): CSSProperties {\n    if (!str) return {};\n\n    const properties = str.split(';').map((v) => v.trim());\n    const obj: Record<string, unknown> = {};\n\n    properties.forEach((property) => {\n        const [name, val] = property.split(':').map((v) => v.trim());\n\n        obj[name] = val;\n    });\n\n    return obj as CSSProperties;\n}\n"],"names":["Header","_ref","_cn","_ref$view","view","withShadow","children","_jsx","className","cn","styles","_defineProperty","SelectButton","forwardRef","ref","restProps","_objectWithoutProperties","_excluded","Button","_objectSpread","size","MonthYearHeader","value","onMonthClick","onYearClick","dataTestId","month","monthName","undefined","year","getFullYear","toString","_jsxs","onClick","ChevronDownCompactSIcon","MonthsTable","selectedMonth","_ref$months","months","getMonthProps","responsive","useCallback","isSameMonth","date","isThisMonth","map","_createElement","key","getTime","YearsTable","selectedYear","_ref$years","years","getYearProps","onScroll","useRef","isSameYear","isThisYear","handleScroll","event","currentTarget","scrollTop","useLayoutEffect","listNode","current","selector","concat","selectedYearNode","querySelector","topIndent","clientHeight","offsetTop","CalendarDesktop","_ref$defaultView","defaultView","_ref$selectorView","selectorView","monthTimestamp","minDateTimestamp","minDate","maxDateTimestamp","maxDate","_ref$defaultMonth","defaultMonth","defaultMonthTimestamp","Date","selectedFrom","selectedTo","rangeComplete","offDays","events","holidays","onChange","onMonthChange","onPeriodClick","_ref$hasHeader","hasHeader","dayAddons","_ref$shape","shape","_ref$showCurrentYearS","showCurrentYearSelector","_useState","useState","_useState2","_slicedToArray","setView","_useState3","_useState4","scrolled","setScrolled","selected","useMemo","startOfMonth","limitDate","startOfDay","endOfDay","_useCalendar","useCalendar","activeMonth","weeks","canSetPrevMonth","canSetNextMonth","setMonthByDate","setPrevMonth","setNextMonth","highlighted","getDayProps","getRootProps","toggleView","newView","handlePrevArrowClick","handleNextArrowClick","handleMonthClick","handleYearClick","useDidUpdateEffect","newMonth","length","PeriodSlider","periodType","prevArrowDisabled","nextArrowDisabled","hideDisabledArrows","onPrevArrowClick","onNextArrowClick","DaysTable","window","ResizeObserver","ResizeObserverPolyfill","CalendarMonthOnlyView","_ref$yearsAmount","yearsAmount","initialMonthIndex","currentMonthIndex","getMonth","now","activeMonths","eventsMap","dateArrayToHashTable","offDaysMap","holidaysMap","dayAddonsMap","addonArrayToHashTable","prevMonths","nextMonths","currentYear","i","prevYear","setFullYear","nextYear","prevYearMonths","generateMonths","nextYearMonths","unshift","apply","_toConsumableArray","push","item","generateWeeks","title","Virtuoso","totalCount","itemContent","renderMonth","index","id","initialTopMostItemIndex","increaseViewportBy","itemSize","el","getBoundingClientRect","height","CalendarMobile","_ref2","_ref2$hasHeader","_ref2$allowSelectionF","allowSelectionFromEmptyRange","_ref2$defaultView","_ref2$selectorView","open","onClose","_ref2$title","_ref2$yearsAmount","modalRef","monthOnlyView","handleClose","handleClear","ModalMobile","wrapperClassName","hasCloser","sticky","renderDayNames","WEEKDAYS","dayName","flex","renderContent","commonProps","renderFooter","selectButtonDisabled","React","block","disabled","_ref$weeks","_ref$activeMonth","_ref$rangeComplete","activeMonthRef","directionRef","prevActiveMonth","usePrevious","selection","getSelectionRange","renderHeader","renderDay","day","dayIdx","_cn2","_cn4","daySelected","isSameDay","dayHighlighted","isEqual","inRange","isWithinInterval","firstDayOfMonth","getDate","lastDayOfMonth","isLastDayOfMonth","firstDayOfWeek","russianWeekDay","lastDayOfWeek","transitLeft","start","transitRight","end","rangeStart","rangeEnd","sharpTransitLeft","sharpTransitRight","dayProps","align","node","handleDayClick","e","type","dayAddon","isToday","holiday","TransitionGroup","component","CSSTransition","timeout","classNames","enter","enterActive","exit","exitActive","renderWeek","week","weekIdx","formatPeriod","valueFrom","valueTo","showCurrentYear","isYesterday","formatDate","monthAndYear","getYear","getQuarter","shiftValues","direction","newValueFrom","newValueTo","amount","addDays","startOfWeek","addWeeks","weekStartsOn","endOfWeek","addMonths","endOfMonth","startOfQuarter","addQuarters","endOfQuarter","startOfYear","addYears","endOfYear","_ref$periodType","_ref$periodFormatter","periodFormatter","_ref$prevArrowDisable","_ref$nextArrowDisable","_ref$hideDisabledArro","_ref$isMonthAndYearSe","isMonthAndYearSelectable","_ref$onPrevArrowClick","_ref$onNextArrowClick","_useMemo","from","to","Array","isArray","_value","_useMemo2","yearSelectorValue","getYearSelectorValue","showArrow","IconButton","icon","ChevronBackMIcon","newValues","role","tabIndex","usePeriod","arguments","onPeriodChange","initialSelectedFrom","initialSelectedTo","setSelectedFrom","setSelectedTo","resetPeriod","setStart","setEnd","updatePeriod","Math","abs","differenceInDays","min","max","usePeriodWithReset","_useState5","_useState6","_useState7","_useState8","CalendarResponsive","_ref$breakpoint","breakpoint","_useMedia","useMedia","monthState","setMonthState","setHighlighted","uncontrolled","dateRefs","rootRef","minMonth","maxMonth","generateYears","subYears","setMonth","setMonthByStep","step","getFocusedDate","find","document","activeElement","getFocusableDate","focusDate","simulateTab","focus","focusFirstAvailableDate","focusDay","shift","focusedNode","dataset","focusedDate","newDate","modifyDateByShift","monthChanged","effect","setTimeout","focusMonth","offset","newFocusedMonth","MONTHS_IN_YEAR","focusYear","newFocusedYear","contains","setYear","handleDateRef","handleDayMouseEnter","handleDayMouseLeave","controlsByView","days","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","End","Home","PageUp","PageDown","handleKeyDown","controls","preventDefault","focusableDayIsSet","canFocus","onMouseEnter","onMouseLeave","currMonth","monthselected","yearSelected","_ref2$ref","onKeyDown","mergeRefs","DAYS_IN_WEEK","SUNDAY_INDEX","DATE_FORMAT","MONTHS","foreignWeekDayIndex","getDay","options","newWeek","fill","eachDayOfInterval","reduce","weekDay","buildDay","_options$eventsMap","_options$offDaysMap","_options$holidaysMap","_options$dayAddonsMap","off","isBefore","isAfter","eachMonthOfInterval","buildMonth","minYear","maxYear","eachYearOfInterval","reverse","limitedDate","dateInLimits","arr","acc","v","addon","prev","subDays","prevWeek","prevMonth","subMonths","next","nextWeek","nextMonth","KeyboardEvent","bubbles","dispatchEvent","dateFormat","format","queryParams","qs","location","search","getQueryParam","param","parse","parseValue","parseKnobs","Object","entries","k","startsWith","replace","isBoolean","includes","isNumeric","Number","isNaN","parseFloat","JSON","stylesStringToObj","str","properties","split","trim","obj","forEach","property","_property$split$map","_property$split$map2","name","val"],"sourceRoot":""}