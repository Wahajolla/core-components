{"version":3,"file":"5945.b5310c40.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./packages/calendar-range/src/Component.tsx","webpack://@alfalab/core-components/./packages/calendar-range/src/components/divider/index.module.css?93b4","webpack://@alfalab/core-components/./packages/calendar-range/src/components/divider/Component.tsx","webpack://@alfalab/core-components/./packages/calendar-range/src/hooks.ts","webpack://@alfalab/core-components/./packages/calendar-range/src/views/popover.tsx","webpack://@alfalab/core-components/./packages/calendar-range/src/utils.ts","webpack://@alfalab/core-components/./packages/calendar-range/src/views/static.tsx","webpack://@alfalab/core-components/./packages/calendar-range/src/views/index.module.css?64a9"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { CalendarInputProps } from '@alfalab/core-components-calendar-input';\n\nimport { CalendarRangePopover } from './views/popover';\nimport { CalendarRangeStatic } from './views/static';\n\nexport type CalendarRangeProps = {\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Значение инпута (используется и для календаря)\n     */\n    valueFrom?: string;\n\n    /**\n     * Значение инпута (используется и для календаря)\n     */\n    valueTo?: string;\n\n    /**\n     * Месяц в календаре по умолчанию\n     */\n    defaultMonth?: number;\n\n    /**\n     * Минимальная дата, доступная для выбора (timestamp)\n     */\n    minDate?: number;\n\n    /**\n     * Максимальная дата, доступная для выбора (timestamp)\n     */\n    maxDate?: number;\n\n    /**\n     * Обработчик изменения даты от\n     */\n    onDateFromChange?: (payload: { date: number | null; value: string }) => void;\n\n    /**\n     * Обработчик изменения даты до\n     */\n    onDateToChange?: (payload: { date: number | null; value: string }) => void;\n\n    /**\n     * Обработчик изменения\n     */\n    onChange?: (payload: {\n        dateFrom: number | null;\n        valueFrom: string;\n        dateTo: number | null;\n        valueTo: string;\n    }) => void;\n\n    /**\n     * Коллбэк, срабатывающий при возникновении ошибок валидации дат внутри компонента.\n     */\n    onError?: (hasError: boolean) => void;\n\n    /**\n     * Список событий\n     */\n    events?: Array<Date | number>;\n\n    /**\n     * Список выходных\n     */\n    offDays?: Array<Date | number>;\n\n    /**\n     * Пропсы для инпута даты от\n     */\n    inputFromProps?: CalendarInputProps;\n\n    /**\n     * Пропсы для инпута даты до\n     */\n    inputToProps?: CalendarInputProps;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    dataTestId?: string;\n\n    /**\n     * Определяет, как рендерить календарь — в поповере или снизу инпута\n     */\n    calendarPosition?: 'static' | 'popover';\n\n    /**\n     * calendarPosition = static\n     * Отображать начальный месяц слева или справа (влияет только на начальный рендер)\n     */\n    defaultMonthPosition?: 'left' | 'right';\n\n    /**\n     * Возвращать невалидную дату для кастомной валидации\n     */\n    returnInvalidDates?: boolean;\n};\n\nexport const CalendarRange: FC<CalendarRangeProps> = ({\n    calendarPosition = 'static',\n    ...restProps\n}) => {\n    const View = calendarPosition === 'popover' ? CalendarRangePopover : CalendarRangeStatic;\n\n    return <View {...restProps} />;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_c0uGs\",\"outer\":\"outer_jIoDY\",\"s\":\"s_KI7Yz\",\"m\":\"m_cUbRp\",\"l\":\"l_TvpgO\",\"xl\":\"xl_O4brp\"};","import React, { FC } from 'react';\nimport cn from 'classnames';\n\nimport { CalendarRangeProps } from '../../Component';\n\nimport styles from './index.module.css';\n\ntype Props = {\n    inputFromProps?: CalendarRangeProps['inputFromProps'];\n    inputToProps?: CalendarRangeProps['inputToProps'];\n};\n\nexport const Divider: FC<Props> = ({ inputFromProps, inputToProps }) => {\n    const outer =\n        inputFromProps?.label &&\n        inputFromProps?.labelView === 'outer' &&\n        inputToProps?.label &&\n        inputToProps?.labelView === 'outer';\n\n    const size = inputFromProps?.size || inputToProps?.size || 's';\n\n    return <span className={cn(styles.component, styles[size], { [styles.outer]: outer })} />;\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport addMonths from 'date-fns/addMonths';\nimport isEqual from 'date-fns/isEqual';\nimport max from 'date-fns/max';\nimport min from 'date-fns/min';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport subMonths from 'date-fns/subMonths';\n\nexport function usePopoverViewMonthes({\n    dateFrom,\n    dateTo,\n    defaultMonth,\n    resetKey,\n}: {\n    defaultMonth: number;\n    dateFrom: number | null;\n    dateTo: number | null;\n    resetKey?: number;\n}) {\n    const [monthFrom, setMonthFrom] = useState<number>();\n    const [monthTo, setMonthTo] = useState<number>();\n\n    const handleMonthFromChange = useCallback(\n        (newMonthFrom: number) => {\n            setMonthFrom(newMonthFrom);\n\n            if (!dateTo) {\n                setMonthTo(newMonthFrom);\n            }\n        },\n        [dateTo],\n    );\n\n    const handleMonthToChange = useCallback(\n        (newMonthTo: number) => {\n            setMonthTo(newMonthTo);\n\n            if (!dateFrom) {\n                setMonthFrom(newMonthTo);\n            }\n        },\n        [dateFrom],\n    );\n\n    useEffect(() => {\n        setMonthFrom(dateFrom ? startOfMonth(dateFrom).getTime() : defaultMonth);\n    }, [defaultMonth, dateFrom, resetKey]);\n\n    useEffect(() => {\n        setMonthTo(dateTo ? startOfMonth(dateTo).getTime() : monthFrom);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dateTo, resetKey]);\n\n    return {\n        monthFrom,\n        monthTo,\n        handleMonthFromChange,\n        handleMonthToChange,\n    };\n}\n\nexport function useStaticViewMonthes({\n    selectedFrom,\n    selectedTo,\n    defaultMonth,\n    defaultMonthPosition,\n}: {\n    selectedFrom?: number;\n    selectedTo?: number;\n    defaultMonth: number;\n    defaultMonthPosition?: 'left' | 'right';\n}) {\n    /**\n     * Если указана начальная дата — левый месяц равен ей, иначе используется дата конца.\n     * Если обе даты не указаны, то используется дефолтный месяц\n     */\n    let initialMonthFrom = useMemo(\n        () => startOfMonth(selectedFrom || selectedTo || defaultMonth).getTime(),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [],\n    );\n\n    /**\n     * Правый месяц должен быть как минимум на 1 месяц больше левого\n     */\n    let initialMonthTo = useMemo(\n        () =>\n            max([\n                selectedTo ? startOfMonth(selectedTo) : 0,\n                addMonths(initialMonthFrom, 1),\n            ]).getTime(),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [],\n    );\n\n    if (defaultMonthPosition === 'right') {\n        initialMonthTo = initialMonthFrom;\n        initialMonthFrom = subMonths(initialMonthFrom, 1).getTime();\n    }\n\n    const [monthFrom, setMonthFrom] = useState<number>(initialMonthFrom);\n    const [monthTo, setMonthTo] = useState<number>(initialMonthTo);\n\n    const handleMonthFromChange = useCallback(\n        (newMonthFrom: number) => {\n            setMonthFrom(newMonthFrom);\n\n            if (monthTo && isEqual(newMonthFrom, monthTo)) {\n                const nextMonth = addMonths(newMonthFrom, 1).getTime();\n\n                setMonthTo(nextMonth);\n            }\n        },\n        [monthTo],\n    );\n\n    const handleMonthToChange = useCallback(\n        (newMonthTo: number) => {\n            setMonthTo(newMonthTo);\n\n            if (monthFrom && isEqual(newMonthTo, monthFrom)) {\n                const prevMonth = subMonths(newMonthTo, 1).getTime();\n\n                setMonthFrom(prevMonth);\n            }\n        },\n        [monthFrom],\n    );\n\n    // eslint-disable-next-line complexity\n    useEffect(() => {\n        const selectedFromMonth = selectedFrom ? startOfMonth(selectedFrom).getTime() : undefined;\n        const selectedToMonth = selectedTo ? startOfMonth(selectedTo).getTime() : undefined;\n\n        // Проверяем, показываются ли выбранные месяцы в левой или правой части компонента\n        const fromMonthOnLeft = selectedFromMonth && selectedFromMonth === monthFrom;\n        const fromMonthOnRight = selectedFromMonth && selectedFromMonth === monthTo;\n        const toMonthOnRight = selectedToMonth && selectedToMonth === monthTo;\n        const toMonthOnLeft = selectedToMonth && selectedToMonth === monthFrom;\n        const fromMonthOnScreen = fromMonthOnLeft || fromMonthOnRight;\n        const toMonthOnScreen = toMonthOnLeft || toMonthOnRight;\n\n        if (fromMonthOnLeft && toMonthOnLeft) {\n            setMonthTo(max([addMonths(selectedFromMonth as number, 1), monthTo]).getTime());\n\n            return;\n        }\n\n        if (fromMonthOnRight && toMonthOnRight) {\n            setMonthFrom(min([subMonths(selectedToMonth as number, 1), monthFrom]).getTime());\n\n            return;\n        }\n\n        if (selectedFromMonth && selectedToMonth) {\n            setMonthFrom(selectedFromMonth);\n            setMonthTo(max([addMonths(selectedFromMonth, 1), selectedToMonth]).getTime());\n\n            return;\n        }\n\n        if (selectedFromMonth && !selectedToMonth && !fromMonthOnScreen) {\n            setMonthFrom(selectedFromMonth);\n            setMonthTo(max([addMonths(selectedFromMonth, 1), monthTo]).getTime());\n        }\n\n        if (selectedToMonth && !selectedFromMonth && !toMonthOnScreen) {\n            setMonthTo(selectedToMonth);\n            setMonthFrom(min([subMonths(selectedToMonth, 1), monthFrom]).getTime());\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedFrom, selectedTo]);\n\n    return {\n        monthFrom,\n        monthTo,\n        handleMonthFromChange,\n        handleMonthToChange,\n    };\n}\n\nexport function useSelectionProps(from?: number, to?: number, highlighted?: number) {\n    return useMemo(() => {\n        if (from && to) {\n            return {\n                rangeComplete: true,\n                selectedFrom: min([from, to]).getTime(),\n                selectedTo: max([from, to]).getTime(),\n            };\n        }\n\n        const dates = [from, to, highlighted].filter((date) => date !== undefined) as number[];\n\n        return {\n            rangeComplete: false,\n            selectedFrom: from || dates.length === 2 ? min(dates).getTime() : undefined,\n            selectedTo: to || dates.length === 2 ? max(dates).getTime() : undefined,\n        };\n    }, [from, highlighted, to]);\n}\n","import React, { FC, useCallback, useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport startOfMonth from 'date-fns/startOfMonth';\n\nimport {\n    CalendarInput,\n    CalendarInputProps,\n    isValidInputValue,\n    parseDateString,\n} from '@alfalab/core-components-calendar-input';\nimport { isCompleteDateInput } from '@alfalab/core-components-date-input';\nimport { useDidUpdateEffect } from '@alfalab/hooks';\n\nimport { CalendarRangeProps } from '../Component';\nimport { Divider } from '../components/divider';\nimport { usePopoverViewMonthes } from '../hooks';\n\nimport styles from './index.module.css';\n\nexport type CalendarRangePopoverProps = Omit<CalendarRangeProps, 'calendarPosition'>;\n\nexport const CalendarRangePopover: FC<CalendarRangePopoverProps> = ({\n    className,\n    defaultMonth = startOfMonth(new Date()).getTime(),\n    minDate,\n    maxDate,\n    valueFrom = '',\n    valueTo = '',\n    onDateFromChange = () => null,\n    onDateToChange = () => null,\n    onChange = () => null,\n    onError,\n    inputFromProps = {},\n    inputToProps = {},\n    offDays,\n    events,\n    returnInvalidDates = false,\n    dataTestId,\n}) => {\n    const [inputFromValue, setInputFromValue] = useState<string>(valueFrom);\n    const [inputToValue, setInputToValue] = useState<string>(valueTo);\n\n    /**\n     * Ключ для сброса календарей\n     * Пользователь открыл календарь, изменил месяц, но ничего не выбрал\n     * — при следующем открытии в календаре будет установлен начальный месяц\n     */\n    const [resetKey, setResetKey] = useState<number>(0);\n\n    const dateFrom = isValidInputValue(inputFromValue, minDate, maxDate, offDays)\n        ? parseDateString(inputFromValue).getTime()\n        : null;\n\n    const dateTo = isValidInputValue(inputToValue, dateFrom || minDate, maxDate, offDays)\n        ? parseDateString(inputToValue).getTime()\n        : null;\n\n    const [inputFromInvalid, setInputFromInvalid] = useState<boolean>(\n        isCompleteDateInput(inputFromValue) && dateFrom === null,\n    );\n    const [inputToInvalid, setInputToInvalid] = useState<boolean>(\n        isCompleteDateInput(inputToValue) && dateTo === null,\n    );\n\n    const bothInvalid =\n        isCompleteDateInput(inputFromValue) &&\n        isCompleteDateInput(inputToValue) &&\n        parseDateString(inputFromValue).getTime() > parseDateString(inputToValue).getTime();\n\n    const hasValidateError = inputFromInvalid || inputToInvalid || bothInvalid;\n\n    const { monthFrom, monthTo, handleMonthFromChange, handleMonthToChange } =\n        usePopoverViewMonthes({\n            dateFrom,\n            dateTo,\n            defaultMonth,\n            resetKey,\n        });\n\n    const handleValidInputFrom = useCallback(() => {\n        setInputFromInvalid(\n            inputFromValue !== '' && !isValidInputValue(inputFromValue, minDate, maxDate, offDays),\n        );\n    }, [inputFromValue, maxDate, minDate, offDays]);\n\n    const handleValidInputTo = useCallback(() => {\n        setInputToInvalid(\n            inputToValue !== '' &&\n                !isValidInputValue(inputToValue, dateFrom || minDate, maxDate, offDays),\n        );\n    }, [dateFrom, inputToValue, maxDate, minDate, offDays]);\n\n    const handleInputFromChange: Required<CalendarInputProps>['onInputChange'] = (\n        event,\n        payload,\n    ) => {\n        setInputFromValue(payload.value);\n        inputFromProps.onInputChange?.(event, payload);\n    };\n\n    const handleInputToChange: Required<CalendarInputProps>['onInputChange'] = (event, payload) => {\n        setInputToValue(payload.value);\n        inputToProps.onInputChange?.(event, payload);\n    };\n\n    const handleInputFromBlur = useCallback(() => {\n        handleValidInputFrom();\n        setResetKey(+new Date());\n    }, [handleValidInputFrom]);\n\n    const handleInputToBlur = useCallback(() => {\n        handleValidInputTo();\n        setResetKey(+new Date());\n    }, [handleValidInputTo]);\n\n    const handleFromChange: Required<CalendarInputProps>['onChange'] = useCallback((_, payload) => {\n        setInputFromValue(payload.value);\n    }, []);\n\n    const handleToChange: Required<CalendarInputProps>['onChange'] = useCallback((_, payload) => {\n        setInputToValue(payload.value);\n    }, []);\n\n    useEffect(() => {\n        setInputFromValue(valueFrom);\n    }, [valueFrom]);\n\n    useEffect(() => {\n        setInputToValue(valueTo);\n    }, [valueTo]);\n\n    useDidUpdateEffect(() => {\n        onDateFromChange({ value: inputFromValue, date: dateFrom });\n\n        onChange({\n            valueFrom: inputFromValue,\n            valueTo: inputToValue,\n            dateFrom,\n            dateTo,\n        });\n\n        if (!inputFromValue || isCompleteDateInput(inputFromValue)) {\n            handleValidInputFrom();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [inputFromValue]);\n\n    useDidUpdateEffect(() => {\n        onDateToChange({ value: inputToValue, date: dateTo });\n\n        // eslint-disable-next-line no-nested-ternary\n        const inputDateTo = returnInvalidDates\n            ? isCompleteDateInput(inputToValue)\n                ? parseDateString(inputToValue).getTime()\n                : null\n            : dateTo;\n\n        onChange({\n            valueFrom: inputFromValue,\n            valueTo: inputToValue,\n            dateFrom,\n            dateTo: inputDateTo,\n        });\n\n        if (!inputToValue || isCompleteDateInput(inputToValue)) {\n            handleValidInputTo();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [inputToValue]);\n\n    useEffect(() => {\n        if (onError) {\n            onError(hasValidateError);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [hasValidateError]);\n\n    return (\n        <div className={cn(styles.component, className)} data-test-id={dataTestId}>\n            <CalendarInput\n                {...inputFromProps}\n                useAnchorWidth={false}\n                calendarPosition='popover'\n                popoverPosition='bottom-start'\n                error={inputFromInvalid || bothInvalid || inputFromProps.error}\n                onChange={handleFromChange}\n                onInputChange={handleInputFromChange}\n                onBlur={handleInputFromBlur}\n                value={inputFromValue}\n                minDate={minDate}\n                maxDate={maxDate}\n                offDays={offDays}\n                events={events}\n                calendarProps={{\n                    ...inputFromProps.calendarProps,\n                    month: monthFrom,\n                    onMonthChange: handleMonthFromChange,\n                    selectorView: 'full',\n                }}\n            />\n\n            <Divider inputFromProps={inputFromProps} inputToProps={inputToProps} />\n\n            <CalendarInput\n                {...inputToProps}\n                useAnchorWidth={false}\n                calendarPosition='popover'\n                popoverPosition='bottom-end'\n                error={inputToInvalid || bothInvalid || inputToProps.error}\n                onChange={handleToChange}\n                onInputChange={handleInputToChange}\n                onBlur={handleInputToBlur}\n                value={inputToValue}\n                minDate={dateFrom || minDate}\n                maxDate={maxDate}\n                offDays={offDays}\n                events={events}\n                calendarProps={{\n                    ...inputToProps.calendarProps,\n                    month: monthTo,\n                    onMonthChange: handleMonthToChange,\n                    selectorView: 'full',\n                }}\n            />\n        </div>\n    );\n};\n","export const isDayButton = (node: HTMLElement | null) =>\n    node && node.tagName === 'BUTTON' && node.dataset.date;\n","/* eslint-disable complexity */\nimport React, { FC, MouseEvent, useCallback, useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport addMonths from 'date-fns/addMonths';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport max from 'date-fns/max';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport subMonths from 'date-fns/subMonths';\n\nimport { Calendar, usePeriodWithReset } from '@alfalab/core-components-calendar';\nimport {\n    formatDate,\n    isValidInputValue,\n    parseDateString,\n} from '@alfalab/core-components-calendar-input';\nimport {\n    DateInput,\n    DateInputProps,\n    isCompleteDateInput,\n} from '@alfalab/core-components-date-input';\n\nimport { CalendarRangeProps } from '../Component';\nimport { Divider } from '../components/divider';\nimport { useSelectionProps, useStaticViewMonthes } from '../hooks';\nimport { isDayButton } from '../utils';\n\nimport styles from './index.module.css';\n\nexport type CalendarRangeStaticProps = Omit<CalendarRangeProps, 'calendarPosition'> & {\n    /**\n     * Отображать начальный месяц слева или справа (влияет только на начальный рендер)\n     */\n    defaultMonthPosition?: 'left' | 'right';\n};\n\nexport const CalendarRangeStatic: FC<CalendarRangeStaticProps> = ({\n    className,\n    defaultMonth = startOfMonth(new Date()).getTime(),\n    defaultMonthPosition = 'left',\n    minDate,\n    maxDate,\n    valueFrom = '',\n    valueTo = '',\n    onDateFromChange = () => null,\n    onDateToChange = () => null,\n    onChange = () => null,\n    onError,\n    inputFromProps = {},\n    inputToProps = {},\n    offDays,\n    events,\n    returnInvalidDates = false,\n    dataTestId,\n}) => {\n    const [inputFromValue, setInputFromValue] = useState<string>(valueFrom);\n    const [inputToValue, setInputToValue] = useState<string>(valueTo);\n\n    let dateFrom = isValidInputValue(inputFromValue, minDate, maxDate, offDays)\n        ? parseDateString(inputFromValue).getTime()\n        : null;\n\n    const dateTo = isValidInputValue(inputToValue, dateFrom || minDate, maxDate, offDays)\n        ? parseDateString(inputToValue).getTime()\n        : null;\n\n    if (isCompleteDateInput(inputToValue) && !dateTo && !returnInvalidDates) {\n        dateFrom = null;\n    }\n\n    const bothInvalid =\n        isCompleteDateInput(inputFromValue) &&\n        isCompleteDateInput(inputToValue) &&\n        parseDateString(inputFromValue).getTime() > parseDateString(inputToValue).getTime();\n\n    const [highlightedDate, setHighlightedDate] = useState<number | undefined>(undefined);\n\n    const period = usePeriodWithReset({\n        initialSelectedFrom: dateFrom ? parseDateString(inputFromValue).getTime() : undefined,\n        initialSelectedTo: dateTo ? parseDateString(inputToValue).getTime() : undefined,\n    });\n\n    const validateInputFromValue = useCallback(\n        (value: string) => isValidInputValue(value, minDate, dateFrom || maxDate, offDays),\n        [dateFrom, maxDate, minDate, offDays],\n    );\n\n    const validateInputToValue = useCallback(\n        (value: string) => isValidInputValue(value, dateFrom || minDate, maxDate, offDays),\n\n        [dateFrom, minDate, maxDate, offDays],\n    );\n\n    const [inputFromInvalid, setInputFromInvalid] = useState<boolean>(\n        isCompleteDateInput(inputFromValue) && dateFrom === null,\n    );\n\n    const [inputToInvalid, setInputToInvalid] = useState<boolean>(\n        isCompleteDateInput(inputToValue) && dateTo === null,\n    );\n\n    const hasValidateError = bothInvalid || inputFromInvalid || inputToInvalid;\n    const {\n        calendarProps: calendarFromProps,\n        onInputChange: onInputChangeFrom,\n        ...dateInputFromProps\n    } = inputFromProps;\n    const {\n        calendarProps: calendarToProps,\n        onInputChange: onInputChangeTo,\n        ...dateInputToProps\n    } = inputToProps;\n\n    const { monthFrom, monthTo, handleMonthFromChange, handleMonthToChange } = useStaticViewMonthes(\n        {\n            selectedFrom: period.selectedFrom,\n            selectedTo: period.selectedTo,\n            defaultMonth,\n            defaultMonthPosition,\n        },\n    );\n\n    const handleValidInputFrom = useCallback(() => {\n        setInputFromInvalid(inputFromValue !== '' && !validateInputFromValue(inputFromValue));\n    }, [inputFromValue, validateInputFromValue]);\n\n    const handleValidInputTo = useCallback(() => {\n        setInputToInvalid(inputToValue !== '' && !validateInputToValue(inputToValue));\n    }, [inputToValue, validateInputToValue]);\n\n    const handleInputFromChange: Required<DateInputProps>['onChange'] = (event, payload) => {\n        setInputFromValue(payload.value);\n        onInputChangeFrom?.(event, payload);\n    };\n\n    const handleInputToChange: Required<DateInputProps>['onChange'] = (event, payload) => {\n        setInputToValue(payload.value);\n        onInputChangeTo?.(event, payload);\n    };\n\n    const handleMouseOver = useCallback((event: MouseEvent<HTMLDivElement>) => {\n        const target = event.target as HTMLElement;\n\n        const mouseOverDayButton = isDayButton(target) || isDayButton(target.parentElement);\n\n        let date;\n\n        if (mouseOverDayButton) {\n            const button =\n                target.tagName === 'BUTTON' ? target : (target.parentElement as HTMLButtonElement);\n\n            if (button.dataset.date) {\n                date = +button.dataset.date;\n            }\n        }\n\n        setHighlightedDate(date);\n    }, []);\n\n    const handleClearFrom = useCallback(() => {\n        setInputFromValue('');\n    }, []);\n\n    const handleClearTo = useCallback(() => {\n        setInputToValue('');\n    }, []);\n\n    useEffect(() => {\n        setInputFromValue(period.selectedFrom ? formatDate(period.selectedFrom) : '');\n    }, [period.selectedFrom]);\n\n    useEffect(() => {\n        setInputToValue(period.selectedTo ? formatDate(period.selectedTo) : '');\n    }, [period.selectedTo]);\n\n    useEffect(() => {\n        setInputFromValue(valueFrom);\n    }, [valueFrom]);\n\n    useEffect(() => {\n        setInputToValue(valueTo);\n    }, [valueTo]);\n\n    useEffect(() => {\n        if (!inputFromValue || isCompleteDateInput(inputFromValue)) {\n            handleValidInputFrom();\n        }\n\n        period.setStart(dateFrom || undefined);\n        if (dateTo) {\n            period.setEnd(dateTo);\n        }\n\n        if (inputFromValue !== valueFrom) {\n            onDateFromChange({\n                value: inputFromValue,\n                date: dateFrom,\n            });\n\n            onChange({\n                valueFrom: inputFromValue,\n                valueTo: inputToValue,\n                dateFrom,\n                dateTo,\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [inputFromValue]);\n\n    useEffect(() => {\n        if (!inputToValue || isCompleteDateInput(inputToValue)) {\n            handleValidInputTo();\n        }\n\n        period.setEnd(dateTo || undefined);\n        if (dateFrom) {\n            period.setStart(dateFrom);\n        }\n\n        if (inputToValue !== valueTo) {\n            // eslint-disable-next-line no-nested-ternary\n            const inputDateTo = returnInvalidDates\n                ? isCompleteDateInput(inputToValue)\n                    ? parseDateString(inputToValue).getTime()\n                    : null\n                : dateTo;\n\n            onDateToChange({\n                value: inputToValue,\n                date: inputDateTo,\n            });\n\n            onChange({\n                valueFrom: inputFromValue,\n                valueTo: inputToValue,\n                dateFrom,\n                dateTo: inputDateTo,\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [inputToValue]);\n\n    useEffect(() => {\n        if (onError) {\n            onError(hasValidateError);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [hasValidateError]);\n\n    const rangeProps = useSelectionProps(period.selectedFrom, period.selectedTo, highlightedDate);\n\n    const CalendarFromComponent = dateInputFromProps.Calendar || Calendar;\n    const CalendarToComponent = dateInputToProps.Calendar || Calendar;\n\n    const minMaxInSameMonth = minDate && maxDate && isSameMonth(minDate, maxDate);\n\n    return (\n        // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n        <div\n            className={cn(styles.component, styles.static, className)}\n            onMouseOver={handleMouseOver}\n            data-test-id={dataTestId}\n        >\n            <div>\n                <DateInput\n                    {...dateInputFromProps}\n                    mobileMode={\n                        dateInputFromProps.mobileMode === 'popover'\n                            ? 'input'\n                            : dateInputFromProps.mobileMode\n                    }\n                    value={inputFromValue}\n                    onChange={handleInputFromChange}\n                    onClear={handleClearFrom}\n                    onBlur={handleValidInputFrom}\n                    error={bothInvalid || inputFromInvalid || dateInputFromProps.error}\n                    clear={true}\n                    block={true}\n                />\n                <CalendarFromComponent\n                    {...calendarFromProps}\n                    className={cn(styles.calendar, calendarFromProps?.className)}\n                    month={monthFrom}\n                    selectorView='month-only'\n                    offDays={offDays}\n                    events={events}\n                    onChange={period.updatePeriod}\n                    onMonthChange={handleMonthFromChange}\n                    minDate={minDate}\n                    maxDate={\n                        minMaxInSameMonth\n                            ? maxDate\n                            : maxDate && max([maxDate, endOfMonth(subMonths(maxDate, 1))]).getTime()\n                    }\n                    {...rangeProps}\n                />\n            </div>\n\n            <Divider inputFromProps={inputFromProps} inputToProps={inputToProps} />\n\n            <div>\n                <DateInput\n                    {...dateInputToProps}\n                    mobileMode={\n                        dateInputToProps.mobileMode === 'popover'\n                            ? 'input'\n                            : dateInputToProps.mobileMode\n                    }\n                    value={inputToValue}\n                    onChange={handleInputToChange}\n                    onClear={handleClearTo}\n                    onBlur={handleValidInputTo}\n                    error={bothInvalid || inputToInvalid}\n                    clear={true}\n                    block={true}\n                />\n                <CalendarToComponent\n                    {...calendarToProps}\n                    className={cn(styles.calendar, calendarToProps?.className)}\n                    month={monthTo}\n                    selectorView='month-only'\n                    offDays={offDays}\n                    events={events}\n                    onChange={period.updatePeriod}\n                    onMonthChange={handleMonthToChange}\n                    minDate={\n                        minMaxInSameMonth\n                            ? minDate\n                            : minDate && startOfMonth(addMonths(minDate, 1)).getTime()\n                    }\n                    maxDate={maxDate}\n                    {...rangeProps}\n                />\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_K77I0\",\"static\":\"static_o4AQE\",\"calendar\":\"calendar_bB0Ov\"};"],"names":["CalendarRange","_ref","_ref$calendarPosition","calendarPosition","restProps","_objectWithoutProperties","_excluded","View","CalendarRangePopover","CalendarRangeStatic","_jsx","_objectSpread","Divider","inputFromProps","inputToProps","outer","label","labelView","size","className","cn","styles","_defineProperty","usePopoverViewMonthes","dateFrom","dateTo","defaultMonth","resetKey","_useState","useState","_useState2","_slicedToArray","monthFrom","setMonthFrom","_useState3","_useState4","monthTo","setMonthTo","handleMonthFromChange","useCallback","newMonthFrom","handleMonthToChange","newMonthTo","useEffect","startOfMonth","getTime","useStaticViewMonthes","_ref2","selectedFrom","selectedTo","defaultMonthPosition","initialMonthFrom","useMemo","initialMonthTo","max","addMonths","subMonths","_useState5","_useState6","_useState7","_useState8","isEqual","nextMonth","prevMonth","selectedFromMonth","undefined","selectedToMonth","fromMonthOnLeft","fromMonthOnRight","toMonthOnRight","toMonthOnLeft","fromMonthOnScreen","toMonthOnScreen","min","useSelectionProps","from","to","highlighted","rangeComplete","dates","filter","date","length","_ref$defaultMonth","Date","minDate","maxDate","_ref$valueFrom","valueFrom","_ref$valueTo","valueTo","_ref$onDateFromChange","onDateFromChange","_ref$onDateToChange","onDateToChange","_ref$onChange","onChange","onError","_ref$inputFromProps","_ref$inputToProps","offDays","events","_ref$returnInvalidDat","returnInvalidDates","dataTestId","inputFromValue","setInputFromValue","inputToValue","setInputToValue","setResetKey","isValidInputValue","parseDateString","isCompleteDateInput","inputFromInvalid","setInputFromInvalid","_useState9","_useState10","inputToInvalid","setInputToInvalid","bothInvalid","hasValidateError","_usePopoverViewMonthe","handleValidInputFrom","handleValidInputTo","handleInputFromBlur","handleInputToBlur","handleFromChange","_","payload","value","handleToChange","useDidUpdateEffect","inputDateTo","_jsxs","children","CalendarInput","useAnchorWidth","popoverPosition","error","onInputChange","handleInputFromChange","event","_inputFromProps$onInp","call","onBlur","calendarProps","month","onMonthChange","selectorView","handleInputToChange","_inputToProps$onInput","isDayButton","node","tagName","dataset","_ref$defaultMonthPosi","highlightedDate","setHighlightedDate","period","usePeriodWithReset","initialSelectedFrom","initialSelectedTo","validateInputFromValue","validateInputToValue","calendarFromProps","onInputChangeFrom","dateInputFromProps","calendarToProps","onInputChangeTo","dateInputToProps","_excluded2","_useStaticViewMonthes","handleMouseOver","target","parentElement","button","handleClearFrom","handleClearTo","formatDate","setStart","setEnd","rangeProps","CalendarFromComponent","Calendar","CalendarToComponent","minMaxInSameMonth","isSameMonth","onMouseOver","DateInput","mobileMode","onClear","clear","block","updatePeriod","endOfMonth"],"sourceRoot":""}