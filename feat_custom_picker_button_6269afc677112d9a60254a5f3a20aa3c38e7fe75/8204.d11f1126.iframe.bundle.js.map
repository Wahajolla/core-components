{"version":3,"file":"8204.d11f1126.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./packages/confirmation-v1/src/index.module.css?7e42","webpack://@alfalab/core-components/./packages/confirmation-v1/src/component.tsx","webpack://@alfalab/core-components/./packages/confirmation-v1/src/components/countdown-loader/index.module.css?a030","webpack://@alfalab/core-components/./packages/confirmation-v1/src/components/countdown-loader/component.tsx","webpack://@alfalab/core-components/./packages/confirmation-v1/src/components/countdown/index.module.css?2e3a","webpack://@alfalab/core-components/./packages/confirmation-v1/src/components/countdown/component.tsx","webpack://@alfalab/core-components/./packages/confirmation-v1/src/components/code-input/index.module.css?0073","webpack://@alfalab/core-components/./packages/confirmation-v1/src/components/code-input/component.tsx","webpack://@alfalab/core-components/./packages/confirmation-v1/src/components/code-input/utils.ts","webpack://@alfalab/core-components/./packages/confirmation-v1/src/components/sign-confirmation/index.module.css?7b1a","webpack://@alfalab/core-components/./packages/confirmation-v1/src/components/sign-confirmation/component.tsx","webpack://@alfalab/core-components/./packages/confirmation-v1/src/components/overlimit/index.module.css?2731","webpack://@alfalab/core-components/./packages/confirmation-v1/src/components/overlimit/component.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_mU8xL\",\"error\":\"error_fAMFo\",\"errorHeader\":\"errorHeader_F_0G4\",\"errorText\":\"errorText_TCLue\",\"phoneHintWrap\":\"phoneHintWrap_FU8L2\",\"phoneHintText\":\"phoneHintText_KixaP\",\"phonesWrap\":\"phonesWrap_a2gOY\",\"phoneWrap\":\"phoneWrap_burG5\",\"phoneDescription\":\"phoneDescription_tbkwr\",\"center\":\"center_w15SC\"};","import React, { forwardRef, ReactNode, useCallback, useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { Link } from '@alfalab/core-components-link';\n\nimport { Overlimit, SignConfirmation } from './components';\n\nimport styles from './index.module.css';\n\nexport type ContentAlign = 'left' | 'center';\n\nexport type ConfirmationV1Props = {\n    /**\n     * Значение поля ввода\n     */\n    code: string;\n\n    /**\n     * Флаг состояния обработки введенного кода.\n     */\n    codeChecking?: boolean;\n\n    /**\n     * Флаг состояния отправки кода.\n     */\n    codeSending?: boolean;\n\n    /**\n     * Состояние ошибки подписания\n     */\n    error?: boolean;\n\n    /**\n     * Состояние ошибки лимитов - превышено кол-во попыток ввода или запросов кода\n     */\n    errorOverlimit?: boolean;\n\n    /**\n     * Состояние критической ошибки лимитов - превышены все лимиты и попытки, пользователя блокируют\n     */\n    errorOverlimitIsFatal?: boolean;\n\n    /**\n     * Текст ошибки подписания\n     */\n    errorText?: string;\n\n    /**\n     * Дополнительный контент\n     */\n    additionalContent?: ReactNode;\n\n    /**\n     * Флаг критичности ошибки подписания.\n     * Если true - ошибка подписания рисуется на экране без поля ввода, но с кнопкой \"Запросить код\"\n     * Если false - ошибка подписания рисуется под полем ввода кода\n     */\n    errorIsFatal?: boolean;\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Номер телефона, на который отправляется сообщение.\n     */\n    phone?: string;\n\n    /**\n     * Управление необходимостью маскировать номер телефона\n     */\n    hasPhoneMask?: boolean;\n\n    /**\n     * Количество символов, которое можно ввести в поле ввода подписания до того, как произойдет автоотправка\n     */\n    requiredCharAmount?: number;\n\n    /**\n     * Управление отображением таймера с кнопкой \"Запросить код\"\n     */\n    hasSmsCountdown?: boolean;\n\n    /**\n     * Длительность обратного отсчета на кнопке повторного запроса сообщения, в милисекундах\n     */\n    countdownDuration?: number;\n\n    /**\n     * Заголовок экрана подписания\n     */\n    signTitle?: string | React.ReactNode;\n\n    /**\n     * Заголовок экрана ошибки лимитов\n     */\n    overlimitTitle?: string;\n\n    /**\n     * Текстовое описание блокировки формы при превышении лимитов\n     */\n    overlimitText?: string;\n\n    /**\n     * Длительно блокировки при превышении лимитов, в милисекундах\n     */\n    overlimitCountdownDuration?: number;\n\n    /**\n     * Заголовок экрана блокирующей ошибки\n     */\n    errorTitle?: string;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    dataTestId?: string;\n\n    /**\n     * Текст лоадера при проверке кода\n     */\n    codeCheckingText?: string;\n\n    /**\n     * Текст лоадера при отправке кода\n     */\n    codeSendingText?: string;\n\n    /**\n     * Текст кнопки при блокирующей ошибке\n     */\n    buttonErrorText?: string;\n\n    /**\n     * Текст кнопки \"Вернуться назад\" на экране помощи\n     */\n    buttonReturnText?: string;\n\n    /**\n     * Текст кнопки \"Запросить новый код\"\n     */\n    buttonRetryText?: string;\n\n    /**\n     * Позиционирование контента\n     */\n    alignContent?: ContentAlign;\n\n    /**\n     * Сообщение, если не осталось попыток ввода кода.\n     * Кнопка повторной отправки смс при этом скрывается.\n     */\n    noAttemptsLeftMessage?: string;\n\n    /**\n     * Кастомный контент для компонента Countdown\n     */\n    countdownContent?: ReactNode;\n\n    /**\n     * Обработчик события завершения ввода кода подписания\n     */\n    onInputFinished: ({ code }: { code: string }) => void;\n\n    /**\n     * Обработчик события изменения значения поля ввода кода подписания\n     */\n    onInputChange: ({ code }: { code: string }) => void;\n\n    /**\n     * Обработчик события нажатия на кнопку \"Запросить код\"\n     */\n    onSmsRetryClick: () => void;\n\n    /**\n     * Обработчик события нажатия на кнопку \"Запросить код\" в блоке превышение лимитов\n     */\n    onOverlimitSmsRetryClick?: () => void;\n\n    /**\n     * Обработчик события завершения обратного отсчета для повторного запроса сообщения\n     */\n    onCountdownFinished?: () => void;\n\n    /**\n     * Обработчик события завершения обратного отсчета для блокировки формы\n     */\n    onOverlimitCountdownFinished?: () => void;\n\n    /**\n     * Обработчик события нажатия на ссылку \"не приходит сообщение?\"\n     */\n    onSmsHintLinkClick?: () => void;\n\n    /**\n     * Обработчик события нажатия на кнопку buttonErrorText (по дефолту \"Понятно\"), которая появляется при критической ошибке.\n     * Если не передан, то вызывается onSmsRetryClick\n     */\n    onActionWithFatalError?: () => void;\n};\n\n/**\n * @deprecated\n */\n\nexport const ConfirmationV1 = forwardRef<HTMLDivElement, ConfirmationV1Props>(\n    (\n        {\n            additionalContent,\n            className,\n            countdownDuration = 60000,\n            dataTestId,\n            errorIsFatal,\n            errorTitle = 'Превышено количество попыток ввода кода',\n            error = false,\n            errorOverlimit = false,\n            errorOverlimitIsFatal = false,\n            errorText,\n            hasPhoneMask = true,\n            hasSmsCountdown = true,\n            phone,\n            requiredCharAmount = 5,\n            signTitle = 'Введите код из\\xa0сообщения',\n            overlimitTitle = 'Превышено количество\\n попыток ввода кода',\n            overlimitText = 'Повторное подтверждение кодом из SMS\\n будет возможно через',\n            overlimitCountdownDuration,\n            code,\n            codeSending = false,\n            codeChecking = false,\n            codeCheckingText = 'Проверка кода',\n            codeSendingText = 'Отправляем код',\n            buttonErrorText = 'Понятно',\n            buttonReturnText = 'Вернуться назад',\n            buttonRetryText = 'Запросить новый код',\n            alignContent = 'left',\n            noAttemptsLeftMessage,\n            countdownContent,\n            onInputFinished,\n            onSmsRetryClick,\n            onOverlimitSmsRetryClick,\n            onActionWithFatalError,\n            onCountdownFinished,\n            onOverlimitCountdownFinished,\n            onInputChange,\n            onSmsHintLinkClick,\n        },\n        ref,\n    ) => {\n        const [showHint, setShowHint] = useState(false);\n\n        const shouldShowFatalError = errorIsFatal && Boolean(errorText);\n\n        const shouldShowOverlimitError = !errorIsFatal && !showHint && errorOverlimit;\n\n        const shouldShowSignComponent =\n            !showHint && !shouldShowFatalError && !shouldShowOverlimitError;\n\n        const shouldShowHint = showHint && !shouldShowFatalError && !shouldShowOverlimitError;\n\n        const nonFatalError = errorIsFatal ? '' : errorText;\n\n        const inputRef = useRef<HTMLInputElement>(null);\n\n        const handleSmsRetryClick = useCallback(() => {\n            onSmsRetryClick();\n        }, [onSmsRetryClick]);\n\n        const handleOverlimitSmsRetryClick = useCallback(() => {\n            if (onOverlimitSmsRetryClick) {\n                onOverlimitSmsRetryClick();\n            }\n        }, [onOverlimitSmsRetryClick]);\n\n        const handleSmsRetryFromHintClick = useCallback(() => {\n            setShowHint(false);\n\n            if (!noAttemptsLeftMessage) {\n                onSmsRetryClick();\n            }\n        }, [onSmsRetryClick, noAttemptsLeftMessage]);\n\n        const handleCountdownFinished = useCallback(() => {\n            if (onCountdownFinished) {\n                onCountdownFinished();\n            }\n        }, [onCountdownFinished]);\n\n        const handleOverlimitCountdownFinished = useCallback(() => {\n            if (onOverlimitCountdownFinished) {\n                onOverlimitCountdownFinished();\n            }\n        }, [onOverlimitCountdownFinished]);\n\n        const handleSmsHintLinkClick = useCallback(() => {\n            setShowHint(true);\n\n            if (onSmsHintLinkClick) {\n                onSmsHintLinkClick();\n            }\n        }, [onSmsHintLinkClick]);\n\n        const handleErrorSmsRetryClick = useCallback(() => {\n            if (onActionWithFatalError) {\n                onActionWithFatalError();\n            } else {\n                onSmsRetryClick();\n            }\n        }, [onActionWithFatalError, onSmsRetryClick]);\n\n        useEffect(() => {\n            if (inputRef.current) {\n                inputRef.current.focus();\n            }\n        }, []);\n\n        return (\n            <div\n                className={cn(styles.component, styles[alignContent], className)}\n                ref={ref}\n                data-test-id={dataTestId}\n            >\n                {shouldShowSignComponent && (\n                    <SignConfirmation\n                        codeChecking={codeChecking}\n                        codeSending={codeSending}\n                        smsHintVisible={!codeChecking}\n                        additionalContent={additionalContent}\n                        requiredCharAmount={requiredCharAmount}\n                        hasSmsCountdown={hasSmsCountdown}\n                        countdownDuration={countdownDuration}\n                        phone={phone}\n                        code={code}\n                        hasPhoneMask={hasPhoneMask}\n                        errorText={nonFatalError || ''}\n                        error={error}\n                        title={signTitle}\n                        buttonRetryText={buttonRetryText}\n                        inputRef={inputRef}\n                        codeCheckingText={codeCheckingText}\n                        codeSendingText={codeSendingText}\n                        alignContent={alignContent}\n                        noAttemptsLeftMessage={noAttemptsLeftMessage}\n                        countdownContent={countdownContent}\n                        onInputFinished={onInputFinished}\n                        onInputChange={onInputChange}\n                        onSmsRetryClick={handleSmsRetryClick}\n                        onCountdownFinished={handleCountdownFinished}\n                        onSmsHintLinkClick={handleSmsHintLinkClick}\n                    />\n                )}\n\n                {shouldShowOverlimitError && (\n                    <Overlimit\n                        duration={overlimitCountdownDuration}\n                        title={overlimitTitle}\n                        text={overlimitText}\n                        hasFatalError={errorOverlimitIsFatal}\n                        buttonRetryText={buttonRetryText}\n                        onOverlimitRepeatSms={handleOverlimitSmsRetryClick}\n                        onOverlimitCountdownFinished={handleOverlimitCountdownFinished}\n                    />\n                )}\n\n                {shouldShowFatalError && (\n                    <div className={styles.error} role='alert'>\n                        <span className={styles.errorHeader}>{errorTitle}</span>\n\n                        <span className={styles.errorText}>{errorText}</span>\n\n                        <Button size='xs' view='secondary' onClick={handleErrorSmsRetryClick}>\n                            {buttonErrorText}\n                        </Button>\n                    </div>\n                )}\n\n                {shouldShowHint && (\n                    <div className={styles.phoneHintWrap}>\n                        <span className={styles.errorHeader}>Не&nbsp;приходит сообщение?</span>\n\n                        <span className={styles.phoneHintText}>\n                            Если у&nbsp;вас сменился номер телефона, пожалуйста, обратитесь\n                            в&nbsp;любое отделение банка.\n                        </span>\n\n                        <div className={styles.phonesWrap}>\n                            <div className={styles.phoneWrap}>\n                                <Link className={styles.phoneLink} href='tel:+78002000000'>\n                                    8 800 200-00-00\n                                </Link>\n\n                                <span className={styles.phoneDescription}>\n                                    {' '}\n                                    &mdash;&nbsp;для звонков по&nbsp;России\n                                </span>\n                            </div>\n\n                            <div className={styles.phoneWrap}>\n                                <Link className={styles.phoneLink} href='tel:+74957888878'>\n                                    +7 495 788-88-78\n                                </Link>\n\n                                <span className={styles.phoneDescription}>\n                                    {' '}\n                                    &mdash;&nbsp;в&nbsp;Москве и&nbsp;за&nbsp;границей\n                                </span>\n                            </div>\n                        </div>\n\n                        <Button\n                            className={styles.repeatButton}\n                            size='xs'\n                            view='secondary'\n                            onClick={handleSmsRetryFromHintClick}\n                        >\n                            {buttonReturnText}\n                        </Button>\n                    </div>\n                )}\n            </div>\n        );\n    },\n);\n\n/**\n * Для отображения в сторибуке\n */\nConfirmationV1.defaultProps = {\n    countdownDuration: 60000,\n    errorTitle: 'Превышено количество попыток ввода кода',\n    hasPhoneMask: true,\n    hasSmsCountdown: true,\n    requiredCharAmount: 5,\n    signTitle: 'Введите код из\\xa0сообщения',\n    codeSending: false,\n    codeChecking: false,\n    codeCheckingText: 'Проверка кода',\n    codeSendingText: 'Отправляем код',\n    buttonErrorText: 'Понятно',\n    buttonReturnText: 'Вернуться назад',\n    buttonRetryText: 'Запросить новый код',\n    alignContent: 'left',\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"circle\":\"circle_Fz6NA\"};","import React, { FC } from 'react';\n\nimport styles from './index.module.css';\n\ntype Props = {\n    progress: number; // 0-1\n    className: string;\n};\n\nconst SIZE = 16;\nconst STROKE_WIDTH = 2;\n\nconst CENTER = SIZE / 2;\nconst RADIUS = CENTER - STROKE_WIDTH / 2;\n/** Длина окружности */\nconst CIRCUMFERENCE = Math.PI * RADIUS * 2;\n\nexport const CountdownLoader: FC<Props> = ({ progress, className }) => {\n    const value = Math.min(progress, 1);\n\n    const strokeDasharray = CIRCUMFERENCE.toFixed(2);\n    const strokeDashoffset = (value * CIRCUMFERENCE).toFixed(2);\n\n    return (\n        <svg width={SIZE} height={SIZE} viewBox={`0 0 ${SIZE} ${SIZE}`} className={className}>\n            <circle\n                cx={CENTER}\n                cy={CENTER}\n                r={RADIUS}\n                strokeDasharray={strokeDasharray}\n                strokeDashoffset={strokeDashoffset}\n                transform={`rotate(-90 ${CENTER} ${CENTER})`}\n                className={styles.circle}\n            />\n        </svg>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_f0pPW\",\"hasError\":\"hasError_v4ATZ\",\"getCodeButton\":\"getCodeButton_QZaYZ\",\"info\":\"info_gZzo7\",\"customContent\":\"customContent_b76Kh\",\"loaderWrap\":\"loaderWrap_Aym2P\",\"loader\":\"loader_TDeBX\",\"center\":\"center_XXeFJ\",\"timePassed\":\"timePassed_X21OC\",\"noAttemptsLeftMessage\":\"noAttemptsLeftMessage_jo7XJ\"};","import React, { FC, MouseEvent, ReactNode, useCallback, useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { usePrevious } from '@alfalab/hooks';\nimport { phoneNumber } from '@alfalab/utils';\n\nimport { CountdownLoader } from '../countdown-loader';\n\nimport styles from './index.module.css';\n\n/**\n * TODO: Вынести это в utils\n * Форматирование миллисекунд в hh:mm:ss.\n *\n * @param {Number} ms миллисекунды\n * @returns {String} время в формате mm:ss\n */\nexport function formatMsAsMinutes(ms: number) {\n    const totalSeconds = Math.ceil(ms / 1000);\n    const totalMinutes = Math.floor(totalSeconds / 60);\n    const totalHours = Math.floor(totalMinutes / 60);\n\n    const seconds = totalSeconds % 60;\n    const paddedSeconds = `00${seconds}`.slice(-2);\n\n    if (totalHours > 0) {\n        const minutes = totalMinutes % 60;\n\n        const paddedMinutes = `00${minutes}`.slice(-2);\n        const paddedHours = `00${totalHours}`.slice(-2);\n\n        return `${paddedHours}:${paddedMinutes}:${paddedSeconds}`;\n    }\n\n    const paddedMinutes = `00${totalMinutes}`.slice(-2);\n\n    return `${paddedMinutes}:${paddedSeconds}`;\n}\n\nexport type CountdownProps = {\n    duration: number;\n    hasPhoneMask: boolean;\n    phone?: string;\n    alignContent: string;\n    buttonRetryText: string;\n    noAttemptsLeftMessage?: string;\n    hasError: boolean;\n    content?: ReactNode;\n    onCountdownFinished?: () => void;\n    onRepeatSms: (event: MouseEvent) => void;\n    children?: ReactNode;\n};\n\ntype ContainerProps = Pick<CountdownProps, 'alignContent' | 'hasError' | 'children'>;\n\nconst Container: FC<ContainerProps> = ({ alignContent, hasError, children }) => (\n    <div\n        className={cn(styles.component, styles[alignContent], {\n            [styles.hasError]: hasError,\n        })}\n    >\n        {children}\n    </div>\n);\n\nexport const Countdown: FC<CountdownProps> = ({\n    duration = 5000,\n    phone = '',\n    hasPhoneMask = true,\n    buttonRetryText,\n    alignContent,\n    noAttemptsLeftMessage,\n    hasError,\n    content,\n    onRepeatSms,\n    onCountdownFinished,\n}) => {\n    const timerId = useRef(0);\n\n    const start = useRef(0);\n\n    const [repeatSmsButtonShow, setRepeatSmsButtonShow] = useState(false);\n\n    const [timePassed, setTimePassed] = useState(0);\n\n    const noAttemptsLeftMessagePrev = usePrevious(noAttemptsLeftMessage);\n\n    const stopTimer = useCallback(() => {\n        window.clearInterval(timerId.current);\n    }, []);\n\n    const updateProgress = useCallback(() => {\n        const passed = Date.now() - start.current;\n\n        if (passed >= duration) {\n            setRepeatSmsButtonShow(true);\n\n            if (onCountdownFinished) {\n                onCountdownFinished();\n            }\n\n            stopTimer();\n        } else {\n            setTimePassed(passed);\n        }\n    }, [duration, onCountdownFinished, stopTimer]);\n\n    const startTimer = useCallback(() => {\n        start.current = Date.now();\n\n        updateProgress();\n\n        timerId.current = window.setInterval(updateProgress, 50);\n    }, [updateProgress]);\n\n    const handleRepeatSmsButtonClick = useCallback(\n        (event: MouseEvent) => {\n            setRepeatSmsButtonShow(false);\n\n            if (onRepeatSms) {\n                onRepeatSms(event);\n            }\n\n            startTimer();\n        },\n        [onRepeatSms, startTimer],\n    );\n\n    useEffect(() => {\n        startTimer();\n\n        return () => {\n            stopTimer();\n        };\n    }, [startTimer, stopTimer]);\n\n    useEffect(() => {\n        // Если кончились попытки ввода кода, то останавливаем таймер\n        if (!noAttemptsLeftMessagePrev && noAttemptsLeftMessage) {\n            stopTimer();\n        }\n    }, [noAttemptsLeftMessage, noAttemptsLeftMessagePrev, stopTimer]);\n\n    const progress = timePassed / duration;\n\n    const formattedPhone = phoneNumber.format(phone);\n\n    const retryButton = (\n        <Button\n            size='xs'\n            view='secondary'\n            onClick={handleRepeatSmsButtonClick}\n            className={styles.getCodeButton}\n        >\n            {buttonRetryText}\n        </Button>\n    );\n\n    if (content) {\n        return (\n            <Container alignContent={alignContent} hasError={hasError}>\n                <div className={styles.customContent}>{content}</div>\n\n                {retryButton}\n            </Container>\n        );\n    }\n\n    return (\n        <Container alignContent={alignContent} hasError={hasError}>\n            {phone && !hasError && (\n                <div>\n                    Код отправлен на\n                    {' '}\n                    {hasPhoneMask ? phoneNumber.mask(formattedPhone) : formattedPhone}\n                </div>\n            )}\n\n            {/* eslint-disable-next-line no-nested-ternary */}\n            {noAttemptsLeftMessage ? (\n                <div className={styles.noAttemptsLeftMessage}>{noAttemptsLeftMessage}</div>\n            ) : repeatSmsButtonShow ? (\n                retryButton\n            ) : (\n                <div>\n                    <div className={styles.info}>Запросить повторно можно через</div>\n                    <div className={styles.loaderWrap}>\n                        <CountdownLoader progress={progress} className={styles.loader} />\n\n                        <div className={styles.timePassed}>\n                            {formatMsAsMinutes(duration - timePassed)}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </Container>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_TOs9_\",\"input\":\"input_rkFQ2\",\"hasError\":\"hasError_VUtp4\",\"center\":\"center_xuNlf\",\"disabled\":\"disabled_RZBJ6\",\"compact\":\"compact_biQFs\",\"shake\":\"shake_jrRT6\"};","import React, {\n    ChangeEvent,\n    forwardRef,\n    KeyboardEvent,\n    useCallback,\n    useEffect,\n    useImperativeHandle,\n    useRef,\n} from 'react';\nimport cn from 'classnames';\n\nimport { usePrevious } from '@alfalab/hooks';\n\nimport { ContentAlign } from '../../component';\n\nimport { mergeArrays } from './utils';\n\nimport styles from './index.module.css';\n\ntype CodeInputProps = {\n    processing: boolean;\n    value: string;\n    slotsCount: number;\n    error: boolean;\n    className?: string;\n    alignContent: ContentAlign;\n    handleChange: (code: string) => void;\n    handleInputKeyDown: (event: KeyboardEvent) => void;\n};\n\ntype SetInputRef = (params: { node: HTMLInputElement; index: number }) => void;\n\ntype InputProps = {\n    index: number;\n    value: string;\n    slotsCount: number;\n    error: boolean;\n    processing: boolean;\n    alignContent: ContentAlign;\n    focus: (inputIndex: number) => void;\n    handleInputKeyDown: (event: KeyboardEvent) => void;\n    setRef: SetInputRef;\n    handleChange: (code: string) => void;\n};\n\ntype InputRef = HTMLInputElement | null;\n\nconst Input = ({\n    index,\n    slotsCount,\n    error,\n    processing,\n    value,\n    alignContent,\n    handleChange,\n    handleInputKeyDown,\n    setRef,\n    focus,\n}: InputProps) => {\n    const splittedValue = value.split('');\n\n    const inputRef = useRef<InputRef>(null);\n\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { value: targetValue } = event.target;\n\n        if (/^\\d$/.test(targetValue)) {\n            const newValues = [...splittedValue];\n\n            newValues[index] = targetValue;\n\n            handleChange(newValues.join(''));\n        } else if (/^\\d{1,}$/.test(targetValue) && index !== slotsCount - 1) {\n            /*\n             * если пользователь хочет ввести более 1 цифры в инпут,\n             * то предполагаем, что это вставка кода (например, из смс)\n             */\n\n            const newValues = mergeArrays({\n                sourceArray: splittedValue,\n                targetArray: targetValue.split(''),\n                startIndex: index,\n                resultArrayLength: slotsCount,\n            });\n\n            handleChange(newValues.join(''));\n        }\n    };\n\n    const onInputKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n        const { key } = event;\n\n        const newValues = [...splittedValue];\n\n        switch (key) {\n            case 'Backspace':\n            case 'Delete':\n                newValues[index] = '';\n                handleChange(newValues.join('').trim());\n\n                if (index !== 0) {\n                    focus(index - 1);\n                }\n\n                break;\n            case 'ArrowRight':\n                if (index !== slotsCount - 1) {\n                    focus(index + 1);\n                }\n                break;\n            case 'ArrowLeft':\n                if (index !== 0) {\n                    focus(index - 1);\n                }\n                break;\n            case 'Home':\n                focus(0);\n                break;\n            case 'End':\n                focus(slotsCount - 1);\n                break;\n        }\n\n        handleInputKeyDown(event);\n    };\n\n    const handleRef = (node: HTMLInputElement) => {\n        inputRef.current = node;\n\n        setRef({ node, index });\n    };\n\n    return (\n        <input\n            className={cn(styles.input, styles[alignContent], {\n                [styles.hasError]: error,\n                [styles.disabled]: processing,\n            })}\n            disabled={processing}\n            value={splittedValue[index] || ''}\n            autoComplete={index === 0 ? 'one-time-code' : ''}\n            inputMode='numeric'\n            pattern='[0-9]*'\n            onChange={onChange}\n            onKeyDown={onInputKeyDown}\n            ref={handleRef}\n        />\n    );\n};\n\nexport const CodeInput = forwardRef<HTMLInputElement, CodeInputProps>(\n    (\n        {\n            processing,\n            value = '',\n            slotsCount,\n            error,\n            handleInputKeyDown,\n            handleChange,\n            className,\n            alignContent,\n        },\n        ref,\n    ) => {\n        const inputs = useRef<HTMLInputElement[]>([]);\n\n        useImperativeHandle(ref, () => inputs.current[0]);\n\n        const prevValue = usePrevious(value) || '';\n\n        const focus = useCallback((index: number) => {\n            const input = inputs.current[index];\n\n            if (input) {\n                input.focus();\n                input.setSelectionRange(1, 1);\n            }\n        }, []);\n\n        const setRef: SetInputRef = useCallback(({ node, index }) => {\n            inputs.current[index] = node;\n        }, []);\n\n        /**\n         * Устанавливаем фокус на инпуте:\n         * 1) если код введен неверно\n         * 2) по нажатию кнопки 'Запросить код'\n         */\n        useEffect(() => {\n            const inputIndex = value.length === slotsCount ? value.length - 1 : value.length;\n\n            const needFocus = !processing || error;\n\n            if (needFocus && value.length === prevValue.length) {\n                focus(inputIndex);\n            }\n        }, [focus, error, slotsCount, value.length, prevValue.length, processing]);\n\n        useEffect(() => {\n            if (value.length > prevValue.length && value.length < slotsCount) {\n                /**\n                 * Если value.length увеличился - ставим фокус на следующем инпуте\n                 */\n                const nextInputIndex = value.length;\n\n                focus(nextInputIndex);\n            } else if (value.length <= prevValue.length && value.length > 0) {\n                /**\n                 * Если value.length уменьшился - ставим фокус на предыдущем инпуте\n                 */\n                const nextInputIndex = value.length - 1;\n\n                focus(nextInputIndex);\n            }\n        }, [value.length, prevValue.length, slotsCount, focus]);\n\n        return (\n            <div\n                className={cn(styles.component, className, {\n                    [styles.shake]: Boolean(error),\n                    [styles.compact]: slotsCount > 6,\n                })}\n            >\n                {new Array(slotsCount).fill('').map((_, index) => (\n                    <Input\n                        value={value}\n                        index={index}\n                        error={error}\n                        processing={processing}\n                        slotsCount={slotsCount}\n                        alignContent={alignContent}\n                        handleChange={handleChange}\n                        handleInputKeyDown={handleInputKeyDown}\n                        setRef={setRef}\n                        focus={focus}\n                        // eslint-disable-next-line react/no-array-index-key\n                        key={index}\n                    />\n                ))}\n            </div>\n        );\n    },\n);\n","/**\n * Начиная с указанного индекса, заменяет элементы исходного массива\n */\nexport const mergeArrays = ({\n    sourceArray,\n    targetArray,\n    startIndex,\n    resultArrayLength,\n}: {\n    sourceArray: string[];\n    targetArray: string[];\n    startIndex: number;\n    resultArrayLength: number;\n}) => {\n    let insertedElemIndex = 0;\n\n    const result = new Array(resultArrayLength).fill('');\n\n    return result.map((_, index) => {\n        if (index < startIndex) {\n            return sourceArray[index] || '';\n        }\n\n        // eslint-disable-next-line no-plusplus\n        return targetArray[insertedElemIndex++] || sourceArray[index] || '';\n    });\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_Qgj7w\",\"countdown\":\"countdown_NvqnP\",\"hidden\":\"hidden_ou2yh\",\"header\":\"header_GLygM\",\"inputContainer\":\"inputContainer_SXsbR\",\"smsComeLinkWrap\":\"smsComeLinkWrap_jpnlZ\",\"smsComeLink\":\"smsComeLink_3eS4L\",\"error\":\"error_HZZRe\",\"loaderWrap\":\"loaderWrap_js2cR\",\"loaderText\":\"loaderText_sK5e1\",\"center\":\"center_dGZ5p\",\"codeInput\":\"codeInput_fy8mz\"};","import React, { FC, KeyboardEvent, MutableRefObject, ReactNode, useCallback } from 'react';\nimport cn from 'classnames';\n\nimport { Link } from '@alfalab/core-components-link';\nimport { Loader } from '@alfalab/core-components-loader';\n\nimport { ContentAlign } from '../../component';\nimport { CodeInput } from '../code-input';\nimport { Countdown } from '../countdown';\n\nimport styles from './index.module.css';\n\nexport type SignConfirmationProps = {\n    codeChecking: boolean;\n    codeSending: boolean;\n    smsHintVisible: boolean;\n    requiredCharAmount: number;\n    countdownDuration: number;\n    additionalContent: React.ReactNode;\n    hasPhoneMask: boolean;\n    phone?: string;\n    code: string;\n    errorText: string;\n    error: boolean;\n    title: string | React.ReactNode;\n    codeCheckingText: string;\n    codeSendingText: string;\n    hasSmsCountdown: boolean;\n    inputRef: MutableRefObject<HTMLInputElement | null>;\n    alignContent: ContentAlign;\n    noAttemptsLeftMessage?: string;\n    buttonRetryText: string;\n    countdownContent?: ReactNode;\n    onInputFinished: ({ code }: { code: string }) => void;\n    onInputChange: ({ code }: { code: string }) => void;\n    onSmsRetryClick: (event: React.MouseEvent) => void;\n    onCountdownFinished: () => void;\n    onSmsHintLinkClick: (event: React.MouseEvent) => void;\n};\n\nexport const SignConfirmation: FC<SignConfirmationProps> = ({\n    codeChecking,\n    codeSending,\n    smsHintVisible,\n    requiredCharAmount,\n    countdownDuration,\n    additionalContent,\n    hasPhoneMask,\n    phone,\n    code: inputValue,\n    error,\n    errorText,\n    title,\n    hasSmsCountdown,\n    inputRef,\n    codeCheckingText,\n    codeSendingText,\n    alignContent,\n    noAttemptsLeftMessage,\n    buttonRetryText,\n    countdownContent,\n    onInputFinished,\n    onInputChange,\n    onSmsRetryClick,\n    onCountdownFinished,\n    onSmsHintLinkClick,\n}) => {\n    const processing = codeChecking || codeSending;\n\n    const displayedError = processing ? '' : errorText;\n\n    const handleInputKeyDown = useCallback(\n        (event: KeyboardEvent) => {\n            if (event.key === 'Enter') {\n                onInputFinished({ code: (event.target as HTMLInputElement).value });\n            }\n        },\n        [onInputFinished],\n    );\n\n    const handleInputFinished = useCallback(\n        (code: string) => {\n            onInputFinished({ code });\n\n            if (inputRef.current) {\n                inputRef.current.blur();\n            }\n        },\n        [onInputFinished, inputRef],\n    );\n\n    const handleInputChange = useCallback(\n        (code: string) => {\n            if (code.length === requiredCharAmount) {\n                handleInputFinished(code);\n            }\n\n            onInputChange({ code });\n        },\n        [handleInputFinished, onInputChange, requiredCharAmount],\n    );\n\n    return (\n        <div className={cn(styles.component, styles[alignContent])}>\n            {typeof title === 'string' ? <span className={styles.header}>{title}</span> : title}\n\n            <div className={styles.inputContainer}>\n                <CodeInput\n                    processing={processing}\n                    error={error}\n                    value={inputValue}\n                    ref={inputRef}\n                    slotsCount={requiredCharAmount}\n                    className={styles.codeInput}\n                    alignContent={alignContent}\n                    handleChange={handleInputChange}\n                    handleInputKeyDown={handleInputKeyDown}\n                />\n\n                {displayedError && (\n                    <div className={styles.error} role='alert'>\n                        {displayedError}\n                    </div>\n                )}\n            </div>\n\n            {processing && (\n                <div className={styles.loaderWrap}>\n                    <Loader />\n\n                    <span className={styles.loaderText}>\n                        {codeChecking ? codeCheckingText : codeSendingText}\n                    </span>\n                </div>\n            )}\n\n            {hasSmsCountdown && (\n                <div className={cn('countdown', styles.countdown, { [styles.hidden]: processing })}>\n                    <Countdown\n                        duration={countdownDuration}\n                        phone={phone}\n                        hasPhoneMask={hasPhoneMask}\n                        alignContent={alignContent}\n                        noAttemptsLeftMessage={noAttemptsLeftMessage}\n                        hasError={Boolean(displayedError)}\n                        buttonRetryText={buttonRetryText}\n                        content={countdownContent}\n                        onRepeatSms={onSmsRetryClick}\n                        onCountdownFinished={onCountdownFinished}\n                    />\n                </div>\n            )}\n\n            {smsHintVisible && (\n                <div className={styles.smsComeLinkWrap}>\n                    <Link\n                        onClick={onSmsHintLinkClick}\n                        className={styles.smsComeLink}\n                        view='secondary'\n                        pseudo={true}\n                    >\n                        Не приходит сообщение?\n                    </Link>\n                </div>\n            )}\n\n            <div>{additionalContent}</div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"component\":\"component_ewb4j\",\"title\":\"title_F0GNe\",\"description\":\"description_PKKvK\",\"countdown\":\"countdown_CunOQ\",\"loader\":\"loader_Aq7dA\",\"timePassed\":\"timePassed_R3NtM\",\"getCodeButton\":\"getCodeButton_dY3Rl\",\"alertIcon\":\"alertIcon_Mo31l\"};","import React, { FC, MouseEvent, useCallback, useEffect, useRef, useState } from 'react';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { CrossCircleMIcon } from '@alfalab/icons-glyph/CrossCircleMIcon';\n\nimport { formatMsAsMinutes } from '../countdown';\nimport { CountdownLoader } from '../countdown-loader';\n\nimport styles from './index.module.css';\n\nexport type OverlimitProps = {\n    duration?: number;\n    buttonRetryText: string;\n    hasFatalError: boolean;\n    title: string;\n    text: string;\n    onOverlimitCountdownFinished: () => void;\n    onOverlimitRepeatSms: (event: MouseEvent) => void;\n};\n\nexport const Overlimit: FC<OverlimitProps> = ({\n    duration = 60000,\n    buttonRetryText,\n    hasFatalError,\n    onOverlimitRepeatSms,\n    onOverlimitCountdownFinished,\n    text,\n    title,\n}) => {\n    const timerId = useRef(0);\n\n    const start = useRef(0);\n\n    const [isBlockingOver, setIsBlockingOver] = useState(false);\n\n    const [timePassed, setTimePassed] = useState(0);\n\n    const stopTimer = useCallback(() => {\n        window.clearInterval(timerId.current);\n    }, []);\n\n    const updateProgress = useCallback(() => {\n        const passed = Date.now() - start.current;\n\n        if (passed >= duration) {\n            setIsBlockingOver(true);\n\n            if (onOverlimitCountdownFinished) {\n                onOverlimitCountdownFinished();\n            }\n\n            stopTimer();\n        } else {\n            setTimePassed(passed);\n        }\n    }, [duration, onOverlimitCountdownFinished, stopTimer]);\n\n    const startTimer = useCallback(() => {\n        start.current = Date.now();\n\n        updateProgress();\n\n        timerId.current = window.setInterval(updateProgress, 50);\n    }, [updateProgress]);\n\n    const handleRepeatSmsButtonClick = useCallback(\n        (event: MouseEvent) => {\n            setIsBlockingOver(false);\n\n            if (onOverlimitRepeatSms) {\n                onOverlimitRepeatSms(event);\n            }\n\n            startTimer();\n        },\n        [onOverlimitRepeatSms, startTimer],\n    );\n\n    useEffect(() => {\n        startTimer();\n\n        return () => {\n            stopTimer();\n        };\n    }, [startTimer, stopTimer]);\n\n    const progress = timePassed / duration;\n\n    return (\n        <div className={styles.component}>\n            {hasFatalError && (\n                <div className={styles.alertIcon}>\n                    <CrossCircleMIcon data-test-id='alert-icon' width={64} height={64} />\n                </div>\n            )}\n            <span className={styles.title}>{title}</span>\n            <div className={styles.description}>\n                <div>{text}</div>\n                {isBlockingOver ? (\n                    <Button\n                        size='xs'\n                        view='secondary'\n                        onClick={handleRepeatSmsButtonClick}\n                        className={styles.getCodeButton}\n                    >\n                        {buttonRetryText}\n                    </Button>\n                ) : (\n                    <div className={styles.countdown}>\n                        <CountdownLoader progress={progress} className={styles.loader} />\n\n                        <div className={styles.timePassed}>\n                            {formatMsAsMinutes(duration - timePassed)}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n"],"names":["ConfirmationV1","forwardRef","_ref","ref","additionalContent","className","_ref$countdownDuratio","countdownDuration","dataTestId","errorIsFatal","_ref$errorTitle","errorTitle","_ref$error","error","_ref$errorOverlimit","errorOverlimit","_ref$errorOverlimitIs","errorOverlimitIsFatal","errorText","_ref$hasPhoneMask","hasPhoneMask","_ref$hasSmsCountdown","hasSmsCountdown","phone","_ref$requiredCharAmou","requiredCharAmount","_ref$signTitle","signTitle","_ref$overlimitTitle","overlimitTitle","_ref$overlimitText","overlimitText","overlimitCountdownDuration","code","_ref$codeSending","codeSending","_ref$codeChecking","codeChecking","_ref$codeCheckingText","codeCheckingText","_ref$codeSendingText","codeSendingText","_ref$buttonErrorText","buttonErrorText","_ref$buttonReturnText","buttonReturnText","_ref$buttonRetryText","buttonRetryText","_ref$alignContent","alignContent","noAttemptsLeftMessage","countdownContent","onInputFinished","onSmsRetryClick","onOverlimitSmsRetryClick","onActionWithFatalError","onCountdownFinished","onOverlimitCountdownFinished","onInputChange","onSmsHintLinkClick","_useState","useState","_useState2","_slicedToArray","showHint","setShowHint","shouldShowFatalError","Boolean","shouldShowOverlimitError","shouldShowSignComponent","shouldShowHint","nonFatalError","inputRef","useRef","handleSmsRetryClick","useCallback","handleOverlimitSmsRetryClick","handleSmsRetryFromHintClick","handleCountdownFinished","handleOverlimitCountdownFinished","handleSmsHintLinkClick","handleErrorSmsRetryClick","useEffect","current","focus","_jsxs","cn","styles","children","_jsx","SignConfirmation","smsHintVisible","title","Overlimit","duration","text","hasFatalError","onOverlimitRepeatSms","role","Button","size","view","onClick","Link","href","defaultProps","CIRCUMFERENCE","CENTER","Math","PI","CountdownLoader","progress","value","min","strokeDasharray","toFixed","strokeDashoffset","width","height","viewBox","concat","cx","SIZE","cy","r","transform","formatMsAsMinutes","ms","totalSeconds","ceil","totalMinutes","floor","totalHours","paddedSeconds","slice","paddedMinutes","paddedHours","Container","hasError","_defineProperty","Countdown","_ref2","_ref2$duration","_ref2$phone","_ref2$hasPhoneMask","content","onRepeatSms","timerId","start","repeatSmsButtonShow","setRepeatSmsButtonShow","_useState3","_useState4","timePassed","setTimePassed","noAttemptsLeftMessagePrev","usePrevious","stopTimer","window","clearInterval","updateProgress","passed","Date","now","startTimer","setInterval","handleRepeatSmsButtonClick","event","formattedPhone","phoneNumber","retryButton","Input","_cn","index","slotsCount","processing","handleChange","handleInputKeyDown","setRef","splittedValue","split","disabled","autoComplete","inputMode","pattern","onChange","targetValue","target","test","newValues","_toConsumableArray","join","mergeArrays","sourceArray","targetArray","startIndex","resultArrayLength","insertedElemIndex","Array","fill","map","_","onKeyDown","onInputKeyDown","key","trim","handleRef","node","CodeInput","_cn2","_ref2$value","inputs","useImperativeHandle","prevValue","input","setSelectionRange","_ref3","inputIndex","length","nextInputIndex","inputValue","displayedError","handleInputFinished","blur","handleInputChange","Loader","pseudo","_ref$duration","isBlockingOver","setIsBlockingOver","CrossCircleMIcon"],"sourceRoot":""}