{"version":3,"file":"2-theming-stories-mdx.6f808e36.iframe.bundle.js","mappings":"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","sources":["webpack://@alfalab/core-components/./node_modules/@mdx-js/react/lib/index.js","webpack://@alfalab/core-components/./node_modules/@storybook/addon-docs/dist/chunk-PCJTTTQV.mjs","webpack://@alfalab/core-components/./.storybook/theming-wizard/questions/index.tsx","webpack://@alfalab/core-components/./.storybook/theming-wizard/answers/keepCssVars/utils.ts","webpack://@alfalab/core-components/./.storybook/theming-wizard/answers/keepCssVars/index.tsx","webpack://@alfalab/core-components/./.storybook/theming-wizard/config.ts","webpack://@alfalab/core-components/./.storybook/theming-wizard/answers/dropCssVars/utils.ts","webpack://@alfalab/core-components/./.storybook/theming-wizard/answers/dropCssVars/index.tsx","webpack://@alfalab/core-components/./.storybook/theming-wizard/index.tsx","webpack://@alfalab/core-components/./docs/2.theming.stories.mdx"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","import React, { Component } from 'react';\nimport { renderElement, unmountElement } from '@storybook/react-dom-shim';\nimport { CodeOrSourceMdx, AnchorMdx, HeadersMdx, Docs } from '@storybook/blocks';\n\nvar defaultComponents={code:CodeOrSourceMdx,a:AnchorMdx,...HeadersMdx},ErrorBoundary=class extends Component{constructor(){super(...arguments);this.state={hasError:!1};}static getDerivedStateFromError(){return {hasError:!0}}componentDidCatch(err){let{showException}=this.props;showException(err);}render(){let{hasError}=this.state,{children}=this.props;return hasError?null:children}},DocsRenderer=class{constructor(){this.render=async(context,docsParameter,element)=>{let components={...defaultComponents,...docsParameter?.components};return new Promise((resolve,reject)=>{import('@mdx-js/react').then(({MDXProvider})=>renderElement(React.createElement(ErrorBoundary,{showException:reject,key:Math.random()},React.createElement(MDXProvider,{components},React.createElement(Docs,{context,docsParameter}))),element)).then(resolve);})},this.unmount=element=>{unmountElement(element);};}};\n\nexport { DocsRenderer, defaultComponents };\n","import React, { FC } from 'react';\n\nimport { Radio } from '@alfalab/core-components-radio';\nimport { RadioGroup } from '@alfalab/core-components-radio-group';\nimport { Space } from '@alfalab/core-components-space';\nimport { Typography } from '@alfalab/core-components-typography';\nimport { Question, Answers } from '../types';\n\nexport type QuestionsProps = {\n    config?: Question[];\n    answers: Answers;\n    onChange?: (answers: Answers, question: Question['name']) => void;\n};\n\nexport const Questions: FC<QuestionsProps> = ({ config = [], answers, onChange = () => {} }) => {\n    const handleChange = (name: Question['name'], payload?: { value: string }) => {\n        onChange(\n            {\n                ...answers,\n                [name]: payload?.value,\n            },\n            name,\n        );\n    };\n\n    return (\n        <Space>\n            {config.map(question => (\n                <RadioGroup\n                    key={question.name}\n                    label={<Typography.Text weight='bold'>{question.title}</Typography.Text>}\n                    direction='horizontal'\n                    name={question.name}\n                    onChange={(_, payload) => handleChange(question.name, payload)}\n                    value={answers[question.name]}\n                >\n                    {question.variants.map(variant => (\n                        <Radio {...variant} key={variant.value} />\n                    ))}\n                </RadioGroup>\n            ))}\n        </Space>\n    );\n};\n","import { Answers } from '.storybook/theming-wizard/types';\n\nexport const darkModeExample = () => `\nimport darkMode from '@alfalab/core-components/themes/dark';\n\n<>\n    {mode === 'dark' && <style>{darkMode}</style>}\n    {this.renderPage()}\n</>\n`;\n\nexport const cssImportsExample = (answers: Answers) => {\n    const cssImports: string[] = [\n        \"@import '@alfalab/core-components/vars/index.css';\",\n        answers.product === 'mobile'\n            ? \"@import '@alfalab/core-components/vars/colors-bluetint.css';\"\n            : '',\n        answers.product !== 'default'\n            ? `@import '@alfalab/core-components/themes/${answers.product}.css';`\n            : '',\n    ].filter(Boolean);\n\n    return `/* app.css */\\n${cssImports.join('\\n')}`;\n};\n","import React from 'react';\n\nimport { List } from '@alfalab/core-components-list';\nimport { Alert } from '@alfalab/core-components-alert';\n\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport { Example } from 'storybook-addon-live-examples';\nimport { cssImportsExample, darkModeExample } from './utils';\nimport { Answers } from '.storybook/theming-wizard/types';\n\nexport const KeepCssVars = ({ answers }: { answers: Answers }) => {\n    if (answers.keepCssVars === 'yes' && answers.ie === 'yes') {\n        return (\n            <Alert view='negative'>\n                <Typography.Text>\n                    К сожалению, IE11 не поддерживает css-переменные, поэтому переменные придется\n                    выпиливать.\n                </Typography.Text>\n            </Alert>\n        );\n    }\n\n    const steps = [];\n\n    steps.push(\n        <div key={`keepCssVars-${answers.product}`} style={{ flex: 1 }}>\n            <Typography.Text>\n                Подключите на проект набор переменных и тему продукта. Обычно это можно сделать в\n                одном из корневых файлов проекта:{' '}\n                <Typography.Text weight='bold'>App.tsx, root.tsx или app.css</Typography.Text>\n            </Typography.Text>\n            <Example live={false} language='css' code={cssImportsExample(answers)} />\n        </div>,\n    );\n\n    if (answers.darkMode === 'yes') {\n        steps.push(\n            <div key='darkModeWithVars' style={{ flex: 1 }}>\n                <Typography.Text>\n                    Добавьте на страницу дополнительные стили, если темный режим был включен. Обычно\n                    это можно сделать в корне приложения.\n                </Typography.Text>\n                <Example live={false} language='css' code={darkModeExample()} />\n            </div>,\n        );\n    }\n\n    return <List tag='ul'>{steps}</List>;\n};\n","import { Answer, Question } from './types';\n\nexport const config: Question[] = [\n    {\n        name: 'product',\n        title: 'Тема продукта',\n        variants: [\n            {\n                label: 'default',\n                value: 'default',\n            },\n            {\n                label: 'click',\n                value: 'click',\n            },\n            {\n                label: 'corp',\n                value: 'corp',\n            },\n            {\n                label: 'mobile',\n                value: 'mobile',\n            },\n            {\n                label: 'site',\n                value: 'site',\n            },\n        ],\n    },\n    {\n        name: 'keepCssVars',\n        title: 'CSS-переменные',\n        variants: [\n            {\n                label: 'Оставляем в проде',\n                value: 'yes',\n            },\n            {\n                label: 'Выпиливаем',\n                value: 'no',\n            },\n        ],\n    },\n    {\n        name: 'ie',\n        title: 'IE11',\n        variants: [\n            {\n                label: 'Поддерживаем',\n                value: 'yes',\n            },\n            {\n                label: 'Можем дропнуть',\n                value: 'no',\n            },\n        ],\n    },\n    {\n        name: 'darkMode',\n        title: 'Темный режим',\n        variants: [\n            {\n                label: 'Есть',\n                value: 'yes',\n            },\n            {\n                label: 'Нет',\n                value: 'no',\n            },\n        ],\n    },\n    {\n        name: 'aruiScripts',\n        title: 'arui-scripts',\n        variants: [\n            {\n                label: 'Есть',\n                value: 'yes',\n            },\n            {\n                label: 'Нет',\n                value: 'no',\n            },\n        ],\n    },\n];\n\nexport const defaultByProduct: {\n    [key: string]: Record<Question['name'], string>;\n} = {\n    default: {\n        product: 'default',\n        keepCssVars: 'yes',\n        darkMode: 'no',\n        aruiScripts: 'yes',\n        ie: 'no',\n    },\n    click: {\n        product: 'click',\n        keepCssVars: 'yes',\n        darkMode: 'no',\n        aruiScripts: 'yes',\n        ie: 'no',\n    },\n    mobile: {\n        product: 'mobile',\n        keepCssVars: 'yes',\n        darkMode: 'yes',\n        aruiScripts: 'yes',\n        ie: 'no',\n    },\n    site: {\n        product: 'site',\n        keepCssVars: 'no',\n        darkMode: 'no',\n        aruiScripts: 'yes',\n        ie: 'yes',\n    },\n    corp: {\n        product: 'corp',\n        keepCssVars: 'no',\n        darkMode: 'no',\n        aruiScripts: 'yes',\n        ie: 'yes',\n    },\n};\n","import { Answers } from \".storybook/theming-wizard/types\";\n\nexport const withoutAruiScriptsExample = (answers: Answers) => {\n    const settings: Record<string, any> = {\n        preserve: false,\n    };\n\n    if (answers.product !== 'default') {\n        settings.importFrom = `./node_modules/@alfalab/core-components/themes/${answers.product}.css`;\n    }\n\n    return `postcssCustomProperties(${JSON.stringify(settings, null, 4)})`;\n};\n\nexport const aruiScriptsExample = (answers: Answers) => {\n    return JSON.stringify(\n        {\n            keepCssVars: false,\n            componentsTheme: `./node_modules/@alfalab/core-components/themes/${answers.product}.css`,\n        },\n        null,\n        4,\n    );\n};\n\nexport const darkModeExample = (answers: Answers) => `\nimport darkMode from '@alfalab/core-components/themes/compiled/${answers.product}-dark-${\n    answers.product === 'mobile' ? 'bluetint' : 'indigo'\n}';\n\n<>\n    {mode === 'dark' && <style>{darkMode}</style>}\n    {this.renderPage()}\n</>\n`;\n","import React from 'react';\n\nimport { List } from '@alfalab/core-components-list';\nimport { Link } from '@alfalab/core-components-link';\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport { Example } from 'storybook-addon-live-examples';\nimport { Answers } from '.storybook/theming-wizard/types';\n\nimport { aruiScriptsExample, withoutAruiScriptsExample, darkModeExample } from './utils';\n\nexport const DropCssVars = ({ answers }: { answers: Answers }) => {\n    const steps = [];\n\n    if (answers.aruiScripts === 'yes' && answers.product !== 'default') {\n        steps.push(\n            <div key='arui-scripts' style={{ flex: 1 }}>\n                <Typography.Text>\n                    Подключите тему в{' '}\n                    <Link\n                        href='https://git.moscow.alfaintra.net/projects/EF/repos/arui-scripts/browse/packages/arui-scripts#%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8'\n                        view='default'\n                        rel='noopener'\n                        target='_blank'\n                    >\n                        настройках\n                    </Link>{' '}\n                    arui-scripts\n                </Typography.Text>\n                <Example live={false} language='json' code={aruiScriptsExample(answers)} />\n            </div>,\n        );\n    }\n\n    if (answers.aruiScripts === 'no') {\n        steps.push(\n            <div key='without-arui-scripts' style={{ flex: 1 }}>\n                <Typography.Text>\n                    Настройте плагин{' '}\n                    <Link\n                        href='https://github.com/postcss/postcss-custom-properties#importfrom'\n                        view='default'\n                        rel='noopener'\n                        target='_blank'\n                    >\n                        postcss-custom-properties\n                    </Link>\n                </Typography.Text>\n                <Example live={false} language='json' code={withoutAruiScriptsExample(answers)} />\n            </div>,\n        );\n    }\n\n    if (answers.darkMode === 'yes') {\n        steps.push(\n            <div key='dark-mode-without-vars' style={{ flex: 1 }}>\n                <Typography.Text>\n                    Добавьте на страницу дополнительные стили, если темный режим был включен. Обычно\n                    это можно сделать в корне приложения.\n                </Typography.Text>\n                <Example live={false} language='css' code={darkModeExample(answers)} />\n            </div>,\n        );\n    }\n\n    if (!steps.length) {\n        return <Typography.Text>Дополнительных настроек не требуется</Typography.Text>;\n    }\n\n    return <List tag='ul'>{steps}</List>;\n};\n","import React, { useState } from 'react';\n\nimport { Typography } from '@alfalab/core-components-typography';\n\nimport { Questions } from './questions';\nimport { KeepCssVars } from './answers/keepCssVars';\nimport { config, defaultByProduct } from './config';\nimport { Answers, Question } from './types';\nimport { DropCssVars } from './answers/dropCssVars';\n\nexport const ThemingWizard = () => {\n    const [answers, setAnswers] = useState(defaultByProduct.default);\n\n    const handleChange = (newAnswers: Answers, question: Question['name']) => {\n        if (question === 'product') {\n            setAnswers({\n                ...newAnswers,\n                ...(defaultByProduct[newAnswers.product] || {}),\n            });\n        } else {\n            setAnswers(newAnswers);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Questions config={config} answers={answers} onChange={handleChange} />\n\n            <Typography.Title tag='h3' defaultMargins={true} view=\"small\">\n                Настройка темизации\n            </Typography.Title>\n\n            {answers.keepCssVars === 'yes' ? (\n                <KeepCssVars answers={answers} />\n            ) : (\n                <DropCssVars answers={answers} />\n            )}\n        </React.Fragment>\n    );\n};\n","\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"@storybook/addon-docs/mdx-react-shim\";\nimport { Meta } from '@storybook/addon-docs';\nimport { ThemingWizard } from 'storybook/theming-wizard';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    h3: \"h3\",\n    h4: \"h4\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Meta, {\n      title: \"For users/\\u0422\\u0435\\u043C\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\",\n      parameters: {\n        previewTabs: {\n          canvas: {\n            hidden: true\n          }\n        }\n      },\n      id: \"Instructions/Theming\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"\\u0442\\u0435\\u043C\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\",\n      children: \"Темизация\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Настройка темизации может несколько отличаться в разных продуктах.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Выберите конфигурацию своего проекта, чтобы получить инструкцию по настройке.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(ThemingWizard, {}), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"\\u043E\\u0433\\u0440\\u0430\\u043D\\u0438\\u0447\\u0435\\u043D\\u0438\\u044F\",\n      children: \"Ограничения\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h4, {\n      id: \"\\u043D\\u0430-\\u043E\\u0434\\u043D\\u043E\\u0439-\\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0435-\\u0434\\u043E\\u043B\\u0436\\u043D\\u0430-\\u0438\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F-\\u0442\\u043E\\u043B\\u044C\\u043A\\u043E-\\u043E\\u0434\\u043D\\u0430-\\u0442\\u0435\\u043C\\u0430\",\n      children: [\"На одной странице должна использоваться только \", /*#__PURE__*/_jsx(_components.strong, {\n        children: \"одна тема\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"В идеале весь проект должен использовать только одну тему, например тему mobile.\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h4, {\n      id: \"\\u043D\\u0430-\\u043E\\u0434\\u043D\\u043E\\u0439-\\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0435-\\u0434\\u043E\\u043B\\u0436\\u043D\\u0430-\\u0438\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F-\\u0442\\u043E\\u043B\\u044C\\u043A\\u043E-\\u043E\\u0434\\u043D\\u0430-\\u043F\\u0430\\u043B\\u0438\\u0442\\u0440\\u0430-\\u0446\\u0432\\u0435\\u0442\\u043E\\u0432\",\n      children: [\"На одной странице должна использоваться только \", /*#__PURE__*/_jsx(_components.strong, {\n        children: \"одна палитра цветов\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Если в проекте используется и блютинт и индиго, то палитры цветов должны подключаться через отдельные css-бандлы, либо через вставку style-тэга с нужно палитрой на нужной странице.\\nИначе в итоговом css-бандле цвета перезапишут друг-друга.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"По умолчанию используется палитра bluetint.\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h4, {\n      id: \"\\u0442\\u0435\\u043C\\u043D\\u044B\\u0439-\\u0440\\u0435\\u0436\\u0438\\u043C-\\u043F\\u0435\\u0440\\u0435\\u043A\\u0440\\u0430\\u0448\\u0438\\u0432\\u0430\\u0435\\u0442-\\u0432\\u0441\\u044E-\\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0443-\\u0446\\u0435\\u043B\\u0438\\u043A\\u043E\\u043C\",\n      children: \"Темный режим перекрашивает всю страницу целиком\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Темный режим применяется на всю страницу. Перекрасить отдельные блоки нельзя. Если вам это нужно — скорее всего это не темный режим, а inverted версия компонента.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, {\n    ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n/* ========= */\nexport const __page = () => {\n  throw new Error(\"Docs-only story\");\n};\n__page.parameters = {\n  docsOnly: true\n};\nconst componentMeta = {\n  title: 'For users/Темизация',\n  id: 'Instructions/Theming',\n  parameters: {\n    previewTabs: {\n      canvas: {\n        hidden: true\n      }\n    }\n  },\n  tags: ['stories-mdx'],\n  includeStories: [\"__page\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;"],"names":["MDXContext","withMDXComponents","Component","boundMDXComponent","props","allComponents","useMDXComponents","components","contextComponents","emptyObject","MDXProvider","children","disableParentContext","Provider","value","defaultComponents","code","a","ErrorBoundary","constructor","super","arguments","this","state","hasError","static","componentDidCatch","err","showException","render","DocsRenderer","async","context","docsParameter","element","Promise","resolve","reject","then","key","Math","random","unmount","Questions","_ref","_ref$config","config","answers","_ref$onChange","onChange","handleChange","name","payload","_objectSpread","_defineProperty","_jsx","Space","map","question","RadioGroup","label","Typography","weight","title","direction","_","variants","variant","_createElement","Radio","cssImportsExample","cssImports","product","concat","filter","Boolean","join","KeepCssVars","keepCssVars","ie","Alert","view","steps","push","_jsxs","style","flex","Example","live","language","darkMode","List","tag","defaultByProduct","default","aruiScripts","click","mobile","site","corp","withoutAruiScriptsExample","settings","preserve","importFrom","JSON","stringify","aruiScriptsExample","componentsTheme","darkModeExample","DropCssVars","Link","href","rel","target","length","ThemingWizard","_useState","useState","_useState2","_slicedToArray","setAnswers","React","newAnswers","defaultMargins","_createMdxContent","_components","Object","assign","h2","p","h3","h4","strong","parameters","previewTabs","canvas","hidden","id","__page","Error","docsOnly","componentMeta","tags","includeStories","docs","page","MDXContent","wrapper","MDXLayout"],"sourceRoot":""}